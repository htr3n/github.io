<?xml version="1.0" encoding="utf-8" standalone="yes" ?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Orm on htr3n&#39;s</title><link>http://blog.test:8888/tags/orm/<description>Recent content in Orm on htr3n&#39;s</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright><lastbuilddate>Tue, 12 Jun 2018 00:00:00 +0000</lastbuilddate><atom:link href="http://blog.test:8888/tags/orm/index.xml" rel="self" type="application/rss+xml"><item><title>Hibernate: Migrating 3.x to 5.x</title><link>http://blog.test:8888/2018/06/migrating-hibernate/<pubdate>Tue, 12 Jun 2018 00:00:00 +0000</pubdate><guid>http://blog.test:8888/2018/06/migrating-hibernate/</guid><description>Recently I had to upgrade a codebase using Hibernate 3.x ORM on Spring 3 to Hibernate 5 (and Spring 5, respectively). Here I note down some aspects and issues that I have to deal with during this migration. An overview of a simple data access architecture is as following. The current codebase leverages lots of Hibernate native API that are rich and optimized. I am looking forward to be less dependent on Hibernate-specific stuffs and using standards such as Java Persistence API (JPA) and Java Transaction API (JTA) as much as possible in my projects.</description></item></channel></rss>