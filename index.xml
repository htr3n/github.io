<?xml version="1.0" encoding="utf-8" standalone="yes" ?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>htr3n&#39;s</title><link>https://htr3n.github.io/<description>Recent content on htr3n&#39;s</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastbuilddate>Tue, 27 Nov 2018 00:00:00 +0000</lastbuilddate><atom:link href="https://htr3n.github.io/index.xml" rel="self" type="application/rss+xml"><item><title>Spring Boot properties issues with trailing whitespaces</title><link>https://htr3n.github.io/2018/11/spring-boot-trailing-whitespaces/<pubdate>Tue, 27 Nov 2018 00:00:00 +0000</pubdate><guid>023e64d741e3fdd3bceae627167e2095</guid><description>&lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;br&gt;Spring Boot does not trim off the &lt;a href=&#34;#root-causes&#34;&gt;trailing whitespaces in &lt;code&gt;*.properties&lt;/code&gt;&lt;/a&gt; that in turn might lead to some &lt;a href=&#34;#problem&#34;&gt;unexpected errors&lt;/a&gt;. As the Spring development team decides to &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106#issuecomment-173278825&#34;&gt;not fix this issue&lt;/a&gt;, we can &lt;a href=&#34;#solutions&#34;&gt;configure code editors&lt;/a&gt; to avoid some similar problems.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&#34;fun&#34;&gt;The fun &amp;hellip;&lt;/h2&gt; &lt;p&gt;Coming back working with Spring after few years, I was thrilled trying out Spring Boot 2 with its superb cool auto-configurations and many more. It&amp;rsquo;s a lot much more fun to work with than Spring 3 used in &lt;a href=&#34;https://github.com/htr3n/loan-approval-portal&#34;&gt;some&lt;/a&gt; of my previous projects.&lt;/p&gt; &lt;h2 id=&#34;problem&#34;&gt;, the problem &amp;hellip;&lt;/h2&gt; &lt;p&gt;When tinkering with Spring Boot, I found a half-funny half-annoying issue that made one of my Spring apps failed to launch. As the project is rather clumpy and full of experimenting code, here I will replicate this issue in a smaller and simpler scale.&lt;/p&gt; &lt;p&gt;Let&amp;rsquo;s create a small Spring Boot project with JPA and H2. We can either use &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initialzr&lt;/a&gt;, &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html&#34;&gt;Spring Boot CLI&lt;/a&gt;, or IDE such as IntelliJ IDEA, Eclipse or NetBeans. To keep it simple, I use Spring Boot CLI that &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-installing-the-cli&#34;&gt;can be easily installed&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ spring version Spring CLI v2.1.0.RELEASE $ spring init --dependencies=data-jpa,h2 spring-boot-trailing-spaces Using service at https://start.spring.io Project extracted to &#39;/dev/spring-framework/spring-boot-trailing-spaces&#39; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The newly created Spring application can be launched with Maven.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd spring-boot-trailing-spaces $ mvn spring-boot:run ... &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There should be no problem as we have not made any changes. Now, open &amp;ldquo;&lt;code&gt;src/main/resources/application.properties&lt;/code&gt;&amp;rdquo; with an editor, then copy and paste the following code. Promise me that you don&amp;rsquo;t change the pasted code ;)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;spring.datasource.url=jdbc:h2:mem:testdb spring.datasource.driverClassName=org.h2.Driver spring.datasource.username=sa spring.datasource.password= &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These lines are typical data source configuration of an embedded H2 database engine that you might have seen around or used many times. Unfortunately, this time they will crash the Spring application.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn spring-boot:run ... 2018-11-27 21:20:54.289 ERROR 92868 --- [ main] o.s.boot.SpringApplication : Application run failed org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration&#39;: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;dataSource&#39; defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method &#39;dataSource&#39; threw exception; nested exception is java.lang.IllegalStateException: Cannot load driver class: org.h2.Driver &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Walking across the lengthy exception stack and error messages, the main culprit seems to be &amp;ldquo;&lt;em&gt;Cannot load driver class: org.h2.Driver&lt;/em&gt;&amp;rdquo;.&lt;/p&gt; &lt;p&gt;Why is that?&lt;/p&gt; &lt;h2 id=&#34;root-causes&#34;&gt;, the root causes? &amp;hellip;&lt;/h2&gt; &lt;p&gt;The very first thing came to my mind is to check whether H2 jar is included properly in the classpath.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mvn dependency:tree ... [INFO] +- com.h2database:h2:jar:1.4.197:runtime ... &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Yup, it&amp;rsquo;s there!&lt;/p&gt; &lt;p&gt;You can try further on, like I did, to remove &lt;code&gt;$HOME/.m2&lt;/code&gt; and re-run Maven or even restart the machine (but the app still doesn&amp;rsquo;t work!!!).&lt;/p&gt; &lt;p&gt;I have searched around for this specific issue and found some similar or the same exception, for instance, &lt;a href=&#34;https://stackoverflow.com/a/51193609&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/q/40137347&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/q/4008011&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://stackoverflow.com/q/43616563&#34;&gt;here&lt;/a&gt;. None of the solutions there can fix it.&lt;/p&gt; &lt;p&gt;It took me nearly half an hour to figure out the root cause. That is the single &lt;em&gt;trailing space&lt;/em&gt; at the end of &lt;code&gt;org.h2.Driver&lt;/code&gt;. Here I intentionally added in order to replicate exactly the original problem in my experimenting project. And the fault was mine who just lazily copied and pasted these few lines of Spring Boot configurations. After I removed all trailing spaces, the error disappeared.&lt;/p&gt; &lt;p&gt;Voil√†!&lt;/p&gt; &lt;h2 id=&#34;solutions&#34;&gt;&amp;hellip; and the solutions?!&lt;/h2&gt; &lt;p&gt;No copy &amp;amp; paste please, you might say ;)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;no-copy-paste.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt; &lt;p&gt;I would blame the Pivotal development team (just kidding ;) as they should have handled such a trivial issue better because trailing whitespaces, by default in most editors, are not always visible nor printable. Indeed, trailing whitespaces in Spring properties has driven many developers crazy &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/7251&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/7251&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/13967&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/5421&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106&#34;&gt;here&lt;/a&gt;. Note that it&amp;rsquo;s for now &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106&#34;&gt;official&lt;/a&gt; that the Spring Boot team won&amp;rsquo;t fix this because they &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106#issuecomment-173278825&#34;&gt;cannot safely trim properties&lt;/a&gt;. So, it&amp;rsquo;s our responsibilities to take care of these whitespaces.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Sitenote: Whitespaces can also become &lt;a href=&#34;https://blog.codinghorror.com/whitespace-the-silent-killer/&#34;&gt;worst enemies to source code controls&lt;/a&gt; (but not all whitespaces are born equal, for instance, two continuous trailing spaces in some flavours of &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; should be persisted as they are translated into HTML line-breaks &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;).&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Fortunately, most of code editors somehow can help to remedy the aforementioned issue either with built-in features or extensions. There are two possible non-exclusive methods (which can be combined of course)&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;M1&lt;/strong&gt;. Showing or highlighting whitespaces&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;M2&lt;/strong&gt;. (Automatically) trimming off whitespaces&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the first method, we configure the editors to force hard-to-see non-printable characters like tabs and spaces become visible. For instance, the problematic example above is shown in Visual Studio Code with the extension &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces&#34;&gt;Trailing Spaces&lt;/a&gt; helps to highlight the trailing whitespaces in red. This way might be a bit UI-intrusive as highlighted whitespaces everywhere can distract many of us. I personally don&amp;rsquo;t really like having the whitespaces and tabs messing up with my code structure.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;trailing-space.png&#34; alt=&#34;Trailing spaces in code editor&#34; /&gt;&lt;/p&gt; &lt;p&gt;The second method can be automatic or manual in which the editors (maybe with support from extensions) can remove the whitespaces during saving or via some editing commands. However, beware the issues with Markdown trailing whitespaces, we should use this option per language specific settings if possible.&lt;/p&gt; &lt;p&gt;We will examine few popular code editors (please add more of yours in the comment) regarding these two methods.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Either &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ Show Invisibles&lt;/span&gt; or &lt;code&gt;config.cson&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;*&amp;quot;: editor: ... showInvisibles: true &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/&#34;&gt;Eclipse&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) From version 3.7+: &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ General ‚ñ∏ Editors ‚ñ∏ Text Editors &lt;/span&gt; : Turn on &amp;ldquo;&lt;em&gt;Show whitespace characters&lt;/em&gt;&amp;rdquo; and fine-tune the option via &amp;ldquo;&lt;em&gt;configure visibility&lt;/em&gt;&amp;ldquo;&lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) It&amp;rsquo;s rather tedious in Eclipse as many people have already complained. It&amp;rsquo;s perhaps due to the nature of Eclipse as a platform for several editors and plugins working together. IMHO, Eclipse should offer a common option to remove trailing whitespaces for all editors in the same level and place as &amp;ldquo;&lt;em&gt;Show whitespace characters&lt;/em&gt;&amp;rdquo; above. Each kind of editor then might offer specific and optimal ways for certain file types. Unfortunately, for now we have to configure for each file type editor or formatter. For instance, Java editor &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ Java ‚ñ∏ Editor ‚ñ∏ Save Actions&lt;/span&gt; , check &amp;ldquo;&lt;em&gt;Additional actions&lt;/em&gt;&amp;rdquo;, choose &amp;ldquo;&lt;em&gt;Configure&lt;/em&gt;&amp;rdquo;. Next, in the &amp;ldquo;&lt;em&gt;Code Organizing&lt;/em&gt;&amp;rdquo; tab check &amp;ldquo;&lt;em&gt;Remove trailing whitespace&lt;/em&gt;&amp;rdquo;. Unfortunately, properties file in our example does not provide such options in Eclipse.&lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) You may want to use the plugin &lt;a href=&#34;https://github.com/iloveeclipse/anyedittools&#34;&gt;AnyEdit Tools&lt;/a&gt; to clean up trailing whitespaces for all file types: &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ AnyEdit Tools ‚ñ∏ Auto ‚ñ∏ Convert ‚ñ∏ Remove trailing whitespace&lt;/span&gt; &lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) A universal approach, also a little more difficult, is to use &amp;ldquo;&lt;em&gt;Search &amp;amp; Replace&lt;/em&gt;&amp;rdquo; to search with regular expressions for all of &lt;code&gt;&amp;quot;[\t ]+$&amp;quot;&lt;/code&gt; (i.e. more than one whitespaces and/or tabs, please note the whitespace between &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;) and replace them with&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; (blank/empty).&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ Editor ‚ñ∏ Appearance ‚ñ∏ Show whitespaces&lt;/span&gt; or &lt;span class=&#34;menu&#34;&gt;View ‚ñ∏ Active Editor ‚ñ∏ Show whitespaces&lt;/span&gt; &lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) Since 2017.2 and later, there is an option &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ Editor ‚ñ∏ General ‚ñ∏ Strip trailing whitespaces on Save&lt;/span&gt; with &amp;ldquo;&lt;code&gt;All&lt;/code&gt;&amp;rdquo;, &amp;ldquo;&lt;code&gt;Modified Lines&lt;/code&gt;&amp;rdquo; or &amp;ldquo;&lt;code&gt;None&lt;/code&gt;&amp;rdquo; but the IDE does not quite behave, i.e. I chose &amp;ldquo;&lt;code&gt;All&lt;/code&gt;&amp;rdquo; but the trailing spaces are still there after saving. It&amp;rsquo;s rather lame and embarrassing for such a highly praised and expensive IDEs.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;(&lt;strong&gt;M1&lt;/strong&gt;) &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ Preferences.sublime-settings‚ÄîUser&lt;/span&gt; : &lt;code&gt;&amp;quot;draw_white_space&amp;quot;: &amp;quot;all&amp;quot;&lt;/code&gt; (show all whitespaces) or &lt;code&gt;&amp;quot;draw_white_space&amp;quot;: &amp;quot;selection&amp;quot;&lt;/code&gt; (only show within the selection)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;(&lt;strong&gt;M2&lt;/strong&gt;) &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ Preferences.sublime-settings‚ÄîUser&lt;/span&gt; : &lt;code&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;: false&lt;/code&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;(&lt;strong&gt;M2&lt;/strong&gt;) Use the plug-in &lt;a href=&#34;https://github.com/jonlabelle/Trimmer&#34;&gt;Trimmer&lt;/a&gt; for manually cleaning up whitespaces&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) Either &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ Settings ‚ñ∏ Render Whitespace&lt;/span&gt; or &lt;code&gt;settings.json&lt;/code&gt; ‚ñ∏ &lt;code&gt;&amp;quot;editor.renderWhitespace&amp;quot;: &amp;quot;boundary&amp;quot;&lt;/code&gt; (to render whitespaces everywhere except single space between words) or &lt;code&gt;&amp;quot;editor.renderWhitespace&amp;quot;: &amp;quot;all&amp;quot;&lt;/code&gt; (to render all whitespaces)&lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) Either &lt;span class=&#34;menu&#34;&gt;Preferences ‚ñ∏ Settings ‚ñ∏ Render Whitespace&lt;/span&gt; or &lt;code&gt;settings.json&lt;/code&gt; ‚ñ∏ &lt;code&gt;&amp;quot;files.trimTrailingWhitespace&amp;quot;: true&lt;/code&gt;&lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M1+2&lt;/strong&gt;) I use the extension &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces&#34;&gt;Trailing Spaces&lt;/a&gt; that even goes further with red colour highlighting of whitespaces and provides extra commands for (manually) trimming whitespaces.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.vim.org/&#34;&gt;Vim&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You can follow the tips on &lt;a href=&#34;http://vim.wikia.com/wiki/Highlight_unwanted_spaces&#34;&gt;highlighting unwanted spaces&lt;/a&gt; and &lt;a href=&#34;http://vim.wikia.com/wiki/Remove_unwanted_spaces&#34;&gt;removing unwanted spaces&lt;/a&gt;, some other &lt;a href=&#34;https://vi.stackexchange.com/a/2285&#34;&gt;advanced tips on Vi and Vim SE&lt;/a&gt;, or using a plug-in that can highlight trailing whitespaces and provide commands to strip all of them&lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M1+2&lt;/strong&gt;) &lt;a href=&#34;https://github.com/bronson/vim-trailing-whitespace&#34;&gt;vim-trailing-whitespace&lt;/a&gt; highlighting and trimming with &lt;code&gt;:FixWhitespace&lt;/code&gt;&lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M1+2&lt;/strong&gt;) &lt;a href=&#34;ntpeters/vim-better-whitespace&#34;&gt;ntpeters/vim-better-whitespace&lt;/a&gt; highlighting and trimming with &lt;code&gt;:StripWhitespace&lt;/code&gt;&lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) &lt;a href=&#34;https://www.vim.org/scripts/script.php?script_id=3966&#34;&gt;ShowTrailingWhitespace&lt;/a&gt;: mostly trimming whitespaces&lt;/li&gt; &lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) &lt;a href=&#34;https://www.vim.org/scripts/script.php?script_id=3967&#34;&gt;DeleteTrailingWhitespace&lt;/a&gt;: removing trailing whitespaces with &lt;code&gt;:DeleteTrailingWhitespace&lt;/code&gt; or automatically when the buffer is saved&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the sake of completeness, there are some editor-independent solutions too.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/sed/manual/sed.html&#34;&gt;sed&amp;mdash;a stream editor&lt;/a&gt; (credits to Tim Pote&amp;rsquo;s excellent &lt;a href=&#34;https://stackoverflow.com/a/10711226/339302&#34;&gt;SO answer&lt;/a&gt;)&lt;/p&gt; &lt;ul&gt; &lt;li&gt;For POSIX&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; find . -type f -name &#39;*.properties&#39; -exec sed --in-place &#39;s/[[:space:]]\+$//&#39; {} \+ &lt;/code&gt;&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;For macOS/BSD&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; find . -iname &#39;*.properties&#39; -type f -exec sed -i &#39;&#39; &#39;s/[[:space:]]\{1,\}$//&#39; {} \+ &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wow, quite a long post for such a trivial issue, eh?! Thanks for reading to the end and I hope that my wasted time and effort here would save some of yours in future.&lt;/p&gt; &lt;p&gt;Cheers!&lt;/p&gt;</description></item><item><title>Back to basics: Test-driven Spring JDBC</title><link>https://htr3n.github.io/2018/11/test-driven-spring-jdbc/<pubdate>Tue, 20 Nov 2018 00:00:00 +0000</pubdate><guid>a359f1190fd351cad5f94a10fb459d24</guid><description>&lt;p&gt;&lt;a href=&#34;https://spring.io&#34;&gt;Spring&lt;/a&gt; is a popular heavy-weight framework for developing Java/Groovy based applications. Its rich libraries and software stack can cover from front-end to back-end development. In 2009 I used Spring Framework 3 to develop &lt;a href=&#34;https://github.com/htr3n/loan-approval-portal&#34;&gt;web services and MVC+Hibernate portal&lt;/a&gt; for a fictious &lt;a href=&#34;https://github.com/htr3n/loan-approval&#34;&gt;loan approval process&lt;/a&gt;. Despite a tad steep learning-curve, I could manage to get the services and portal up and running and integrated with third-party libraries quite smoothly.&lt;/p&gt; &lt;p&gt;In my prevous projects, I mostly used Spring with Hibernate and/or JPA for higher abstraction level of data access. Coming back working with Spring after few years, I want to delve into lower layer of data access to better understand what behind the scene of Hibernate/JPA abstraction layers. This post is sort of my note-to-self on Spring and JDBC (Java Database Connectivity), especially on &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html&#34;&gt;JdbcTemplate&lt;/a&gt;. Besides, it also reports a tricky case with retrieving data with &lt;code&gt;JdbcTemplate.queryForXXX()&lt;/code&gt; employed by several on-line tutorials which was efficiently exposed by appropriate tests.&lt;/p&gt; &lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt; &lt;p&gt;JDBC defines standard application programming interface (API) based on that a client can access a database. Each database vendor often provides low-level vendor-specific database drivers based on JDBC predefined interfaces. JDBC is considered the lowest recommended abstraction level to work with databases in Java.&lt;/p&gt; &lt;p&gt;In short, a typical approach to database access using JDBC comprises these basic steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Obtain a &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/Connection.html&#34;&gt;Connection&lt;/a&gt;, e.g. via &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/DriverManager.html&#34;&gt;DriverManager&lt;/a&gt; or &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/javax/sql/DataSource.html&#34;&gt;DataSource&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Create an instance of type &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/Statement.html&#34;&gt;Statement&lt;/a&gt; or its sub-types such as &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/CallableStatement.html&#34;&gt;CallableStatement&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html&#34;&gt;PreparedStatement&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Use the aforementioned statement to execute database queries&lt;/li&gt; &lt;li&gt;Retrieve and process the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html&#34;&gt;ResultSet&lt;/a&gt; (if any)&lt;/li&gt; &lt;li&gt;Close the statement and release all resources (connection is &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html&#34;&gt;AutoCloseable&lt;/a&gt;)&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Along these steps, we should also handle any &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/jdbc/basics/sqlexception.html&#34;&gt;database exceptions&lt;/a&gt; as well. You can find more details on JDBC programming &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html&#34;&gt;here&lt;/a&gt;. Here is a simple example of accessing databases using JDBC and &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&#34;&gt;&lt;em&gt;try-with-resources&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=JDBC.java&#34;&gt;&lt;/script&gt; &lt;p&gt;Fortunately, Spring, via &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html&#34;&gt;JdbcTemplate&lt;/a&gt;, ofters a higher level of abstraction on top of Java JDBC that would save us a lot of boiler plate code and enable smooth integration with the rest of Spring framework&amp;rsquo;s ecosystem. As such, we can leverage other parts of Spring farmework, for instance, the awesome &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt;, to automate lots of configuration effort.&lt;/p&gt; &lt;h2 id=&#34;a-simple-crud-project-with-spring-jdbc&#34;&gt;A simple CRUD project with Spring JDBC&lt;/h2&gt; &lt;p&gt;Nothing is better than a hand-on development project that demonstrate how Spring JDBC works. We can start with &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initialzr&lt;/a&gt; and &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt; to jump start and better concentrate on the main code instead of numerous dependencies and configurations.&lt;/p&gt; &lt;p&gt;There are a few ways to bootstrap a project with Spring Initialzr. Most of the popular Java IDE such as Eclipse or Intellij IDEA with Spring extensions can create a new project via Spring Initialzr. You can also achieve the same result from the web site &lt;a href=&#34;https://start.spring.io&#34;&gt;https://start.spring.io&lt;/a&gt; or even using &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-installing-the-cli&#34;&gt;Spring Boot CLI&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here I will use Intellij IDEA for just showing the necessary steps and dependencies. You can use any of the aforementioned methods to obtain the same result.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Create a new project and choose Spring Initialzr.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;ide-step-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Fill in necessary project information, keep default values for project&amp;rsquo;s type (Maven), language (Java), packaging (Jar), Java version (8).&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;ide-step-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Choose the section SQL and make sure the checkboxes of H2 and JDBC are ticked.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;ide-step-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;Finish the project creation wizard.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;ide-step-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt; &lt;p&gt;After Step 4, Intellij IDEA will create a new Maven Spring Boot project with some initial source and configuration files.&lt;/p&gt; &lt;p&gt;By default, the main configuration file for Spring Boot is &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;ide-main.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt; &lt;h3 id=&#34;defining-domain-entities&#34;&gt;Defining Domain Entities&lt;/h3&gt; &lt;p&gt;We might not need a complex domain model but rather a simple entity mapped to a database table. For example, a &lt;code&gt;Customer&lt;/code&gt; entity as shown in Java code and a corresponding &lt;code&gt;customer&lt;/code&gt; table.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=Customer.java&#34;&gt;&lt;/script&gt; &lt;h3 id=&#34;configuring-database-connection&#34;&gt;Configuring Database Connection&lt;/h3&gt; &lt;p&gt;Normally, we have to provide sufficient information to establish database connections, for instance, JDBC url, authentication, and maybe some extra parameters. &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html#howto-configure-a-datasource&#34;&gt;Per convention&lt;/a&gt;, Spring Boot can scan for data sources configurations as &lt;code&gt;@Bean&lt;/code&gt; or in &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For better concentraton on test-driven JDBC CRUD, we can leverage &lt;code&gt;@JdbcTest&lt;/code&gt; explained in the subsequent section to set up an in-memory embedded database and skip the details on data source configuration for now.&lt;/p&gt; &lt;p&gt;However, we must still initialise the database (otherwise Spring will complain that the table &lt;code&gt;customer&lt;/code&gt; &lt;em&gt;does not exist&lt;/em&gt; when our application or tests starts). By convention documented &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-spring-jdbc&#34;&gt;here&lt;/a&gt;, we simply add a file &lt;code&gt;schema.sql&lt;/code&gt; in the folder &lt;code&gt;src/main/resources&lt;/code&gt; which contains a simple SQL DDL script for creating a table &lt;code&gt;customer&lt;/code&gt;.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=schema.sql&#34;&gt;&lt;/script&gt; &lt;h3 id=&#34;test-driven-crud&#34;&gt;Test-Driven CRUD&lt;/h3&gt; &lt;p&gt;At the heart of our JDBC project is a &lt;code&gt;CustomerDao.java&lt;/code&gt; with basic &lt;a href=&#34;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&#34;&gt;CRUD methods&lt;/a&gt;. The class &lt;code&gt;CustomerDao&lt;/code&gt; is annotated with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&#34;&gt;@Repository&lt;/a&gt; to indicate this is a data access component that is autodetected through normal Spring&amp;rsquo;s classpath scanning.&lt;/p&gt; &lt;p&gt;As &lt;code&gt;JdbcTemplate&lt;/code&gt; will be used to work with H2 database, we just declared an &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html&#34;&gt;@Autowired&lt;/a&gt; field, the rest will be taken care by Spring.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=CustomerDao.java&#34;&gt;&lt;/script&gt; &lt;h4 id=&#34;crud-tests&#34;&gt;CRUD Tests&lt;/h4&gt; &lt;p&gt;Before starting implementing the CRUD methods, we create some unit tests in &lt;code&gt;CustomerDaoTest&lt;/code&gt;. Again, Spring Boot will help us a lot here with setting up and shutting down the testing environment via annotations such as &lt;code&gt;@RunWith&lt;/code&gt; and &lt;code&gt;@SpringBootTest&lt;/code&gt;. We just need to declare an &lt;em&gt;auto-wired&lt;/em&gt; object &lt;code&gt;CustomerDao&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Spring provides powerful means for database testing, for instance, &lt;code&gt;@Transational&lt;/code&gt; and &lt;code&gt;@Rollback&lt;/code&gt;. With these annotations, Spring will take care of database transactions as well as rollling back the testing databases to its initial state.&lt;/p&gt; &lt;p&gt;Unfortunately, it would be too tedious to annotate each test method. Spring Boot comes to handy with &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/autoconfigure/jdbc/JdbcTest.html&#34;&gt;&lt;code&gt;@JdbcTest&lt;/code&gt;&lt;/a&gt; that enables several useful features for JDBC tests including an in-memory embedded database as well as transactional and roll back at the end of each test.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;br&gt;By default, &lt;code&gt;@JdbcTest&lt;/code&gt; &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test&#34;&gt;won&amp;rsquo;t load regular &lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;, and as a result, &lt;code&gt;CustomerDao&lt;/code&gt; won&amp;rsquo;t be loaded because it is a &lt;code&gt;@Repository&lt;/code&gt;, i.e. a sub-kind of &lt;code&gt;@Component&lt;/code&gt;. Spring will inform us that it fails to find the required autowire &lt;code&gt;CustomerDao&lt;/code&gt; for &lt;code&gt;CustomerDaoTest&lt;/code&gt;. To fix it, simply annotation &lt;code&gt;CustomerDaoTest&lt;/code&gt; with &lt;code&gt;@ComponentScan&lt;/code&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;This is the whole test case of our tentative CRUD methods.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=CustomerDaoTest.java&#34;&gt;&lt;/script&gt; &lt;h4 id=&#34;crud-implementation&#34;&gt;CRUD Implementation&lt;/h4&gt; &lt;p&gt;With the tests defined, we can start implementing the CRUD using Spring &lt;code&gt;JdbcTemplate&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;reate&lt;/p&gt; &lt;p&gt;To satisfy the test described in &lt;code&gt;create_shouldReturnValidCustomer_whenAddingNewCustomer()&lt;/code&gt;, our &lt;code&gt;Customer.create()&lt;/code&gt; must successfully save the input &lt;code&gt;Customer&lt;/code&gt; and return with an auto-generated primary key (e.g. customer ID). In order to obtain the key, we can use Spring&amp;rsquo;s helper class &lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/KeyHolder.html&#34;&gt;&lt;code&gt;KeyHolder&lt;/code&gt;&lt;/a&gt; along with the standard &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html&#34;&gt;&lt;code&gt;PreparedStatement&lt;/code&gt;&lt;/a&gt;. Note that the code was simplified with &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&#34;&gt;Java 8 Lambda notation&lt;/a&gt;.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=create.java&#34;&gt;&lt;/script&gt; &lt;p&gt;Note that, Spring also provides another helper, namely, &lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/simple/SimpleJdbcInsert.html&#34;&gt;&lt;code&gt;SimpleJdbcInsert&lt;/code&gt;&lt;/a&gt; with methods &lt;code&gt;executeAndReturnKey()&lt;/code&gt;. Per the class&amp;rsquo;s documentation, &lt;code&gt;SimpleJdbcInsert&lt;/code&gt; is indeed a higher level wrapper of &lt;code&gt;JdbcTemplate&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;etrieve&lt;/p&gt; &lt;p&gt;In this project, we develop two retrieval methods: &lt;code&gt;findAll()&lt;/code&gt; will return a list of all customers whilst &lt;code&gt;findById()&lt;/code&gt; will look for a certain customer using the input ID.&lt;/p&gt; &lt;p&gt;The method &lt;code&gt;findAll()&lt;/code&gt; is rather a piece of cake but &lt;code&gt;findById()&lt;/code&gt; is quite tricky. Most of the tutorials or guides on Spring &lt;code&gt;JdbcTemplate&lt;/code&gt; I have found on the Internet use the method &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html#queryForObject-java.lang.String-java.lang.Class-&#34;&gt;JdbcTemplate.queryForObject()&lt;/a&gt; to look up for a database row. Trust me, I made the same mistake, too, along the line of this.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=problematic-findCustomerById.java&#34;&gt;&lt;/script&gt; &lt;p&gt;Neater and cleaner, eh!? Unfortunately, the aforementioned &lt;code&gt;findById()&lt;/code&gt; based on the problematic methods &lt;code&gt;JdbcTemplate.queryForXXX()&lt;/code&gt; which is recommended to use in case the query shall return a single row.&lt;/p&gt; &lt;p&gt;This issue has been exposed by the test &lt;code&gt;findById_shouldReturnInvalidCustomer_forEmptyDatabase()&lt;/code&gt; and I was able to come up with a slightly better version that uses &lt;code&gt;JdbcTemplate.query()&lt;/code&gt; and checks for the returning &lt;code&gt;ResultSet&lt;/code&gt;, in case of non-exiting customer yielding correctly &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=retrieval.java&#34;&gt;&lt;/script&gt; &lt;p&gt;Also note that, when working with pure JDBC, we must map the database query result onto the domain entity on our own. This can be quickly done by implementing the interface &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/RowMapper.html&#34;&gt;&lt;code&gt;RowMapper&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=CustomerMapper.java&#34;&gt;&lt;/script&gt; &lt;p&gt;&lt;strong&gt;U&lt;/strong&gt;pdate / &lt;strong&gt;D&lt;/strong&gt;elete&lt;/p&gt; &lt;p&gt;The implementation of updating and deletion is rather straightforward.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=update.java&#34;&gt;&lt;/script&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/3c096c5de35a6c1b2564d8d0459b74fa.js?file=delete.java&#34;&gt;&lt;/script&gt; &lt;p&gt;Finally, we finish implementing all necessary CRUD methods and hopefully pass all the aforementioned tests.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;passed-tests.png&#34; alt=&#34;Passed tests&#34; /&gt;&lt;/p&gt; &lt;p&gt;You can check out the &lt;a href=&#34;https://github.com/htr3n/spring-jdbc-simple&#34;&gt;project source code&lt;/a&gt; available on Github.&lt;/p&gt;</description></item><item><title>Handy macOS QuickLook configurations</title><link>https://htr3n.github.io/2018/07/handy-quicklook/<pubdate>Mon, 30 Jul 2018 00:00:00 +0000</pubdate><guid>c9f9fc4f979cd51a6f05d18bc949cfef</guid><description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Quick_Look&#34;&gt;QuickLook&lt;/a&gt; is a simple but powerful feature of macOS that helps to preview the content of a file or folder in Finder without using any particular apps. This feature is very handy when we only want to have brief glance on a certain file or quickly examine its parts instead of opening a full-fledged app for that particular file.&lt;/p&gt; &lt;p&gt;Even nicer, Apple provides &lt;a href=&#34;https://developer.apple.com/documentation/quicklook&#34;&gt;API&lt;/a&gt; for QuickLook programming and enables the use of &lt;a href=&#34;http://www.quicklookplugins.com/&#34;&gt;plugins&lt;/a&gt; that convert a certain document from its native format into QuickLook previewing format. Before, it was also possible to also &lt;a href=&#34;http://www.mactricksandtips.com/2013/01/22-finder-hacks-tricks-and-changes.html&#34;&gt;select and copy text from QuickLook previewing&lt;/a&gt; but then Apple removed that feature since macOS 10.11 El Capitan.&lt;/p&gt; &lt;p&gt;QuickLook is well supported in Spotlight search. In Finder, it can be conveniently activated by selecting a file or folder and then, for normal previewing, press &lt;kbd&gt;Space&lt;/kbd&gt; or &lt;kbd&gt;‚åò&lt;/kbd&gt;+&lt;kbd&gt;Y&lt;/kbd&gt;. For full-screen previewing, you can press &lt;kbd&gt;‚å•&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; (or using &lt;kbd&gt;‚åò&lt;/kbd&gt;+&lt;kbd&gt;‚å•&lt;/kbd&gt;+&lt;kbd&gt;Y&lt;/kbd&gt; in case you have &lt;kbd&gt;‚å•&lt;/kbd&gt;+&lt;kbd&gt;Space&lt;/kbd&gt; bound to some apps, for instance, &lt;a href=&#34;https://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; in my case).&lt;/p&gt; &lt;p&gt;We might also use the command &lt;code&gt;qlmanage&lt;/code&gt; but it works properly with built-in support and has issues with some external plugins.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# show the preview of file $ qlmanage -p &amp;lt;path_to_file&amp;gt; # or only show the thumpnail $ qlmanage -t &amp;lt;path_to_file&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&#34;quicklook-settings&#34;&gt;QuickLook Settings&lt;/h2&gt; &lt;p&gt;QuickLook looks for and uses the plugins from both system-wide folders &amp;lsquo;&lt;em&gt;/System/Library/QuickLook&lt;/em&gt;&amp;rsquo; and &amp;lsquo;&lt;em&gt;/Library/QuickLook&lt;/em&gt;&amp;rsquo; and also the home folder of each user in &amp;lsquo;&lt;em&gt;~/Library/QuickLook&lt;/em&gt;&amp;rsquo;.&lt;/p&gt; &lt;p&gt;A QuickLook plugin is organised in a folder with an extension &lt;code&gt;.qlgenerator&lt;/code&gt;. The main task of a plugin, as mentioned above, is to generate previewing contents for the corresponding file types. We can see an example of the built-in plugin &lt;code&gt;Image.qlgenerator&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tree /System/Library/QuickLook/Image.qlgenerator /System/Library/QuickLook/Image.qlgenerator ‚îî‚îÄ‚îÄ Contents ‚îú‚îÄ‚îÄ Info.plist ‚îú‚îÄ‚îÄ MacOS ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ Image ‚îú‚îÄ‚îÄ _CodeSignature ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ CodeResources ‚îî‚îÄ‚îÄ version.plist &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The command &lt;code&gt;qlmanage&lt;/code&gt; is provided in macOS since the announcement of QuickLook in 2007. It&amp;rsquo;s very helpful for manipulating QuickLook, for instance, reloading the generators, resetting cache, and many more. We will walk through some handy usage of &lt;code&gt;qlmanage&lt;/code&gt;.&lt;/p&gt; &lt;h5 id=&#34;forcing-reloading-the-list-of-generators&#34;&gt;Forcing reloading the list of generators&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ qlmanage -r qlmanage: resetting quicklookd &lt;/code&gt;&lt;/pre&gt; &lt;h5 id=&#34;showing-the-list-of-generators&#34;&gt;Showing the list of generators&lt;/h5&gt; &lt;p&gt;This command can be used to see the current QuickLook generators list and also check which generator handles what file types. You might then see a long list of generators in your macOS.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ qlmanage -m plugins &lt;/code&gt;&lt;/pre&gt; &lt;h5 id=&#34;resetting-quicklook-caches&#34;&gt;Resetting QuickLook caches&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ qlmanage -r cache &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For more usage of &lt;code&gt;qlmanage&lt;/code&gt;, we can look into its manual.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ man qlmanage &lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&#34;quicklook-plugins&#34;&gt;QuickLook Plugins&lt;/h2&gt; &lt;p&gt;&lt;a href=&#34;https://www.google.com/search?q=quicklook+plugins&#34;&gt;Looking around&lt;/a&gt;, we can easily find a lot of plugins to enhance the built-in support of macOS. Moreover, when we install some applications, there might be included QuickLook plugins too.&lt;/p&gt; &lt;p&gt;Here is a list of plugins that I find very handy and use quite often in my macOS development box.&lt;/p&gt; &lt;h4 id=&#34;qlstephen&#34;&gt;QLStephen&lt;/h4&gt; &lt;p&gt;&lt;a href=&#34;https://whomwah.github.io/qlstephen&#34;&gt;QLStephen&lt;/a&gt; is sort of an awesome Swiss-army-knife that I ever used. It enables the preview of numerous plain text files not handled by the default support of macOS QuickLook, especially files having no extensions such as README, CHANGELOG, Makefile, Rakefile, etc.&lt;/p&gt; &lt;p&gt;If you have already installed &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, it takes only a simple command to install QLStephen (in case you haven&amp;rsquo;t, please feel free to head to &lt;a href=&#34;https://htr3n.github.io/2018/06/bootstrapping-macos-workspace/#homebrew&#34;&gt;another post&lt;/a&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install qlstephen &lt;/code&gt;&lt;/pre&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/handy-quicklook/qlstephen.png&#34; alt=&#34;QLStephen preview&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 1. Using QLStephen to preview a Makefile (which has no extension and is not supported by macOS) &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;h4 id=&#34;qlcolorcode&#34;&gt;QLColorCode&lt;/h4&gt; &lt;p&gt;I often quickly review my code using &lt;a href=&#34;https://github.com/anthonygelibert/QLColorCode&#34;&gt;this amazing plugin&lt;/a&gt; forked/derived from the &lt;a href=&#34;https://github.com/n8gray/QLColorCode&#34;&gt;original one&lt;/a&gt; developed by Nathan Gray (&lt;a href=&#34;https://github.com/n8gray&#34;&gt;n8gray&lt;/a&gt;). The preview code will be nicely formatted and highlighted.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install qlcolorcode &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The default setting of QLColorCode is totall fine. Nonetheless, you might want to customise some of its settings to your tastes too. Here are some of my favourites.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;defaults write org.n8gray.QLColorCode textEncoding UTF-16 defaults write org.n8gray.QLColorCode webkitTextEncoding UTF-16 defaults write org.n8gray.QLColorCode font &amp;quot;Source Code Pro&amp;quot; defaults write org.n8gray.QLColorCode fontSizePoints 10 defaults write org.n8gray.QLColorCode hlTheme zenburn defaults write org.n8gray.QLColorCode extraHLFlags &amp;quot;-W -J 160&amp;quot; defaults write org.n8gray.QLColorCode pathHL /usr/local/bin/highlight &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here is the result of previewing Java code.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/handy-quicklook/qlcolorcode.png&#34; alt=&#34;QLStephen preview&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 2. Code preview with syntax highlighting &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;h4 id=&#34;qlcommonmark&#34;&gt;QLCommonMark&lt;/h4&gt; &lt;p&gt;I have been working with Markdown a lot, especially writing this blog all using Markdown and Hugo generator. It was quite a while I have searched around for a stable QuickLook plugin for Markdown. Before, I used &lt;a href=&#34;https://github.com/ttscoff/MMD-QuickLook&#34;&gt;MDD-QuickLook&lt;/a&gt;, an excellent fork of the well-known &lt;a href=&#34;https://github.com/fletcher&#34;&gt;Fletcher&lt;/a&gt;&amp;rsquo;s original &lt;a href=&#34;https://github.com/fletcher/MMD-QuickLook&#34;&gt;plugin&lt;/a&gt;. MDD-QuickLook allows me to customise the look of the Markdown preview using a Github based CSS file &lt;code&gt;~/.mdqlstyle.css&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When I found &lt;a href=&#34;https://github.com/digitalmoksha/QLCommonMark&#34;&gt;QLCommonMark&lt;/a&gt;, it replaces MDD-QuickLook with a broader coverage including &lt;a href=&#34;http://commonmark.org/&#34;&gt;CommonMark&lt;/a&gt; and Markdown and can be configured in the same way, just different filename &lt;code&gt;~/.cmqlstyle.css&lt;/code&gt;. You can find my Markdown preview style &lt;a href=&#34;https://gist.github.com/htr3n/ffdcb6238f868dd1605af2bbd1e53546&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install qlcommonmark &lt;/code&gt;&lt;/pre&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/handy-quicklook/qlcommonmark.png&#34; alt=&#34;QLCommonMark preview&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 3. Markdown preview with a Github based style &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;h4 id=&#34;quicklook-json&#34;&gt;QuickLook JSON&lt;/h4&gt; &lt;p&gt;Both front-end and back-end developers are somehow familiar with &lt;a href=&#34;https://www.json.org/&#34;&gt;JavaScript Object Notation&lt;/a&gt; (JSON) format. As JavaScript and its ecosystem are rapidly growing, JSON and its variations become extremely popular. Hence, a QuickLook plugin for JSON should be ready in your macOS dev box.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install quicklook-json &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;quicklook-csv&#34;&gt;QuickLook CSV&lt;/h4&gt; &lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Comma-separated_values&#34;&gt;CSV&lt;/a&gt; is a very popular format due to its simplicity and commonly used in statistics and data analytics. It contains values separated by comma, tabs, semi-colons, or pipes. MacOS provides built-in support for CSV previewing but I prefer a nicer-looking preview with &lt;a href=&#34;https://github.com/p2/quicklook-csv&#34;&gt;QuickLook CSV&lt;/a&gt; developed by Pascal Pfiffner (&lt;a href=&#34;https://github.com/p2&#34;&gt;p2&lt;/a&gt;) with alternate row shading.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install quicklook-csv &lt;/code&gt;&lt;/pre&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/handy-quicklook/csv.png&#34; alt=&#34;CSV preview&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 4. A CSV file preview &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;h4 id=&#34;hetimazip&#34;&gt;HetimaZip&lt;/h4&gt; &lt;p&gt;There are many formats and standards around for compressing and archiving files such as &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7z&lt;/a&gt;, &lt;a href=&#34;http://bzip.org&#34;&gt;bzip2&lt;/a&gt;, &lt;a href=&#34;http://www.gzip.org&#34;&gt;gzip&lt;/a&gt;, &lt;a href=&#34;https://www.rarlab.com/rar_file.htm&#34;&gt;rar&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Zip_%28file_format%29&#34;&gt;zip&lt;/a&gt;, to name but a few. &lt;a href=&#34;http://hetima.com/hetimazipql&#34;&gt;HetimaZip&lt;/a&gt; can help to &lt;em&gt;look through&lt;/em&gt; a Zip archive without unzipping or opening it. Note that, this plugin also support well some file types based on Zip format such as &lt;a href=&#34;https://en.wikipedia.org/wiki/JAR_%28file_format%29&#34;&gt;Java ARchive&lt;/a&gt; (&lt;code&gt;.jar&lt;/code&gt;), iOS app (&lt;a href=&#34;https://en.wikipedia.org/wiki/.ipa&#34;&gt;&lt;code&gt;.ipa&lt;/code&gt;&lt;/a&gt;), and many more.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install hetimazipql &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Unfortunately, HetimaZip cannot handle &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_application_package&#34;&gt;Android application package&lt;/a&gt; (&lt;code&gt;.apk&lt;/code&gt;). Thus we can combine with another nice plugin, &lt;a href=&#34;https://github.com/hezi/QuickLookAPK&#34;&gt;QuickLook APK&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install quicklookapk &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is an alternative to HetimaZip, namely, &lt;a href=&#34;https://macitbetter.com&#34;&gt;BetterZip&lt;/a&gt;. I have tried both but could not make BetterZip&amp;rsquo;s work in macOS High Sierra like HetimaZip&amp;rsquo;s to show the content of a normal Zip file.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/handy-quicklook/zip.png&#34; alt=&#34;Zip file preview&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 5. Looking through a Zip file content &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;h4 id=&#34;suspicious-package&#34;&gt;Suspicious Package&lt;/h4&gt; &lt;p&gt;MacOs applications are sometimes distributed as &lt;a href=&#34;https://en.wikipedia.org/wiki/Installer_%28macOS%29&#34;&gt;installer packages&lt;/a&gt; (&lt;code&gt;.pkg&lt;/code&gt;). An installer package may run some scripts and install many files in your systems. A curious and careful user would need to find out what exactly the installation scripts doing and what files are going to be installed.&lt;/p&gt; &lt;p&gt;Advanced macOS users can use &lt;span class=&#34;menu&#34;&gt;Show Package Contents&lt;/span&gt; to get inside the package, but it won&amp;rsquo;t show much details. We can use the app &lt;a href=&#34;https://www.mothersruin.com/software/SuspiciousPackage&#34;&gt;&lt;em&gt;Suspicious Package&lt;/em&gt;&lt;/a&gt; or its included QuickLook plugin to inspect any installer packages before approving for installation.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install suspicious-package &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that it is a tad inconvenient that you &lt;a href=&#34;https://www.mothersruin.com/software/SuspiciousPackage/faq.html#plugin-only&#34;&gt;have to install the app&lt;/a&gt; &lt;em&gt;Suspicious Package&lt;/em&gt; only for its plugin. Copying the plugin alone won&amp;rsquo;t work because it depends on the core libraries for previewing. I&amp;rsquo;m not quite sure whether this is the developers&amp;rsquo; intention or there are actual technical difficulties behind the scene to solely deliver the QuickLook plugin.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/handy-quicklook/package.png&#34; alt=&#34;Installer package preview&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 6. Looking through an installer package &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;h4 id=&#34;qlimagesize&#34;&gt;qlImageSize&lt;/h4&gt; &lt;p&gt;Normally macOS provides sufficient plugins for quick-looking images. &lt;a href=&#34;https://github.com/Nyx0uf/qlImageSize&#34;&gt;qlImageSize&lt;/a&gt; can enhance further by displaying the dimensions and size of the previewed image. These information is only available either when opening the image with an application or selecting the image file and pressing &lt;kbd&gt;‚åò&lt;/kbd&gt;+&lt;kbd&gt;I&lt;/kbd&gt; in Finder. I like &lt;em&gt;qlImageSize&lt;/em&gt; a lot as many times I just want to quickly see an image&amp;rsquo;s dimensions and size this way.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install qlimagesize &lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Faster and enjoyable ZSH (maybe)</title><link>https://htr3n.github.io/2018/07/faster-zsh/<pubdate>Mon, 23 Jul 2018 00:00:00 +0000</pubdate><guid>a2bb2872f4e3d91e93c85cae1c37de86</guid><description>&lt;p&gt;Z shell (Zsh) has been my shell of choice in both Linux and macOS. I used to install &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; or the claimed-to-be-faster &lt;a href=&#34;https://github.com/sorin-ionescu/prezto&#34;&gt;Prezto&lt;/a&gt; or &lt;a href=&#34;https://github.com/zimfw/zimfw&#34;&gt;Zim&lt;/a&gt; to leverage some of their cool libraries.&lt;/p&gt; &lt;p&gt;Unfortunately, I realised that my favourite terminal app, &lt;a href=&#34;https://www.iterm2.com&#34;&gt;iTerm 2&lt;/a&gt;, became more and more sluggish when loading a new tab or window with more than one and a half second (without some virtual environment loaders like &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;nvm&lt;/a&gt;, &lt;a href=&#34;https://rvm.io/&#34;&gt;rvm&lt;/a&gt;, &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt;, &lt;a href=&#34;http://www.jenv.be&#34;&gt;jenv&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;A quick &lt;a href=&#34;https://www.google.com/search?q=faster+zsh&#34;&gt;&lt;em&gt;G-fu&lt;/em&gt;&lt;/a&gt; could yield numerous posts on how to debug, optimise, speed up Zsh. I spent some time to refactore my own lightweight scripts instead of using big frameworks and was able to reach nearly one third of a second. In this post, I will share and discuss some aspects that might affect Zsh loading time and how to mitigate them. Most of the relevant code and configurations can be found &lt;a href=&#34;https://github.com/htr3n/zsh-config&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;br&gt;There are many aspects in Zsh that can potentially slow down its startup time and can be mitigated.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;#organising-shell-startup-order&#34;&gt;Organising shell startup order&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;#avoiding-creating-subprocesses&#34;&gt;Avoiding creating subprocesses&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;#lazy-loading&#34;&gt;Lazy-loading instead of eager-loading&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;#optimising-completion-system&#34;&gt;Optimising completion system&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;#optimising-shell-prompts&#34;&gt;Optimising shell prompts&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;#macos-optimisations&#34;&gt;MacOS-specific optimisations&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;h2 id=&#34;performance-analysis&#34;&gt;Performance Analysis&lt;/h2&gt; &lt;h3 id=&#34;overall-execution-time&#34;&gt;Overall execution time&lt;/h3&gt; &lt;p&gt;Crunching some numbers on Zsh loading time would be definitely useful for further in depth analysis of its performance. A simple timing of Zsh startup time can be measured approximately using the &lt;code&gt;time&lt;/code&gt; command that is available in most Unix/Linux/Mac systems.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ /usr/bin/time /bin/zsh -i -c exit 0.67 real 0.41 user 0.26 sys &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the command shows the execution time of Zsh breaking down to user-land and system. In order to get a better approximation, we can make a loop that invokes &lt;code&gt;time&lt;/code&gt; for 10 or greater, if possible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ for i in $(seq 1 10); do /usr/bin/time /bin/zsh -i -c exit; done; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This timing method is very fast and handy in case you want to quickly see how your Zsh performs, especially to test some changes you have just made.&lt;/p&gt; &lt;h3 id=&#34;profiling&#34;&gt;Profiling&lt;/h3&gt; &lt;p&gt;Zsh provides a built-in module &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fzprof-Module&#34;&gt;&lt;code&gt;zsh/zprof&lt;/code&gt;&lt;/a&gt; that can be used to profile Zsh functions. At the beginning of &lt;code&gt;~/.zshrc&lt;/code&gt;, we add &lt;code&gt;zmodload zsh/zprof&lt;/code&gt;. After restart the shell, we can use the command &lt;code&gt;zprof&lt;/code&gt; to show a very rich output on Zsh startup loading. An illustrative output of &lt;code&gt;zprof&lt;/code&gt; is shown below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ zprof num calls time self name ------------------------------------------------------------------------------ 1) 1 51.31 51.31 22.68% 49.68 49.68 21.96% zle-line-init 2) 2 45.72 22.86 20.21% 45.72 22.86 20.21% compaudit 3) 195 34.71 0.18 15.34% 25.52 0.13 11.28% _zsh_autosuggest_bind_widget ... &lt;/code&gt;&lt;/pre&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Two aforementioned approaches can give us a rough analysis on what aspects are invoked during Zsh startup so that we might figure out the bottleneck. In case you need to dig deeper, Arnout wrote &lt;a href=&#34;http://blog.xebia.com/profiling-zsh-shell-scripts&#34;&gt;a nice article&lt;/a&gt; in which he suggested a in-depth analysis and visualisation of Zsh loading using &lt;code&gt;xtrace&lt;/code&gt; and &lt;code&gt;kcachegrind&lt;/code&gt;. Benjamin developed &lt;a href=&#34;https://esham.io/2018/02/zsh-profiling&#34;&gt;a similar approach&lt;/a&gt; to more thorough tracing and analysis Zsh execution.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&#34;problematic-aspects-and-mitigation&#34;&gt;Problematic Aspects and Mitigation&lt;/h2&gt; &lt;p&gt;Using two simple methods mentioned above, I was able to roughly understand some issues of my Zsh settings and tried to mitigate them to reduce startup time. I could not report the exact steps what have been done as it was a lot of trial-and-errors. Here I will discuss some major aspects combining my actual experiment and G-fu research.&lt;/p&gt; &lt;h3 id=&#34;organising-shell-startup-order&#34;&gt;Organising shell startup order&lt;/h3&gt; &lt;p&gt;The order that Zsh loads its configuration files are documented &lt;a href=&#34;http://zsh.sourceforge.net/Intro/intro_3.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Files.html&#34;&gt;here&lt;/a&gt;. Peter Ward &lt;a href=&#34;https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html&#34;&gt;drew a nice diagram&lt;/a&gt; showing the loading process of Zsh alongside with Bash and Sh (note that he omitted the system-wide configurations in Zsh part).&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/faster-zsh/shell-startup-actual.png&#34; alt=&#34;Shell startup order&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 1. Bash, sh, and zsh shells startup order [&lt;a href=&#34;https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html&#34;&gt;source&lt;/a&gt;] &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;It&amp;rsquo;s also useful to understand relevant shell concepts, such as &lt;em&gt;login&lt;/em&gt; vs. &lt;em&gt;non-login&lt;/em&gt;, &lt;em&gt;interactive&lt;/em&gt; vs. &lt;em&gt;non-interactive&lt;/em&gt; shown in the diagram. Please refer to, for example, &lt;a href=&#34;https://askubuntu.com/a/438170/115425&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://askubuntu.com/a/879400/115425&#34;&gt;here&lt;/a&gt; for further explanations.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;Some shell examples:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;when opening a terminal emulator app (e.g. Terminal or iTerm 2), we are creating an &lt;em&gt;interactive, non-login shell&lt;/em&gt; (please see &lt;code&gt;login -pf&lt;/code&gt; later).&lt;/li&gt; &lt;li&gt;when logging in into a machine using command line &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt; &lt;code&gt;ssh&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Su_%28Unix%29&#34;&gt;&lt;code&gt;su - username&lt;/code&gt;&lt;/a&gt;, we are working with an &lt;em&gt;interactive login&lt;/em&gt; shell.&lt;/li&gt; &lt;li&gt;when executing a shell script, it is on a &lt;em&gt;non-interactive&lt;/em&gt;, &lt;em&gt;non-login&lt;/em&gt; shell.&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;Grokking Zsh startup order will help us putting relevant configurations in right files as well as optimising the loading process. My local Zsh setting is orgranised as follow:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;.zshenv&lt;/code&gt;: invoked by all invocations of Zsh, so we should keep it small and merely initialise necessary variables.&lt;/li&gt; &lt;li&gt;&lt;code&gt;.zlogin&lt;/code&gt;: will be loaded in login shells after &lt;em&gt;.zshrc&lt;/em&gt;. My &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zlogin&#34;&gt;&lt;em&gt;.zlogin&lt;/em&gt;&lt;/a&gt; will compile &lt;code&gt;zcompdump&lt;/code&gt; in background as this is time-consuming and done only once per log-in session.&lt;/li&gt; &lt;li&gt;&lt;code&gt;.zprofile&lt;/code&gt; : similar to &lt;em&gt;.zlogin&lt;/em&gt; but will be sourced before &lt;em&gt;.zshrc&lt;/em&gt;. Note that, both &lt;em&gt;.zprofile&lt;/em&gt; and &lt;em&gt;.zshrc&lt;/em&gt; are skipped in non-login non-interactive shells, as shown in Figure 1. So I learned a trick from &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/tree/master/runcoms&#34;&gt;Prezto&lt;/a&gt; that declares environment variables in &lt;em&gt;.zprofile&lt;/em&gt; and uses &lt;em&gt;.zshenv&lt;/em&gt; to source &lt;em&gt;.zprofile&lt;/em&gt; (e.g. &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zprofile&#34;&gt;&lt;em&gt;.zprofile&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zshenv&#34;&gt;&lt;em&gt;.zshenv&lt;/em&gt;&lt;/a&gt;). This way, non-login non-interactive shells will receive proper variable initialisations.&lt;/li&gt; &lt;li&gt;&lt;code&gt;.zshrc&lt;/code&gt;: will be sourced in interactive shells. This contains the main part of Zsh configuration (e.g. my &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zshrc&#34;&gt;&lt;em&gt;.zshrc&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&#34;avoiding-creating-subprocesses&#34;&gt;Avoiding creating subprocesses&lt;/h3&gt; &lt;p&gt;Some commands look totally innocent and standard in your shell scripts but might cost you dearly. Among them are commands that launch new &lt;a href=&#34;http://tldp.org/LDP/abs/html/othertypesv.html#CHILDREF2&#34;&gt;child processes&lt;/a&gt; such as &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Command-Substitution&#34;&gt;&lt;em&gt;command substitutions&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.unix.com/man-page/posix/1posix/eval&#34;&gt;&lt;em&gt;eval&lt;/em&gt; commands&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Command Substitutions&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In Zsh, a command enclosed in &lt;code&gt;$(command)&lt;/code&gt; or quoted with backticks &lt;code&gt;`command`&lt;/code&gt; will be replaced with its standard output. Thus, it is very popular in Unix/Linux world when one wants to execute a command and get the output to process further on. The bad thing is that &lt;em&gt;command substitution&lt;/em&gt; will launch a new process (i.e. a &lt;a href=&#34;http://tldp.org/LDP/abs/html/subshells.html#SUBSHELLSREF&#34;&gt;subshell&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;eval&lt;/code&gt; command&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eval [arg...] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The command &lt;code&gt;eval&lt;/code&gt; (sounds with &lt;em&gt;evil&lt;/em&gt;, ^_O) is part of POSIX standard and is available in most shells. It&amp;rsquo;s often used together with &lt;em&gt;command substitution&lt;/em&gt;. Essentially, &lt;code&gt;eval&lt;/code&gt; concats its arguments separated with spaces along with evaluating any variables or expressions to form a command with or without arguments. Then it executes the resulting command in the current shell. As such, &lt;code&gt;eval&lt;/code&gt; will cause side-effects as it must evaluate the inputs and perform expansions, if any.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ command=&amp;quot;print &#39;Hello World&#39;&amp;quot; $ command # nothing happen $ eval $command Hello World &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This feature makes &lt;code&gt;eval&lt;/code&gt; powerful as it can dynamically evaluate and execute code. But dynamic evaluation also makes &lt;code&gt;eval&lt;/code&gt; risky and time-consuming.&lt;/p&gt; &lt;p&gt;In some cases, for instance, simple string manipulation, we can consider to replace command substitutions and &lt;code&gt;eval&lt;/code&gt; commands that invoke &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, etc., with Zsh built-in constructs or hard-coded constants. Zsh provides numerous powerful built-in mechanisms for substring matchings, string explosion/splitting, and &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Expansion.html&#34;&gt;expansions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For instance, when using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, it is very convenient to get the path to an installed package using &lt;code&gt;$(brew --prefix &amp;lt;package&amp;gt;)&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=$PATH:&amp;quot;$(brew --prefix httpd)/bin&amp;quot; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It turns out many calls to &lt;code&gt;$(brew --prefix ...)&lt;/code&gt; would launch many subprocesses and thus &lt;a href=&#34;https://kev.inburke.com/kevin/profiling-zsh-startup-time&#34;&gt;slow down Zsh notably&lt;/a&gt;. When replacing that &lt;code&gt;$()&lt;/code&gt; command with its actual output, I could gain certain improvement. The caveat is that some upgraded versions might break these hard-coded values.&lt;/p&gt; &lt;h3 id=&#34;lazy-loading&#34;&gt;&lt;em&gt;Lazy-loading&lt;/em&gt; instead of &lt;em&gt;eager-loading&lt;/em&gt;&lt;/h3&gt; &lt;h4 id=&#34;function-autoloading&#34;&gt;Function autoloading&lt;/h4&gt; &lt;p&gt;We can define and source new functions in Zsh. In this way, a function is &lt;em&gt;eagerly loaded&lt;/em&gt; and always available for use. Note that most of these functions might be not really needed until being invoked.&lt;/p&gt; &lt;p&gt;Zsh can help postponing their loading time and allow to &lt;em&gt;load-on-demand&lt;/em&gt; via &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Functions.html#Autoloading-Functions&#34;&gt;function autoloading&lt;/a&gt;. This technique is often called &lt;em&gt;lazy loading&lt;/em&gt;. Performance-wise, &lt;em&gt;lazy loading&lt;/em&gt; will put less pressure to the underlying system and reduce memory footprint. The same techniques are also preferred in many other fields such as databases, dynamic runtime libraries, etc.&lt;/p&gt; &lt;p&gt;In my codebase, I create a folder, namely, &lt;code&gt;autoloaded&lt;/code&gt;, to store functions that will be, er&amp;hellip;, autoloaded by Zsh. For each function, for instance, &lt;code&gt;function hello(){...}&lt;/code&gt;, I will create a corresponding file named &lt;code&gt;hello&lt;/code&gt; inside &lt;code&gt;autoloaded&lt;/code&gt;. The content of that file is the function body (i.e. without &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;(){}&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir autoloaded $ echo &amp;quot;print &#39;Hello World&#39;&amp;quot; &amp;gt;&amp;gt; autoloaded/hello $ tree . ‚îî‚îÄ‚îÄ autoloaded ‚îî‚îÄ‚îÄ hello &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The folder &lt;code&gt;autoloaded&lt;/code&gt; must be added to ZSH variable &lt;code&gt;fpath&lt;/code&gt; where ZSH will look for function definitions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;# add &#39;autoload&#39; to fpath $ fpath=($fpath autoloaded) # try to invoke &#39;hello&#39; $ hello zsh: command not found: hello # now mark `hello` for autoloading. $ autoload hello # quickly check how `hello` will be loaded. $ which hello hello () { # undefined builtin autoload -X } # now it works fine $ hello Hello World &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The body of &lt;code&gt;hello&lt;/code&gt; was marked with &lt;code&gt;#undefined&lt;/code&gt; along with &lt;code&gt;builtin autoload -X&lt;/code&gt; meaning it will be loaded on-demand. The first time &lt;code&gt;hello&lt;/code&gt; is called, Zsh will automatically load and execute it.&lt;/p&gt; &lt;p&gt;In the same way, I configured Zsh to load all of my functions on-demand to reduce memory and loading time.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;br&gt;In &lt;a href=&#34;https://github.com/htr3n/zsh-config&#34;&gt;my scripts&lt;/a&gt;, &lt;code&gt;autoload -Uz function_name&lt;/code&gt; was used. The option &lt;code&gt;-U&lt;/code&gt; prevents alias from being expanded. That is, whenever you define an alias and a function having the same name, the alias will be considered first instead, so &lt;code&gt;-U&lt;/code&gt; just skips alias expansion. And the option &lt;code&gt;-z&lt;/code&gt; indicates that the function will be auto-loaded using &lt;code&gt;zsh&lt;/code&gt; or &lt;code&gt;ksh&lt;/code&gt; style.&lt;/p&gt; &lt;/blockquote&gt; &lt;h4 id=&#34;loading-virtual-environments&#34;&gt;Selective- or lazy-loading virtual environments&lt;/h4&gt; &lt;p&gt;Many virtual environment loaders like &lt;a href=&#34;https://rvm.io/&#34;&gt;rvm&lt;/a&gt;, &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt;, &lt;a href=&#34;http://www.jenv.be&#34;&gt;jenv&lt;/a&gt;, &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;nvm&lt;/a&gt; have been developed to manage different run-time versions and libraries. While being very handy for software development, most of these tools need to be &lt;em&gt;eagerly loaded&lt;/em&gt; (e.g. directly &lt;code&gt;source&lt;/code&gt; in &lt;code&gt;.zshrc&lt;/code&gt;) to work properly.&lt;/p&gt; &lt;p&gt;Instead, we can consider to transform these loaders as much as possible into &lt;em&gt;on-demand&lt;/em&gt; wrapper functions. You can find a good example &lt;a href=&#34;https://peterlyons.com/problog/2018/01/zsh-lazy-loading&#34;&gt;here&lt;/a&gt;. In summary, Peter&amp;rsquo;s trick is to override &lt;code&gt;nvm&lt;/code&gt; with his own autoloaded &lt;code&gt;nvm()&lt;/code&gt; (that eventually invokes the original &lt;code&gt;nvm&lt;/code&gt; loader). Carlos also went to same way for &lt;code&gt;rbenv&lt;/code&gt;, his own &lt;code&gt;antibody&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt; and achieved &lt;a href=&#34;https://carlosbecker.com/posts/speeding-up-zsh&#34;&gt;some good results&lt;/a&gt;. Benny C. Wong &lt;a href=&#34;http://bennycwong.github.io/post/speeding-up-oh-my-zsh/&#34;&gt;did similarly&lt;/a&gt; for both &lt;code&gt;nvm&lt;/code&gt; and &lt;code&gt;rvm&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can also find &lt;a href=&#34;https://frederic-hemberger.de/articles/speed-up-initial-zsh-startup-with-lazy-loading&#34;&gt;another interesting post&lt;/a&gt; by Frederic about optimising Zsh loading time by converting Kubernetes&amp;rsquo;s initialisation code into a lazy-loading function. When not using lazy-loading, you might find Adam&amp;rsquo;s &lt;a href=&#34;https://coderwall.com/p/j6cjnq/make-your-zsh-startup-faster-oh-my-zsh-and-rbenv-fixes&#34;&gt;trick&lt;/a&gt; useful for reducing &lt;code&gt;rbenv&lt;/code&gt; time.&lt;/p&gt; &lt;h3 id=&#34;optimising-completion-system&#34;&gt;Optimising completion system&lt;/h3&gt; &lt;p&gt;One of the beloved Zsh&amp;rsquo;s features is its new &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html&#34;&gt;&lt;em&gt;completion system&lt;/em&gt;&lt;/a&gt;, so-called &lt;a href=&#34;https://linux.die.net/man/1/zshcompsys&#34;&gt;&lt;em&gt;zshcompsys&lt;/em&gt;&lt;/a&gt;. That is, when you type half of a certain command and press &lt;kbd&gt;Tab&lt;/kbd&gt;, Zsh is able to show some suggestions for completing that command.&lt;/p&gt; &lt;p&gt;Zsh does ship with some built-in support for popular commands but not for all kinds of commands. Instead, Zsh offers powerful means for defining custom completion via &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Autoloaded-files&#34;&gt;underscored-autoloaded files&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Zsh completion system must be activated by calling function &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Use-of-compinit&#34;&gt;&lt;code&gt;compinit&lt;/code&gt;&lt;/a&gt;. Most of the framework like oh-my-zsh or Prezto will take care of initialising completion system. In my case, after getting rid of big frameworks, I have to manually activate it with &lt;code&gt;autoload -Uz compinit &amp;amp;&amp;amp; compinit&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Every time &lt;code&gt;compinit&lt;/code&gt; is invoked, it often checks its configurations and re-generates in case of changes. Some have investigated this matter and suggested improvements such as &lt;a href=&#34;https://gist.github.com/ctechols/ca1035271ad134841284&#34;&gt;checking &lt;em&gt;compinit&lt;/em&gt;&amp;rsquo;s cache only once a day&lt;/a&gt;. A similar approach has also been implemented in &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/blob/e149367445d2bcb9faa6ada365dfd56efec39de8/modules/completion/init.zsh#L34&#34;&gt;Prezto&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here is a simple excerpt based on &lt;a href=&#34;https://carlosbecker.com/posts/speeding-up-zsh&#34;&gt;Carlos&amp;rsquo;s solution&lt;/a&gt;.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/684032f487bb96db527647b74d9c0270.js&#34;&gt;&lt;/script&gt; &lt;h4 id=&#34;lessening-compinit-invocations&#34;&gt;Lessening &lt;code&gt;compinit&lt;/code&gt; invocations&lt;/h4&gt; &lt;p&gt;When running &lt;code&gt;zprof&lt;/code&gt; to profile Zsh execution, as many others also found out, I noticed a lot of invocations to &lt;code&gt;compinit&lt;/code&gt;. It was because I used some smart plugins like &lt;a href=&#34;https://github.com/zsh-users/zsh-completions&#34;&gt;zsh-users/zsh-completions&lt;/a&gt; and &lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions&#34;&gt;zsh-users/zsh-autosuggestions&lt;/a&gt; and scattered &lt;code&gt;compinit&lt;/code&gt; in many places. Using &lt;a href=&#34;https://beyondgrep.com&#34;&gt;&lt;em&gt;ack&lt;/em&gt;&lt;/a&gt;, I could quickly spot and remove all &lt;code&gt;compinit&lt;/code&gt;, then only call once at the end of my &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zshrc&#34;&gt;.zshrc&lt;/a&gt;.&lt;/p&gt; &lt;h4 id=&#34;compiling-completion-dumped-files&#34;&gt;Compiling completion dumped files&lt;/h4&gt; &lt;p&gt;Note that by default &lt;code&gt;compinit&lt;/code&gt; will produce a dumped configuration for accelerating future access. The default dumped file is &lt;code&gt;.zcompdump&lt;/code&gt; (which can be changed with &lt;code&gt;compinit -d new_dump_file&lt;/code&gt; or totally disabled with &lt;code&gt;compinit -D&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;We can go further by compiling the dumped file with the built-in command &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Shell-Builtin-Commands.html#index-compilation&#34;&gt;&lt;code&gt;zcompile&lt;/code&gt; &lt;/a&gt; for faster autoloading of completion functions. As completion is only needed for interactive shell sessions, I put the &lt;code&gt;zcompile&lt;/code&gt; code inside &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zlogin&#34;&gt;.zlogin&lt;/a&gt; and force it to run in background mode.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/5a9b17eab35be60312db6d5afd67f93c.js&#34;&gt;&lt;/script&gt; &lt;h3 id=&#34;optimising-shell-prompts&#34;&gt;Optimising shell prompts&lt;/h3&gt; &lt;p&gt;You can find a lot of frameworks or plugins offer super duper cool command line prompts like &lt;a href=&#34;http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt&#34;&gt;this&lt;/a&gt;, &lt;a href=&#34;https://denysdovhan.com/spaceship-prompt/&#34;&gt;this&lt;/a&gt;, or &lt;a href=&#34;https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config&#34;&gt;these&lt;/a&gt; that show rich information regarding your current working folder such as versioning status, virtual environments, and many more.&lt;/p&gt; &lt;p&gt;Obviously getting these information will induce extra execution time, especially for checking large versioned repositories or virtual runtime libraries. That leads to many &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/pull/1570&#34;&gt;workarounds&lt;/a&gt;, &lt;a href=&#34;http://marc-abramowitz.com/archives/2012/04/10/fix-for-oh-my-zsh-git-svn-prompt-slowness&#34;&gt;tweaks&lt;/a&gt;, &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/pull/1570&#34;&gt;hacks&lt;/a&gt;, &lt;a href=&#34;https://github.com/creationix/nvm/issues/539&#34;&gt;other hacks&lt;/a&gt;, and more &lt;a href=&#34;https://github.com/denysdovhan/spaceship-prompt/issues/161&#34;&gt;hacks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You might want to consider some recent approaches on speeding up shell prompts such as Anish&amp;rsquo;s &lt;a href=&#34;https://www.anishathalye.com/2015/02/07/an-asynchronous-shell-prompt&#34;&gt;non-blocking prompt&lt;/a&gt; or Sindre Sorhus&amp;rsquo;s &lt;a href=&#34;https://github.com/sindresorhus/pure&#34;&gt;&lt;em&gt;pure&lt;/em&gt;&lt;/a&gt; based on Mathias Fredriksson&amp;rsquo;s &lt;a href=&#34;https://github.com/mafredri/zsh-async&#34;&gt;zsh-async&lt;/a&gt;. I have tried &lt;em&gt;pure&lt;/em&gt; and found out its timing is very close to &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/lib/prompts-htr3n.sh&#34;&gt;my own prompts&lt;/a&gt; based on vanilla Zsh scripts and built-in function &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information&#34;&gt;&lt;code&gt;vcs_info&lt;/code&gt;&lt;/a&gt;. Therefore, I mostly switch back and forth between these prompts in my dev box and totally satisfy with their performance thus far.&lt;/p&gt; &lt;h3 id=&#34;macos-optimisations&#34;&gt;MacOS-specific optimisations&lt;/h3&gt; &lt;h4 id=&#34;path-helper&#34;&gt;Optimising &lt;code&gt;path_helper&lt;/code&gt;&lt;/h4&gt; &lt;p&gt;In the chain of Zsh startup order, &lt;code&gt;/etc/zprofile&lt;/code&gt; will be sourced before &lt;code&gt;~/.zprofile&lt;/code&gt;. So, macOS uses &lt;code&gt;/etc/profile&lt;/code&gt; to establish paths to executable files via &lt;a href=&#34;https://opensource.apple.com/source/shell_cmds/shell_cmds-162/path_helper/path_helper.c.auto.html&#34;&gt;&lt;em&gt;path_helper&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat /etc/zprofile # system-wide environment settings for zsh(1) if [ -x /usr/libexec/path_helper ]; then eval `/usr/libexec/path_helper -s` fi &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To do that, &lt;em&gt;path_helper&lt;/em&gt; will read &lt;code&gt;/etc/paths&lt;/code&gt; and &lt;code&gt;/etc/manpaths&lt;/code&gt;, then read all files inside &lt;code&gt;/etc/paths.d&lt;/code&gt; and &lt;code&gt;/etc/manpaths.d&lt;/code&gt; and append their contents to &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;$MANPATH&lt;/code&gt;, respectively. New paths can be conveniently added by adding a plaintext file in &lt;code&gt;/etc/paths.d&lt;/code&gt; instead of messing common shared configuration files.&lt;/p&gt; &lt;p&gt;Previously in some cases, &lt;em&gt;path_helper&lt;/em&gt; might be very slow as mentioned by Michael Tsai &lt;a href=&#34;https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows&#34;&gt;here&lt;/a&gt; and even deserved a &lt;a href=&#34;https://gist.github.com/mkhl/123525&#34;&gt;patch&lt;/a&gt; and a &lt;a href=&#34;https://github.com/mgprot/path_helper&#34;&gt;Perl based alternative&lt;/a&gt;. I reckoned that &lt;em&gt;path_helper&lt;/em&gt; is getting notably slow when the number of paths are growing but its recent version is no longer a script but 64-bit binary executable and seems to work faster.&lt;/p&gt; &lt;p&gt;If you notice that &lt;em&gt;path_helper&lt;/em&gt; makes Zsh slow, you can just put the contents of &lt;code&gt;/etc/paths&lt;/code&gt; and of all files in &lt;code&gt;/etc/paths.d&lt;/code&gt; directly in &lt;code&gt;.zprofile&lt;/code&gt; . After that, just comment out the corresponding code in &lt;code&gt;/etc/profile&lt;/code&gt;.&lt;/p&gt; &lt;blockquote class=&#34;warning&#34;&gt; &lt;strong&gt;Warning&lt;/strong&gt;&lt;br&gt; Tinkering with system configurations like &lt;code&gt;/etc/zprofile&lt;/code&gt; might be risky. And, most of the time, future system updates often reset these changes back to the default values. &lt;/blockquote&gt; &lt;h4 id=&#34;optimising-login-process&#34;&gt;Optimising the login process&lt;/h4&gt; &lt;p&gt;The default &lt;a href=&#34;https://opensource.apple.com/source/system_cmds/system_cmds-541/login.tproj&#34;&gt;&lt;em&gt;login process&lt;/em&gt;&lt;/a&gt; of macOS could be the culprit too. Opening a terminal window or tab will trigger &lt;code&gt;login -pf username&lt;/code&gt; which, in turn, reads from and writes into the logs file in &lt;code&gt;/var/log/asl&lt;/code&gt; (note &lt;code&gt;syslog()&lt;/code&gt; invocations in &lt;a href=&#34;https://opensource.apple.com/source/system_cmds/system_cmds-541/login.tproj/login.c.auto.html&#34;&gt;&lt;code&gt;login.c&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;We can check this out in any terminal app. The command &lt;code&gt;ps -ef | grep login&lt;/code&gt; will show details about the &lt;code&gt;login&lt;/code&gt; process.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ps -ef | grep login ... 0 25142 25141 0 6:40AM ttys000 0:00.13 login -fp htr3n &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you want to dig deeper, execute the following command in a terminal tab/window,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo opensnoop | grep &amp;quot;/var/log/asl&amp;quot; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;then open another tab or window to see a lot of accessing to ASLs (standing for &lt;strong&gt;A&lt;/strong&gt;pple &lt;strong&gt;S&lt;/strong&gt;ystem &lt;strong&gt;L&lt;/strong&gt;og, deprecated since macOS 10.12 but still in use somewhere).&lt;/p&gt; &lt;p&gt;Thus, some have reported a &lt;em&gt;magic&lt;/em&gt; that somehow speeds up shell startup by &lt;a href=&#34;http://osxdaily.com/2010/05/06/speed-up-a-slow-terminal-by-clearing-log-files&#34;&gt;deleting macOS ASLs&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# remove all Apple system logs -- more destructive way $ sudo rm -rf /private/var/log/asl/*.asl &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Nevertheless, these logs will continuously grow day after day. We might configure &lt;code&gt;/etc/asl.conf&lt;/code&gt; to permanently reduce the amount of ASLs. Using &lt;a href=&#34;https://en.wikipedia.org/wiki/sudo&#34;&gt;&lt;code&gt;sudo&lt;/code&gt;&lt;/a&gt; to open that file in Text Editor (or your editor of choice),&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo open -e /etc/asl.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;then looking for the following lines and changing them accordingly and leaving the rest intact.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;... # save everything from emergency to notice # ? [&amp;lt;= Level notice] store ? [&amp;lt;= Level critical] store ... &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The idea is to change the log level from &lt;code&gt;notice&lt;/code&gt; to a higher level such as &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, or &lt;code&gt;critical&lt;/code&gt; (see more on &lt;em&gt;Syslog Message Severities&lt;/em&gt; in &lt;a href=&#34;https://tools.ietf.org/html/rfc5424#page-11&#34;&gt;RFC 5424&lt;/a&gt;. You might also look further in the folder &lt;code&gt;/etc/asl/&lt;/code&gt; to tinker log configurations of certain applications but that is beyond the scope of this article.&lt;/p&gt; &lt;p&gt;Another way is to skip the process of accessing ASLs altogether. For instance, with iTerm 2, press &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt; to open menu &lt;span class=&#34;menu&#34;&gt;Preferences&lt;/span&gt; , then go to &lt;span class=&#34;menu&#34;&gt;Profiles ‚ñ∏ General&lt;/span&gt; .&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/faster-zsh/iterm2-login.png&#34; alt=&#34;iTerm 2 login setting&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 2. iTerm 2 login setting &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;The same way can be applied for Apple&amp;rsquo;s built-in Terminal app.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/faster-zsh/terminal-login.png&#34; alt=&#34;Built-in Terminal login setting&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 3. Built-in Terminal login setting &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We have walked through some major aspects that might affect Zsh in particular, and other shells, loading time. I hope these discussions can help you to pinpoint and address your shell startup issues and have better experience working with shells and command line. This is what I got after all these effort.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;‚ùØ for i in $(seq 1 5); do /usr/bin/time /bin/zsh -i -c exit; done 0.31 real 0.16 user 0.13 sys 0.28 real 0.15 user 0.12 sys 0.28 real 0.15 user 0.12 sys 0.28 real 0.15 user 0.12 sys 0.28 real 0.15 user 0.12 sys &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you have any suggestions for improvement or successful tweaks, please drop a comment below.&lt;/p&gt; &lt;h2 id=&#34;reading-list&#34;&gt;Reading List&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&#34;https://kev.inburke.com/kevin/profiling-zsh-startup-time&#34;&gt;https://kev.inburke.com/kevin/profiling-zsh-startup-time&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://esham.io/2018/02/zsh-profiling&#34;&gt;https://esham.io/2018/02/zsh-profiling&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://carlosbecker.com/posts/speeding-up-zsh&#34;&gt;https://carlosbecker.com/posts/speeding-up-zsh&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/issues/5327&#34;&gt;https://github.com/robbyrussell/oh-my-zsh/issues/5327&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://coderwall.com/p/sladaq/faster-zsh-in-large-git-repository&#34;&gt;https://coderwall.com/p/sladaq/faster-zsh-in-large-git-repository&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://ahmadnazir.github.io/posts/2016-11-03-load-shell-faster/post.html&#34;&gt;https://ahmadnazir.github.io/posts/2016-11-03-load-shell-faster/post.html&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://superuser.com/a/47856/82870&#34;&gt;https://superuser.com/a/47856/82870&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;https://github.com/robbyrussell/oh-my-zsh&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/sorin-ionescu/prezto&#34;&gt;https://github.com/sorin-ionescu/prezto&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;</description></item><item><title>A mininal Hugo blogging workflow</title><link>https://htr3n.github.io/2018/07/minimal-hugo-workflow/<pubdate>Sat, 14 Jul 2018 00:00:00 +0000</pubdate><guid>c4f731c008858c6a79162e10947484f2</guid><description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; is a blazingly fast static site generator based on &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;. My &lt;a href=&#34;https://htr3n.github.io/2018/01/first-experience-with-hugo/&#34;&gt;first experience with Hugo&lt;/a&gt; was truly pleasant. I appreciate the separation of contents, presentations, and site generation logics in Hugo that leads to less effort for maintenance or switching themes.&lt;/p&gt; &lt;p&gt;On the run-time side, it&amp;rsquo;s also nice that Hugo is often delivered as a reasonably fat executable binary (about 30~50 MB). We almost do not have to install anything else to make it work (although this is not entirely true since Hugo 0.43+).&lt;/p&gt; &lt;p&gt;Using Hugo to &lt;a href=&#34;https://github.com/htr3n/htr3n-blog&#34;&gt;build&lt;/a&gt; this blog, I have learned a lot of things and tried to set up a simple blogging workflow to automate as much as possible the process from writing articles and altering themes to generating sites and watching for changes. My Hugo based blogging workflow comprises three aspects:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;Content&lt;/em&gt; (mainly Markdown)&lt;/li&gt; &lt;li&gt;&lt;em&gt;Presentation&lt;/em&gt; (theming)&lt;/li&gt; &lt;li&gt;&lt;em&gt;Site generation&lt;/em&gt; (Hugo)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I will take &lt;a href=&#34;https://github.com/htr3n/htr3n-blog&#34;&gt;my own Hugo blogging project&lt;/a&gt; as an illustrative example. An overview of the project structure is shown in the picture below.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/minimal-hugo-workflow/project-structure.png&#34; alt=&#34;A simple Hugo project structure&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 1. A simple Hugo project structure &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;&lt;strong&gt;Some relevant project resources:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt;: my pre-processing resources (e.g. SASS, LESS, images, JavaScript).&lt;/li&gt; &lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Markdown contents&lt;/li&gt; &lt;li&gt;&lt;code&gt;public&lt;/code&gt;: the Web sites generated by Hugo&lt;/li&gt; &lt;li&gt;&lt;code&gt;static&lt;/code&gt;: resources (e.g. CSS, images, JavaScript) to be copied directly to &lt;code&gt;public&lt;/code&gt; by Hugo.&lt;/li&gt; &lt;li&gt;&lt;code&gt;themes&lt;/code&gt;: Hugo themes (here I use my own theme &lt;a href=&#34;https://github.com/htr3n/hyde-hyde&#34;&gt;&lt;em&gt;hyde-hyde&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;: Node.js / NPM main configuration&lt;/li&gt; &lt;li&gt;&lt;code&gt;gulpfile.js&lt;/code&gt;: Gulp configuration&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&#34;content&#34;&gt;Content&lt;/h2&gt; &lt;p&gt;Among many nice features, Hugo supports Markdown contents out-of-the-box. Thus I can keep writing blog posts with my favourite Markdown editors. I have tried a number of editors in macOS, ranging from simple plain text with preview add-ons like &lt;a href=&#34;https://www.sublimetext.com&#34;&gt;Sublime Text&lt;/a&gt;, &lt;a href=&#34;https://macromates.com&#34;&gt;TextMate&lt;/a&gt;, &lt;a href=&#34;https://atom.io&#34;&gt;Atom&lt;/a&gt;, &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&#34;https://www.vim.org&#34;&gt;Vim&lt;/a&gt; to some built-in ones like &lt;a href=&#34;http://www.bear-writer.com&#34;&gt;Bear&lt;/a&gt;, &lt;a href=&#34;https://bywordapp.com&#34;&gt;Byword&lt;/a&gt;, &lt;a href=&#34;http://macdown.uranusjr.com&#34;&gt;MacDown&lt;/a&gt;, &lt;a href=&#34;http://mouapp.com&#34;&gt;Mou&lt;/a&gt;, &lt;a href=&#34;http://www.texts.io&#34;&gt;Texts&lt;/a&gt;, &lt;a href=&#34;https://ia.net/writer&#34;&gt;IA Writer&lt;/a&gt;, &lt;a href=&#34;http://marked2app.com&#34;&gt;Marked&lt;/a&gt; (only preview), &lt;a href=&#34;https://typora.io&#34;&gt;Typora&lt;/a&gt;, to name but by no means completed. You can see &lt;a href=&#34;https://github.com/mundimark/awesome-markdown-editors&#34;&gt;here&lt;/a&gt; a list including most of Markdown editors available and &lt;a href=&#34;https://www.sitepoint.com/the-best-markdown-editors-for-mac&#34;&gt;here&lt;/a&gt; are some for macOS.&lt;/p&gt; &lt;p&gt;My first editor was Mou, due to its simplicity and highly customisable themes and rendering styles. Later on Mou&amp;rsquo;s developer decided to sell its ownership, then resumed working on its beta making the software status a bit unclear and frustrated. &lt;a href=&#34;https://uranusjr.com&#34;&gt;Tzu-ping Chung&lt;/a&gt; (@&lt;a href=&#34;https://github.com/uranusjr&#34;&gt;uranusjr&lt;/a&gt;) has created a similar editor, namely, &lt;a href=&#34;http://macdown.uranusjr.com&#34;&gt;MacDown&lt;/a&gt;, and &lt;a href=&#34;https://github.com/MacDownApp/macdown&#34;&gt;open-sourced it&lt;/a&gt;. Then I started using MacDown with the existing Mou&amp;rsquo;s themes and styles.&lt;/p&gt; &lt;p&gt;I could not remember exactly when and how I found &lt;a href=&#34;https://typora.io&#34;&gt;Typora&lt;/a&gt; but it never ceases to amaze me. With Typora, I can enjoy seamless editing and rendering in the same window, i.e., I can write Markdown normally and directly see the content rendered. Typora is still free in its beta phase and will become paid software when released. It has become my Markdown editor of choice and will be in future should its price tag is reasonable. For quick fixes, I use any editors at hand, for instance Visual Studio Code when working on a Hugo project.&lt;/p&gt; &lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt; &lt;p&gt;The nice thing is that a Hugo theme is a standalone component for decorating Hugo generated sites. Nevertheless, I can override a theme&amp;rsquo;s settings (e.g. layouts, styles) with my own versions with respect to &lt;a href=&#34;https://gohugo.io/templates/lookup-order&#34;&gt;Hugo lookup order&lt;/a&gt;. A theme contains resources for templating, layouting, and styling. Hugo&amp;rsquo;s templating and layouting have been discussed a lot around. Styling resources in a typical Hugo project can be found inside its theme&amp;rsquo;s &lt;code&gt;static&lt;/code&gt; or the project root&amp;rsquo;s &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;I used to work with CSS styles. After learning more about CSS preprocessors and attracted by the abstraction levels and tooling they provide, I decide to give a try and refactored my existing codebase to SCSS. Hence, my workflow should include support for SCSS (you might opt for LESS or Stylus but still can leverage a similar workflow with just right processing components).&lt;/p&gt; &lt;h2 id=&#34;site-generation&#34;&gt;Site Generation&lt;/h2&gt; &lt;p&gt;Hugo will be main element that generates the final Web site taking input resources from content and presentation components. Until version 0.43, Hugo has not provided support for SASS. Hence, many have to develop their own &lt;a href=&#34;https://blog.carlmjohnson.net/post/2017/hugo-asset-pipeline&#34;&gt;&amp;lsquo;&lt;em&gt;asset pipeline&lt;/em&gt;&amp;lsquo;&lt;/a&gt;, i.e., incorporating preprocessors and post-processors with Hugo generation process.&lt;/p&gt; &lt;h3 id=&#34;endogenous-pipeline&#34;&gt;Endogenous Pipeline&lt;/h3&gt; &lt;p&gt;This approach, also called &lt;em&gt;in-line pipeline&lt;/em&gt;, only works since Hugo &lt;a href=&#34;https://gohugo.io/news/0.43-relnotes&#34;&gt;v0.43/extended&lt;/a&gt; and later that supports processing SASS/CSS with consideration for &lt;a href=&#34;https://en.wikipedia.org/wiki/Minification_%28programming%29&#34;&gt;minification&lt;/a&gt;, post-processing, and &lt;a href=&#34;https://www.keycdn.com/support/what-is-cache-busting&#34;&gt;cache busting&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In Hugo templates, I can refer to SCSS files via &lt;a href=&#34;https://gohugo.io/content-management/page-resources&#34;&gt;&lt;em&gt;page resources&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ $styles := resources.Get &amp;quot;scss/hyde-hyde.scss&amp;quot; | toCSS | postCSS (dict &amp;quot;use&amp;quot; &amp;quot;autoprefixer&amp;quot;) | minify | fingerprint }} &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ $styles.Permalink }}&amp;quot; integrity=&amp;quot;{{ $styles.Data.Integrity }}&amp;quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that Hugo will look for &lt;code&gt;scss/hyde-hyde.scss&lt;/code&gt; in the project&amp;rsquo;s root and then the theme&amp;rsquo;s root, in that order.&lt;/p&gt; &lt;p&gt;Hugo retrieves the resource &lt;code&gt;hyde-hyde.scss&lt;/code&gt; using &lt;code&gt;Resources.Get&lt;/code&gt;, then &lt;a href=&#34;https://gohugo.io/hugo-pipes/scss-sass&#34;&gt;transforms it&lt;/a&gt; into &lt;code&gt;hyde-hyde.css&lt;/code&gt; and passes it to &lt;a href=&#34;https://gohugo.io/hugo-pipes/postcss&#34;&gt;PostCSS&lt;/a&gt; for &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34;&gt;autoprefixing&lt;/a&gt;. After that, it &lt;a href=&#34;https://gohugo.io/hugo-pipes/minification/&#34;&gt;minifies&lt;/a&gt; the CSS and generates a &lt;em&gt;fingerprinted version&lt;/em&gt;. The second line simply links the resulting &lt;code&gt;hyde-hyde.css&lt;/code&gt; with HTML via the variable &lt;code&gt;$style&lt;/code&gt;. The result in the generated HTML will be like this (note that the code can be different to yours).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://localhost:1313/scss/hyde-hyde.4ff234ab46aa5302c7e0d2f35b9c76a8bba9fe42a9e8a6c7c47df7f85b8de122.css&amp;quot; integrity=&amp;quot;sha256-T/I0q0aqUwLH4NLzW5x2qLup/kKp6KbHxH33&amp;amp;#43;FuN4SI=&amp;quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The fingerprint code is for &lt;em&gt;cache busting&lt;/em&gt; and only changed when the source file is altered.&lt;/p&gt; &lt;p&gt;The biggest advantage of &lt;em&gt;in-line pipeline&lt;/em&gt; is that Hugo already provides a certain level of built-in support. Hugo&amp;rsquo;s &lt;em&gt;live reload&lt;/em&gt;, i.e. serving the resulting sites live and automatically refreshing whenever there are changes of contents or themes, also works superbly for this case.&lt;/p&gt; &lt;p&gt;For many scenarios, we can use this approach instead of configuring complex tools like Gulp, Grunt, or Webpack. To be precise, I do need to install extra tools, which are &lt;code&gt;postcss-cli&lt;/code&gt; and &lt;code&gt;autoprefixer&lt;/code&gt;, for the aforementioned example to work and Hugo 0.43 extended version &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/issues/29898&#34;&gt;partially depends on Cgo/libc++&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -g postcss-cli autoprefixer &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Another downside to consider is that, in this way, external tools like &lt;code&gt;postcss&lt;/code&gt; will slow down Hugo.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;As I checked out &lt;a href=&#34;https://discourse.gohugo.io/t/how-to-use-source-maps-with-hugo-0-43/12826&#34;&gt;this thread&lt;/a&gt; and &lt;a href=&#34;https://discourse.gohugo.io/t/how-to-use-source-maps-with-hugo-0-43/12826/9&#34;&gt;tried on my project&lt;/a&gt;, Hugo&amp;rsquo;s extensions like &lt;code&gt;postCSS&lt;/code&gt;, &lt;code&gt;minify&lt;/code&gt;, and &lt;code&gt;fingerprint&lt;/code&gt; could mess up CSS sourcemaps. If you need sourcemaps for developing and debugging, please ignore them and consider the &lt;em&gt;exogenous pipeline&lt;/em&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&#34;exogenous-pipeline&#34;&gt;Exogenous Pipeline&lt;/h3&gt; &lt;p&gt;When working on more complex asset pipelining, we have to involve external tools to build an &lt;em&gt;exogenous asset pipeline&lt;/em&gt;. This is also my blogging workflow before Hugo v0.43. Now, I can mostly get rid of this &lt;em&gt;exogenous pipeline&lt;/em&gt;. Here we will walk through this approach merely for the sake of completeness.&lt;/p&gt; &lt;p&gt;There are several ways to handle Web resources. For instance, Netlify provides a boilerplate project, namely, &lt;a href=&#34;https://github.com/netlify/victor-hugo&#34;&gt;&lt;em&gt;victor-hugo&lt;/em&gt;&lt;/a&gt; for starting a new Hugo project and preparing to deploy to its hosting. This boilerplate employs &lt;a href=&#34;https://gulpjs.com&#34;&gt;Gulp&lt;/a&gt;, &lt;a href=&#34;https://webpack.js.org&#34;&gt;Webpack&lt;/a&gt;, &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;PostCSS&lt;/a&gt;, and &lt;a href=&#34;https://browsersync.io&#34;&gt;Browsersync&lt;/a&gt; around Hugo. There are many developers rooting for Gulp &lt;a href=&#34;(#references)&#34;&gt;[1, 2, 3, 4, 5]&lt;/a&gt; whilst some others go for Grunt &lt;a href=&#34;(#references)&#34;&gt;[6]&lt;/a&gt; or Webpack &lt;a href=&#34;#references&#34;&gt;[7, 8]&lt;/a&gt;. And even few brave ones use &lt;a href=&#34;http://thecodestead.com/post/how-to-use-npm-as-a-build-tool-with-hugo&#34;&gt;pure NPM&lt;/a&gt; &lt;a href=&#34;#references&#34;&gt;[9, 10]&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For starter projects with Hugo, you might want to consider some useful projects such as &lt;a href=&#34;https://github.com/jbrodriguez/hugulp&#34;&gt;hugulp&lt;/a&gt;, &lt;a href=&#34;http://ktmud.github.io/huggle/en/intro&#34;&gt;Huggle&lt;/a&gt;, &lt;a href=&#34;https://github.com/vseventer/hugo-webpack-boilerplate&#34;&gt;hugo-webpack-boilerplate&lt;/a&gt;. In my project, I combine Gulp with NPM and leverage some Gulp&amp;rsquo;s components for the asset pipeline.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;SASS/SCSS to CSS&lt;/em&gt;: a sensible choice is &lt;a href=&#34;https://www.npmjs.com/package/gulp-sass&#34;&gt;&lt;em&gt;gulp-sass&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;em&gt;Sourcemaps&lt;/em&gt; (optional): this is not mandatory but very handy for developing and debugging phase. I pick &lt;a href=&#34;https://www.npmjs.com/package/gulp-sourcemaps&#34;&gt;&lt;em&gt;gulp-sourcemaps&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;em&gt;Autoprefixing&lt;/em&gt;: it helps adding vendor-specific prefixes to CSS rules. We can use &lt;a href=&#34;https://www.npmjs.com/package/gulp-autoprefixer&#34;&gt;&lt;em&gt;gulp-autoprefixer&lt;/em&gt;&lt;/a&gt; but be careful to combine with &lt;em&gt;gulp-sourcemaps&lt;/em&gt; as it is &lt;a href=&#34;https://github.com/gulp-sourcemaps/gulp-sourcemaps/wiki/Plugins-with-gulp-sourcemaps-support#css&#34;&gt;currently broken&lt;/a&gt;. I decide to use¬†&lt;a href=&#34;https://www.npmjs.org/package/gulp-postcss&#34;&gt;&lt;em&gt;gulp-postcss&lt;/em&gt;&lt;/a&gt; along with &lt;a href=&#34;https://www.npmjs.com/package/autoprefixer&#34;&gt;&lt;em&gt;postcss-autoprefixer&lt;/em&gt;&lt;/a&gt; instead.&lt;/li&gt; &lt;li&gt;&lt;em&gt;Minification&lt;/em&gt;: &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;PostCSS&lt;/a&gt; provides many plugins for CSS post-processing alongside &lt;em&gt;autoprefixer&lt;/em&gt;. I choose &lt;a href=&#34;http://cssnano.co&#34;&gt;&lt;em&gt;cssnano&lt;/em&gt;&lt;/a&gt; to minify the CSSs.&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -D gulp@next gulp-sass gulp-postcss autoprefixer gulp-sourcemaps cssnano &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the same way, you can add more components to the list. Here I rather keep it short and simple for illustrative purpose. Now I start configuring Gulp to use them in my project.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/eb8dde0659b066367d438879d6650e54.js&#34;&gt;&lt;/script&gt; &lt;p&gt;Note that the syntax is Gulp v4.0.&lt;/p&gt; &lt;p&gt;Now I just simply invoke Gulp to trigger its chaining pipeline.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gulp [10:23:40] Using gulpfile ~/working/dev/htr3n-blog/gulpfile.js [10:23:40] Starting &#39;default&#39;... [10:23:40] Starting &#39;watch&#39;... [10:23:40] Starting &#39;scss&#39;... [10:23:40] Finished &#39;scss&#39; after 58 ms [10:23:40] Starting &#39;&amp;lt;anonymous&amp;gt;&#39;... &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Gulp will transform &lt;code&gt;hyde-hyde.scss&lt;/code&gt; into &lt;code&gt;hyde-hyde.css&lt;/code&gt; which is autoprefixed and saved in &lt;code&gt;static/css&lt;/code&gt; along with its sourcemaps. In the Hugo templates, I refer to &lt;code&gt;hyde-hyde.css&lt;/code&gt; normally.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ .Site.BaseURL }}/css/hyde-hyde.css&amp;quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;I can combine &lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglobs-opts-fn&#34;&gt;Gulp.watch()&lt;/a&gt; with Hugo&amp;rsquo;s &lt;em&gt;live reload&lt;/em&gt; feature so that both will continuously monitors for changes and serve them instantly. This way, whenever I made any changes in a post in Typora, a SCSS/CSS file, or Go+HTML layout, I will instantly see the generated HTMLs.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo server -w --cleanDestinationDir | EN +------------------+-----+ Pages | 320 Paginator pages | 0 Non-page files | 14 Static files | 14 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 193 ms Watching for changes in /Users/htr3n/working/dev/htr3n-blog/{assets,content,data,layouts,static,themes} Watching for config changes in /Users/htr3n/working/dev/htr3n-blog/config.toml Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Please note that, by default, Hugo will only keep watching the following folders &lt;code&gt;{assets, content, data, layouts, static, themes}&lt;/code&gt;. Hence, our SCSS files might not be in one of these folders but we must ensure the resources generated from Gulp are. As I illustrated &lt;em&gt;endogenous pipeline&lt;/em&gt; above, my SCSSs are kept in &lt;code&gt;assets&lt;/code&gt; such that Hugo &lt;code&gt;Resources.Get&lt;/code&gt; can find them. If you opt for &lt;em&gt;exogenous pipeline&lt;/em&gt;, you should put the preprocessing resources elsewhere.&lt;/p&gt; &lt;p&gt;After all, we can open the browser to &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; and enjoy the experience of live editing side-by-side.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/07/minimal-hugo-workflow/side-by-side.png&#34; alt=&#34;Typora (left) and the generated HTML pages (right)&#34; width=&#34;99%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 2. Typora (left) and the generated HTML pages (right) &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;At this point, we seem to miss &lt;em&gt;cache busting&lt;/em&gt; which is provided in the &lt;em&gt;endogenous pipeline&lt;/em&gt; with Hugo. That is also the biggest advantage of using external tools as we need to establish the connections between Hugo generated resources and Gulp&amp;rsquo;s manipulated resources on our own.&lt;/p&gt; &lt;p&gt;It is a tad complicated as you can find &lt;a href=&#34;https://byteplumbing.net/2017/08/static-asset-cache-busting-for-hugo&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://blog.carlmjohnson.net/post/2017/hugo-asset-pipeline/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://danbahrami.io/articles/building-a-production-website-with-hugo-and-gulp-js&#34;&gt;here&lt;/a&gt;. In summary, the idea is to generate &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_function&#34;&gt;&lt;em&gt;hash signatures&lt;/em&gt;&lt;/a&gt; for your CSSs, for instance, using &lt;a href=&#34;https://en.wikipedia.org/wiki/MD5&#34;&gt;MD5&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Hash_Algorithms&#34;&gt;SHA&lt;/a&gt;, store the relevant data as dictionary &lt;a href=&#34;https://en.wikipedia.org/wiki/Key-value_database&#34;&gt;key-value&lt;/a&gt; pairs, e.g. &lt;code&gt;&#39;hyde-hyde.css&#39; =&amp;gt; &#39;hyde-hyde.the-latest-hash-number.css&#39;&lt;/code&gt;, then use Hugo‚Äôs¬†&lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;data templates&lt;/a&gt;¬†feature to refer to those pairs. This approach has actually been implemented in the aforementioned Hugo&amp;rsquo;s extensions.&lt;/p&gt; &lt;p&gt;In case you really need &lt;em&gt;cache busting&lt;/em&gt;, we can utilise Hugo v0.43 extensions to complement Gulp on this matter (üêµ). We just modify the Gulp configuration a bit so that the output folder is no longer &lt;code&gt;static&lt;/code&gt; but &lt;code&gt;assets/css&lt;/code&gt; as Hugo&amp;rsquo;s &lt;code&gt;Resources.Get&lt;/code&gt; rather strictly looks for resources in &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var outputFolder = &#39;assets/css&#39;; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And in the HTML, we use similar templates without &lt;code&gt;toCSS&lt;/code&gt; and &lt;code&gt;postCSS&lt;/code&gt; that are done with Gulp.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ $styles := resources.Get &amp;quot;css/hyde-hyde.css&amp;quot; | minify | fingerprint }} &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;{{ $styles.Permalink }}&amp;quot; integrity=&amp;quot;{{ $styles.Data.Integrity }}&amp;quot;&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It seems Gulp becomes redundant here as Hugo can perform &lt;code&gt;toCSS&lt;/code&gt;, &lt;code&gt;postCSS&lt;/code&gt;, and &lt;code&gt;minify&lt;/code&gt; just fine. Nonetheless, in case you need other functionalities that are not yet provided by Hugo, Gulp will be what you should ask for. Besides, as per &lt;strong&gt;Note&lt;/strong&gt; above, there are still some issues with Hugo&amp;rsquo;s extension regarding sourcemaps whilst Gulp&amp;rsquo;s asset pipeline above works flawlessly.&lt;/p&gt; &lt;h4 id=&#34;more-automation-please&#34;&gt;More automation, please!!!&lt;/h4&gt; &lt;p&gt;There are still two manual tasks for the &lt;em&gt;exogenous pipeline&lt;/em&gt;, one for invoking Gulp and another one to start Hugo. Aiming to automate the workflow as much as possible, we can merge two tasks using one execution script, via NPM.&lt;/p&gt; &lt;p&gt;There are a number of options for running tasks concurrently in NPM including &lt;a href=&#34;https://www.npmjs.com/package/npm-run-all&#34;&gt;npm-run-all&lt;/a&gt;, &lt;a href=&#34;https://www.npmjs.com/package/npm-run-parallel&#34;&gt;npm-run-parallel&lt;/a&gt;, &lt;a href=&#34;https://www.npmjs.com/package/concurrently&#34;&gt;concurrently&lt;/a&gt;, or using &lt;a href=&#34;https://en.wikipedia.org/wiki/Background_process&#34;&gt;background process&lt;/a&gt; if you are using Linux/macOS alike. Even Gulp also has some helper plugins like &lt;a href=&#34;https://www.npmjs.com/package/gulp-exec&#34;&gt;gulp-exec&lt;/a&gt; to execute child processes, &lt;a href=&#34;https://www.npmjs.com/package/gulp-nodemon&#34;&gt;gulp-nodemon&lt;/a&gt; to run in &lt;a href=&#34;https://en.wikipedia.org/wiki/Daemon_%28computing%29&#34;&gt;daemon mode&lt;/a&gt;, and Gulp 4.0+ has &lt;a href=&#34;https://github.com/gulpjs/gulp/blob/4.0/docs/API.md#gulpparalleltasks&#34;&gt;Gulp.parallel()&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Let&amp;rsquo;s consider a simple example with &lt;a href=&#34;https://www.npmjs.com/package/npm-run-all&#34;&gt;npm-run-all&lt;/a&gt;. Other tools can be used similarly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -D npm-run-all &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then define some simple scripts in &lt;code&gt;package.json&lt;/code&gt; for executing Gulp and Hugo.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/cbfb959546392ef5e948c86c0c05af9d.js&#34;&gt;&lt;/script&gt; &lt;p&gt;Given no issues, we should execute &lt;code&gt;npm run dev&lt;/code&gt; and see both Hugo and Gulp running in parallel.&lt;/p&gt; &lt;h2 id=&#34;further-optimisations&#34;&gt;Further Optimisations&lt;/h2&gt; &lt;p&gt;As you might have noticed, the Web resources (e.g. HTML, CSS) generated by Hugo may contain a lot of whitespace and/or line-breaks. You can easily see this when viewing the source code of the generated Web pages.&lt;/p&gt; &lt;p&gt;During the developing phase in my local machines, I always keep the generated resources untouched so that I can read the code for debugging or analysing. When deploying to hosting servers, we don&amp;rsquo;t often preserve the readability of the source code as the end-users mainly see and interact with the beautiful pages rendered by Web browsers.&lt;/p&gt; &lt;p&gt;Therefore, I configure a simple Gulp task to optimise the generated Web resources before pushing them to the servers. What I need is &lt;a href=&#34;https://www.npmjs.com/package/gulp-htmlmin&#34;&gt;&lt;code&gt;gulp-htmlmin&lt;/code&gt;&lt;/a&gt;&amp;mdash;a Gulp front-end of &lt;a href=&#34;https://github.com/kangax/html-minifier&#34;&gt;&lt;em&gt;html-minifier&lt;/em&gt;&lt;/a&gt;. Please refer to &lt;em&gt;html-minifier&lt;/em&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/kangax/html-minifier&#34;&gt;documentations&lt;/a&gt; should you need to learn further about its options.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm i -D gulp-htmlmin &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And I create a simple Gulp task for minifying Web resources that can be invoked at command line as &lt;code&gt;gulp minify-html&lt;/code&gt;. This task should be performed after calling Hugo to generate the Web pages.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/d91b6937e88050c4e7e820d82be2c2e1.js&#34;&gt;&lt;/script&gt; &lt;p&gt;The main idea is to use &lt;code&gt;gulp-htmlmin&lt;/code&gt; to minify HTMLs, JavaScripts, and CSSs whilst leaving others intact. Note that the place of the optimised resources is the folder &lt;code&gt;dist&lt;/code&gt; inside Hugo project.&lt;/p&gt; &lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&#34;https://markus.oberlehner.net/blog/using-gulp-and-uncss-in-combination-with-sass-based-hugo-themes&#34;&gt;https://markus.oberlehner.net/blog/using-gulp-and-uncss-in-combination-with-sass-based-hugo-themes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;http://danbahrami.io/articles/building-a-production-website-with-hugo-and-gulp-js&#34;&gt;http://danbahrami.io/articles/building-a-production-website-with-hugo-and-gulp-js&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://devotter.com/blog/using-gulp-with-hugo&#34;&gt;https://devotter.com/blog/using-gulp-with-hugo&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://adamwills.io/blog/discovering-hugo-2-workflow&#34;&gt;https://adamwills.io/blog/discovering-hugo-2-workflow&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;http://www.sagarganatra.com/2016/12/building-your-static-site-with-hugo.html&#34;&gt;http://www.sagarganatra.com/2016/12/building-your-static-site-with-hugo.html&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;http://tjm.io/grunt-hugo&#34;&gt;http://tjm.io/grunt-hugo&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://byteplumbing.net/2017/08/static-asset-cache-busting-for-hugo&#34;&gt;https://byteplumbing.net/2017/08/static-asset-cache-busting-for-hugo&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://tomodwyer.com/post/2017-10-22-hugo---webpack--%EF%B8%8F/&#34;&gt;https://tomodwyer.com/post/2017-10-22-hugo---webpack--%EF%B8%8F/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;http://thecodestead.com/post/how-to-use-npm-as-a-build-tool-with-hugo&#34;&gt;http://thecodestead.com/post/how-to-use-npm-as-a-build-tool-with-hugo&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog&#34;&gt;https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;</description></item><item><title>Bootstrapping macOS workspace</title><link>https://htr3n.github.io/2018/06/bootstrapping-macos-workspace/<pubdate>Wed, 27 Jun 2018 00:00:00 +0000</pubdate><guid>e0c710eec7384716b4f93ccfd253c715</guid><description>&lt;p&gt;I have experienced a number of different Mac systems, ranging from the old white MacBook 2006 to iMac and MacMini 2010 and lately MacBook Pro 13&amp;rdquo; and 15&amp;rdquo;. From time to time, Time Machine has become extremely handy for transferring my data from the old to the new machine.&lt;/p&gt; &lt;p&gt;Nevertheless, a lot of changes, mostly for software development, have often been ignored or reset to the default values. As a result, I often find myself searching around over and over for some desirable settings. Thus, this post is kind of a note-to-self on few useful tweaks for my development box so that I can easily reach out later.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: As it turned out that the tweaks and configurations were getting longer and became tedious to follow, I split them into two parts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;#system-tweak-and-configs&#34;&gt;Part 1: System tweaks and configurations&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;#dev-tools-and-configs&#34;&gt;Part 2: Development tools and configurations&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h2 id=&#34;system-tweak-and-configs&#34;&gt;Part 1: System tweaks and configurations&lt;/h2&gt; &lt;h3 id=&#34;disable-sip&#34;&gt;Disable System Integrity Protection (SIP)&lt;/h3&gt; &lt;p&gt;&lt;a href=&#34;https://support.apple.com/en-us/ht204899&#34;&gt;System Integration Protection&lt;/a&gt; (SIP) is a security technology since OS X El Capitan 10.11 aiming at protecting certain system files and folders against malicious software. SIP even limits the access and actions of the root user account on protected parts of OS X. Unfortunately, the folder &lt;code&gt;/usr/local&lt;/code&gt; needed for installing many development tools and utilities is under protection as well. That makes a lot of tools like &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; fail to install. We can easily check SIP&amp;rsquo;s current status.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ csrutil status System Integrity Protection status: enabled. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The tweak I always do right after installing or recovering a Mac is to disable SIP. Just (re)start macOS in &lt;em&gt;Recovery Mode&lt;/em&gt; (restarting or turning on your Mac and immediately pressing &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt;&amp;mdash;shortcut to remember &lt;kbd&gt;R&lt;/kbd&gt; for &amp;lsquo;&lt;strong&gt;R&lt;/strong&gt;ecovery&amp;rsquo;&amp;mdash;and wait until macOS boots into its recovery mode. Then open menu &lt;span class=&#34;menu&#34;&gt;Utility ‚ñ∏ Terminal&lt;/span&gt; and execute the following commands.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ csrutil disable $ reboot &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Your Mac will reboot and get back to the normal working mode. You can verify SIP status again.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ csrutil status System Integrity Protection status: disabled. &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;disable-gatekeeper&#34;&gt;Disable Gatekeeper&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Gatekeeper&lt;/em&gt; was first introduced in OS X Mountain Lion. It is a security feature that prevents the users from launching potentially harmful apps.&lt;/p&gt; &lt;p&gt;From macOS Sierra and later, however, Apple made Gatekeeper even more restricted. Normal users would see only two choices in &lt;em&gt;System Preferences&lt;/em&gt; &amp;ndash;&amp;gt; &lt;em&gt;Security &amp;amp; Privacy&lt;/em&gt; that &amp;ldquo;&lt;em&gt;Allow apps downloaded from&lt;/em&gt;&amp;rdquo; either &amp;ldquo;&lt;em&gt;App Store&lt;/em&gt;&amp;rdquo; or &amp;ldquo;&lt;em&gt;App Store and identified developers&lt;/em&gt;&amp;rdquo;.&lt;/p&gt; &lt;p&gt;That means only signed apps are allowed to launch, i.e. breaking a lot of useful unsigned apps whose developers cannot afford to pay US$99 yearly membership for &lt;em&gt;Apple Developer Program&lt;/em&gt;.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/06/bootstrapping-macos-workspace/enabled-gatekeeper.png&#34; alt=&#34;Enabled Gatekeeper&#34; align=&#34;center&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 1. Enabled Gatekeeper &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;We can circumvent that by disabling Gatekeeper. You do not have to restart macOS but only executing the following command &lt;code&gt;sudo spctl --master-disable&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After that, you will be able to see Gatekeeper being disabled.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/06/bootstrapping-macos-workspace/disabled-gatekeeper.png&#34; alt=&#34;Disabled Gatekeeper&#34; align=&#34;center&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 2. Disabled Gatekeeper &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;Naturally Gatekeeper can be re-enabled at any time with &lt;code&gt;sudo spctl --master-enable&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&#34;reveal-library&#34;&gt;Revealing &amp;lsquo;~/Library&amp;rsquo;&lt;/h3&gt; &lt;p&gt;In macOS, the folder &amp;lsquo;&lt;em&gt;~/Library&lt;/em&gt;&amp;rsquo; within users home folder is hidden (since 10.7!?) seemingly to prevent any unintentional changes. It&amp;rsquo;s not so difficult to navigate to this folder (and any other folders) using command line. In case you want to use Finder to navigate and explore &amp;lsquo;&lt;em&gt;~/Library&lt;/em&gt;&amp;rsquo;, we can simply use the following command.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ chflags nohidden ~/Library &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;enabling-key-repeating&#34;&gt;Enabling Key Repeating&lt;/h3&gt; &lt;p&gt;The behaviour for keyboard long pressing in macOS is also of polarised personal taste. A typical behaviour that we often see is that the letter keeps popping out since one holds down a key until the key is released. Some years back this has been changed into &amp;lsquo;&lt;em&gt;Character Picker&lt;/em&gt;&amp;rsquo;. It means when a key is pressed and held, the non-standard characters corresponding characters will pop up as the picture below.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/06/bootstrapping-macos-workspace/enabled-character-picker.png&#34; alt=&#34;Character Picker in action&#34; align=&#34;center&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 3. Character Picker in action &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;Not a big fan of Character Picker, I rather like characters keep repeating when a key is held. In many cases, this behavior becomes very handy, for instance, when selecting large texts with &lt;kbd&gt;‚áß&lt;/kbd&gt; + &lt;kbd&gt;‚Üì ‚Üë ‚Üê ‚Üí&lt;/kbd&gt;.&lt;/p&gt; &lt;p&gt;For that reason, I always disable that feature in any macOS that I am working on. Unfortunately, this cannot be done with &lt;span class=&#34;menu&#34;&gt;System Preferences&lt;/span&gt; but command line. After each command, you must re-start the editors to see the effect.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# disable &#39;Character Picker&#39; $ defaults write -g ApplePressAndHoldEnabled -bool false # it can be enabled $ defaults write -g ApplePressAndHoldEnabled -bool true &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Another option relating to key repeating is tuning its speed/rate and delay. Luckily, we can do this via &lt;span class=&#34;menu&#34;&gt;System Preferences ‚ñ∏ Keyboard&lt;/span&gt; . My favourite is &amp;lsquo;&lt;em&gt;fastest&lt;/em&gt;&amp;rsquo; repeating and &amp;lsquo;&lt;em&gt;shortest&lt;/em&gt;&amp;rsquo; delay as possible.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/06/bootstrapping-macos-workspace/speed-delay.png&#34; alt=&#34;Setting for key repeating and delay&#34; align=&#34;center&#34; width=&#34;80%&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 4. Setting for key repeating and delay &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;Like many other options, we can change it via command line or fine tuning tool such as &lt;a href=&#34;https://pqrs.org/osx/karabiner&#34;&gt;Karabiner&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# InitialKeyRepeat: 120, 94, 68, 35, 25, 15 (lower is faster, default is 25) $ defaults write -g InitialKeyRepeat -int 15 # KeyRepeat: 120, 90, 60, 30, 12, 6, 2 (lower is faster, default is 6) $ defaults write -g KeyRepeat -int 2 &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;changing-hostnames&#34;&gt;Changing Hostnames&lt;/h3&gt; &lt;p&gt;Most of the time, the default host name is not satisfied and you might want to have a cool name for your dev box. Then you are surely not alone. Here and there, you might find some cool combo like &lt;code&gt;harry@hogwart&lt;/code&gt; , &lt;code&gt;alice@wonderland&lt;/code&gt;, &lt;code&gt;yoda@dagobah&lt;/code&gt;, &lt;code&gt;joker@gotham&lt;/code&gt;, &lt;code&gt;neo@matrix&lt;/code&gt;, &lt;code&gt;frodo@mordor&lt;/code&gt; you name it. You can quickly do this via command line.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# change the primary host name $ sudo scutil --set HostName gotham # ... do the same for local (Bonjour) host name $ sudo scutil --set LocalHostName gotham # and finally, keep the user-friendly computer&#39;s name in Finder in sync $ sudo scutil --set ComputerName gotham &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;h2 id=&#34;dev-tools-and-configs&#34;&gt;Part 2: Development tools and configurations&lt;/h2&gt; &lt;p&gt;In this part, I will focus more on some handy tools and configurations often used for my software development tasks.&lt;/p&gt; &lt;h3 id=&#34;homebrew&#34;&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Homebrew provides a rich collection of tools I need, mostly open sources, that Apple does not. Installing Homebrew is super easy with a one-liner command. Before that, we only have to install the Xcode command line tools that Homebrew needs to build its tools.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install Xcode command line developer tools $ xcode-select --install # now install Homebrew $ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then we need to add &lt;code&gt;/usr/local/bin&lt;/code&gt; and &lt;code&gt;/usr/local/sbin&lt;/code&gt; (where Homebrew links the executable files) to the environment variable &lt;code&gt;PATH&lt;/code&gt;. This can be done by altering the shell startup scripts. For instance, for Bash shell it is &lt;code&gt;~/.bash_profile&lt;/code&gt;, for Zshell it is &lt;code&gt;~/.zsh_profile&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export PATH=$PATH:/usr/local/bin:/usr/local/sbin &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want the Homebrew tools have higher priority than the others, just switch &lt;code&gt;$PATH&lt;/code&gt; to the end instead. Moreover, there are many Finder-launched apps, agents and daemons in macOS might also need &lt;code&gt;PATH&lt;/code&gt; to find necessary executables (e.g. Intellij IDEA and Eclipse if I&amp;rsquo;m not mistaken). Fortunately, the launching of these tools would go through macOS &lt;a href=&#34;https://en.wikipedia.org/wiki/Launchd&#34;&gt;&lt;em&gt;launchd&lt;/em&gt;&lt;/a&gt; and therefore, can be configure with &lt;code&gt;launchctl&lt;/code&gt;. So I have to add this line to the end of my &lt;code&gt;.zshrc&lt;/code&gt; too.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# this line should be added at the end of .zshrc /bin/launchctl setenv PATH $PATH &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now I can install necessary tools using &lt;code&gt;brew&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install ack curl dnsmasq docker gcc git go gradle maven mysql node openssl openssh python3 php72 composer ruby rbenv sassc yarn zsh &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Homebrew can also help handling macOS start-up services which are useful for managing servers like Apache httpd, nginx, php-fpm, MySQL, PostgreSQL, etc.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew services start httpd $ brew services stop httpd &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For quick re-installing or recovering Homebrew, I use &lt;a href=&#34;https://github.com/Homebrew/homebrew-bundle&#34;&gt;homebrew-bundle&lt;/a&gt; for backing up the current Homebrew&amp;rsquo;s installation and restoring later.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# tap the bundle $ brew tap Homebrew/bundle # dump all existing Homebrew packages to Brewfile $ brew bundle dump --force # check the list of entries $ brew bundle list # restore/install all packages from the Brewfile $ brew bundle &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Homebrew also incorporates &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask&#34;&gt;Homebrew-Cask&lt;/a&gt; (formerly an independent plugin for Homebrew) that can help to install many macOS apps as you might see in the later sections.&lt;/p&gt; &lt;h3 id=&#34;terminals-and-shells&#34;&gt;Terminals and Shells&lt;/h3&gt; &lt;p&gt;Since working with Linux a lot and then macOS, I&amp;rsquo;m rather familiar with the command line. There are many cases using terminals would be more convenient than graphical editors. Thus, I need a good terminal app. The built-in Terminal app in macOS is not bad but I usually opt for &lt;a href=&#34;https://www.iterm2.com&#34;&gt;iTerm2&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install iterm2 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Some of my favorite settings for iTerms are including dark themes such as &lt;a href=&#34;https://draculatheme.com/iterm&#34;&gt;Dracula&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/meqif/1238378&#34;&gt;IR_Black&lt;/a&gt;, &lt;a href=&#34;https://github.com/junegunn/seoul256-iTerm2&#34;&gt;seoul_256&lt;/a&gt;, &lt;a href=&#34;https://github.com/nathanbuchar/atom-one-dark-terminal&#34;&gt;Atom One Dark&lt;/a&gt; along with a fixed-width font like &lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Cousine&#34;&gt;Cousine&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Roboto+Mono&#34;&gt;Roboto Mono&lt;/a&gt;, &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; or &lt;a href=&#34;https://www.typography.com/fonts/operator/overview/&#34;&gt;Operator Mono&lt;/a&gt; (very nice ligatures and italic mode), &lt;a href=&#34;https://fonts.google.com/specimen/Inconsolata&#34;&gt;Inconsolata&lt;/a&gt; or its variants (Inconsolata-dz, Inconsolata-g), or &lt;a href=&#34;https://github.com/source-foundry/Hack&#34;&gt;Hack&lt;/a&gt;. Some of these fonts can be installed via Homebrew Cask.&lt;/p&gt; &lt;p&gt;Along with iTerms 2, I also love &lt;a href=&#34;http://www.zsh.org&#34;&gt;Z shell&lt;/a&gt; (zsh) which is an extended version of Bash shell a lot with many nice features like directory alias, command completion, path expansion, etc. You might also find some Zsh configuration frameworks like &lt;a href=&#34;https://ohmyz.sh&#34;&gt;oh-my-zsh&lt;/a&gt; or &lt;a href=&#34;https://github.com/sorin-ionescu/prezto&#34;&gt;Prezto&lt;/a&gt; amazing to start with. I&amp;rsquo;ve tried both of them and found oh-my-zsh a bit sluggish and Prezto a bit difficult to add more extensions or customize. I have actually used a small piece from either of them and found myself quickly forgetting the customised parts taken from the others. Hence, I decided to develop a set of my own &lt;a href=&#34;https://github.com/htr3n/zsh-config&#34;&gt;Zsh configurations&lt;/a&gt;. Moreover, I often keep a habit of writting Shell scripts in standard sh/bash as much as possible and keep Zsh-specific separately for better portability and compatibility.&lt;/p&gt; &lt;h3 id=&#34;text-code-editors&#34;&gt;Text/Code Editors&lt;/h3&gt; &lt;p&gt;There are quite a number of editors in macOS for developers ranging from, er, the built-in Text Editor, &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;, &lt;a href=&#34;https://macromates.com&#34;&gt;TextMate&lt;/a&gt;, &lt;a href=&#34;https://www.barebones.com/products/textwrangler&#34;&gt;TextWrangler&lt;/a&gt;, the nerdy &lt;a href=&#34;https://www.vim.org&#34;&gt;Vim&lt;/a&gt;, &lt;a href=&#34;https://www.gnu.org/software/emacs&#34;&gt;Emacs&lt;/a&gt;, and recently &lt;a href=&#34;https://atom.io&#34;&gt;Atom&lt;/a&gt;, &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&#34;http://brackets.io&#34;&gt;Brackets&lt;/a&gt;, to name but a few. You might install these editos using Cask.&lt;/p&gt; &lt;p&gt;In macOS, Sublime Text is often a powerful editor for many of us but it is quite costly. I used to love and work with Atom developed by Github as an effort to build a modern editor for developers. Atom has a plethora of extensions to become a very promising choice. Nevertheless, I was growing skeptical with its sluggishness in early days and therefore leaned to &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;, my current Swiss-army-knife editor-of-choice instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install visual-studio-code &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Frequently using terminal/console, I just grasp vim for quick editing tasks and &lt;a href=&#34;https://github.com/htr3n/vim-config&#34;&gt;customised it&lt;/a&gt; a little bit.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install vim &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As working with larger and complex projects, I would need some full-fledged, heavy-weight IDEs such as Eclipse or Jetbrains Intellij IDEA and its brothers like PhpStorm, PyCharm. Other IDE including Netbeans, Visual Studio, Komodo can also be installed with &lt;em&gt;Cask&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install eclipse-java intellij-idea &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For Markdown editors, e.g. Github infamous &lt;em&gt;README.md&lt;/em&gt; or my blog posts, I used &lt;a href=&#34;http://macdown.uranusjr.com&#34;&gt;MacDown&lt;/a&gt;. After discovering &lt;a href=&#34;https://typora.io&#34;&gt;Typora&lt;/a&gt;, MacDown becomes second in the pecking order for now (at least until Typora&amp;rsquo;s developers announce their paid plans).&lt;/p&gt; &lt;p&gt;With Typora, I can directly write Markdown articles just like Microsoft Word. I can do &lt;kbd&gt;‚åò&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt; to instantly switch back and forth between &lt;em&gt;Visual Editing&lt;/em&gt; and &lt;em&gt;Source&lt;/em&gt; modes. Even better, I can adapt the Markdown render in Typora to be nearly indentical to my blog and therefore, experience a kind of semi-&lt;em&gt;WYSIWYG&lt;/em&gt; Markdown editing.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install typora &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;other-tools&#34;&gt;Other nice-to-have tools&lt;/h3&gt; &lt;h4 id=&#34;gnu-tools&#34;&gt;GNU Tools&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install coreutils autoconf automake findutils gawk gcc gnu-sed grep &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;ack-https-beyondgrep-com&#34;&gt;&lt;a href=&#34;https://beyondgrep.com&#34;&gt;Ack&lt;/a&gt;&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Ack is faster and easier to use than grep&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install ack &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;dropbox-https-www-dropbox-com&#34;&gt;&lt;a href=&#34;https://www.dropbox.com&#34;&gt;Dropbox&lt;/a&gt;&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Many of our customers and friends are sharing files using Dropbox, so are we ;). Note that Dropbox app must be installed in &lt;code&gt;/Applications&lt;/code&gt; to work properly.&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install --appdir=&amp;quot;/Applications&amp;quot; dropbox &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;docker-ce-https-www-docker-com-community-edition-and-command-line&#34;&gt;&lt;a href=&#34;https://www.docker.com/community-edition&#34;&gt;Docker CE&lt;/a&gt; and command line&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Every serious developer is talking about and working with it ;)&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install docker $ brew install docker &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;spectacle-https-www-spectacleapp-com&#34;&gt;&lt;a href=&#34;https://www.spectacleapp.com&#34;&gt;Spectacle&lt;/a&gt;&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;This is an amazing free app for resizing windows using shortcuts. I use it a lot to quickly arrange the working windows.&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install spectacle &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;alfred-https-www-alfredapp-com-powerpack&#34;&gt;&lt;a href=&#34;https://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; + Powerpack ($)&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Alfred is a must-have for me and, maybe, many other macOS users. The free version is useful enough but the paid (for Powerpack) can blow anyone away. Alfred helps me much more when I prefer to use the keyboard as much as possible instead of reaching for the mice.&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install alfred &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;f-lux-https-justgetflux-com&#34;&gt;&lt;a href=&#34;https://justgetflux.com&#34;&gt;F.lux&lt;/a&gt;&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Saving my eyes staring daily at computer&amp;rsquo;s monitors (macOS also has Night Shift mode but my eyes still find F.lux more pleasant at night)&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install flux &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;web-browsers&#34;&gt;Web Browsers&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Installing Firefox and Google Chrome mainly for Web development, testing and debugging as I find Safari is, not perfect though, sufficient for daily use and conveniently sharing bookmarks and history links between macOS and my iPad and iPhone.&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install google-chrome firefox &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;remote-access&#34;&gt;Remote Access&lt;/h4&gt; &lt;p&gt;Nothing is more convenient than &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol&#34;&gt;SFTP&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# I prefer OpenSSH to the stock BSD SSH $ brew install openssh # ... love to quickly copy my public key to the servers $ brew install ssh-copy-id # generate key pair $ ssh-keygen -t rsa -b 4096 -C &amp;quot;MacBookPro email@example.com&amp;quot; # copy the public key to the host for passwordless authentication $ ssh-copy-id user@host &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;networking-tools&#34;&gt;Networking Tools&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install netcat curl wget nmap &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;communication&#34;&gt;Communication&lt;/h4&gt; &lt;p&gt;&lt;a href=&#34;https://www.skype.com&#34;&gt;Skype&lt;/a&gt;, &lt;a href=&#34;https://www.slack.com&#34;&gt;Slack&lt;/a&gt;, &lt;a href=&#34;https://keybase.io&#34;&gt;Keybase&lt;/a&gt; (open source end-to-end encryption)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install skype slack keybase &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;1password-https-1password-com&#34;&gt;&lt;a href=&#34;https://1password.com&#34;&gt;1Password&lt;/a&gt; ($)&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Help storing all of my private information and authentication in iCloud or Dropbox and using them in macOS or iOS.&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew cask install 1password &lt;/code&gt;&lt;/pre&gt;</description></item><item><title>A journey from Apache CXF 2.2 to 3.2</title><link>https://htr3n.github.io/2018/06/apache-cxf-2-to-3/<pubdate>Fri, 15 Jun 2018 00:00:00 +0000</pubdate><guid>b44b2473bc3b383e22a3652266a8df0b</guid><description>&lt;p&gt;I have used &lt;a href=&#34;https://cxf.apache.org&#34;&gt;Apache CXF&lt;/a&gt; 2.2 to develop Web services for some R&amp;amp;D projects that I took part in. At that time, it was a choice between &lt;a href=&#34;http://axis.apache.org/axis2/java/core&#34;&gt;Apache Axis/Axis2&lt;/a&gt; and CXF (formerly Codehaus XFire project).&lt;/p&gt; &lt;p&gt;I eventually decided to get along with CXF due to its simplicity, quite clear documentation, good support for document-style Web services (+) and many standards, especially JAX-WS and JAX-RS.&lt;/p&gt; &lt;p&gt;Moreover, Apache CXF also embraces smooth integration with Spring Framework (big plus for me as I was using Spring Web MVC 3 to develop the Web front-end). Everything went well for me on modelling and developing Web services based on JAX-WS for both directions: WSDL-first and Java-first.&lt;/p&gt; &lt;p&gt;In my projects, I designed the WSDLs and used &lt;a href=&#34;http://cxf.apache.org/docs/wsdl-to-java.html&#34;&gt;WSDL2Java&lt;/a&gt; Maven plugin or command line to generate skeleton Java code of the Web services. The Java service implementations were kept separately in a package/folder to avoid any code overwriting. CXF services are so easy to configure with Spring Framework 3.0. The implementations of the services were loaded as Spring managed beans. The expose of a service is done via a CXF directive &lt;code&gt;&amp;lt;jaxws:endpoint&amp;gt;&lt;/code&gt; of which the &lt;code&gt;implementor&lt;/code&gt; attribute refers to the corresponding bean.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/a5d1c1d66c00c3be32a2de63dcb9af0f.js&#34;&gt;&lt;/script&gt; &lt;p&gt;In the Web app configuration &lt;code&gt;web.xml&lt;/code&gt;, CXF Servlet must be loaded by the container.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/d97b770538e8279f2fb1742c4c49b3ce.js&#34;&gt;&lt;/script&gt; &lt;h2 id=&#34;upgrading-apache-cxf&#34;&gt;Upgrading Apache CXF&lt;/h2&gt; &lt;p&gt;For a while I haven&amp;rsquo;t taken part in further WS development, i.e. not using Apache CXF a lot. One day I thought I could use the WS project to showcase and review my relevant knowledge. The codebase still works well after some mysterious library missing that I have not seen before. It is possible due to the built-in libraries for XML parsing that were implicitly used but now changed in the newer JRE. Apart from that, most of the libraries are also outdated. So I dedice to spend some time to exercise upgrading the project and refactor a bit its source code. Here I jot down some major points on upgrading Apache CXF.&lt;/p&gt; &lt;p&gt;The upgrading was not as easy and smooth as just changing the dependencies&amp;rsquo; versions. A lot of conflicts or major refactoring happened. I had to read thoroughly the &lt;a href=&#34;http://cxf.apache.org/docs/migration-guides.html&#34;&gt;documentation on CXF site for migration&lt;/a&gt; and decided to go gradually over each major version of Apache CXF.&lt;/p&gt; &lt;h2 id=&#34;from-version-2-2-to-2-7&#34;&gt;&amp;hellip; from version 2.2 to 2.7 &amp;hellip;&lt;/h2&gt; &lt;p&gt;From Apache CXF 2.2 to 2.6, not so many changes are relevant for the project as I mainly used &lt;code&gt;cxf-rt-frontend-jaxws&lt;/code&gt;. Another &lt;a href=&#34;http://cxf.apache.org/docs/embedding-cxf-inside-spring.html&#34;&gt;significant change since 2.4&lt;/a&gt; causes errors for Spring / Jetty server regarding importing CXF&amp;rsquo;s XML resources. Recall the aforementioned Spring bean configuration where CXF service implementations were loaded and published? There are a number of &lt;code&gt;&amp;lt;import&amp;gt;&lt;/code&gt; directives. These directives advise Spring to load the corresponding CXF resources. Now we only need &amp;ldquo;&lt;em&gt;one to rule them all&lt;/em&gt;&amp;rdquo;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;import resource=&amp;quot;classpath:META-INF/cxf/cxf.xml&amp;quot; /&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To upgrade to version 2.6, I have to revise the project with respect to the merging of &lt;code&gt;cxf-common-utilites&lt;/code&gt; into &lt;code&gt;cxf-api&lt;/code&gt;, the removal of &lt;code&gt;cxf-rt-binding-http&lt;/code&gt;, and the refactoring that impact &lt;code&gt;cxf-rt-core&lt;/code&gt;. Most of the other changes from 2.2 to 2.7 are for JAX-RS, which were used very little or none in my project.&lt;/p&gt; &lt;h2 id=&#34;and-to-version-3-0&#34;&gt;&amp;hellip; and to version 3.0+&lt;/h2&gt; &lt;p&gt;Apache CXF 3.0 requires a rather disruptive change, from Spring Framework 3.0 to 3.2+. Again, I used standard Spring bean configurations which are still valid for Spring 3.2. Hence, the project works well with Spring 3.2.18-RELEASE. I only need to remove all version numbers in the Spring XML schemas. The major change I must deal with is to remove the dependency of &lt;code&gt;cxf-api&lt;/code&gt; as it was merged with &lt;code&gt;cxf-core&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Then there comes the most dramatic issue with CXF 3.0.16 (sic!). &lt;code&gt;cxf-codegen-plugin&lt;/code&gt; used to generate Java code from WSDLs refused to work (which was no problem in earlier verions) and spit out errors like this.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[ERROR] Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.0.16:wsdl2java (generate-sources) on project loan-approval-portal: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.0.16:wsdl2java failed: org.apache.cxf.wsdl11.WSDLRuntimeException: Fail to create wsdl definition file:%3c?xml%20version=%221.0%22%20encoding=%22UTF-8%22?%3e: WSDLException: faultCode=PARSER_ERROR: Problem parsing &#39;file:%3c?xml%20version=%221.0%22%20encoding=%22UTF-8%22?%3e&#39;.: java.io.FileNotFoundException: &amp;lt; (No such file or directory) -&amp;gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.0.16:wsdl2java (generate-sources) on project loan-approval-portal: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.0.16:wsdl2java failed: org.apache.cxf.wsdl11.WSDLRuntimeException: Fail to create wsdl definition file:%3c?xml%20version=%221.0%22%20encoding=%22UTF-8%22?%3e: WSDLException: faultCode=PARSER_ERROR: Problem parsing &#39;file:%3c?xml%20version=%221.0%22%20encoding=%22UTF-8%22?%3e&#39;.: java.io.FileNotFoundException: &amp;lt; (No such file or directory) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;What puzzles me is that I have tried the command tool &lt;code&gt;wsdl2java&lt;/code&gt; of Apache CXF 3.0.16 with each WSDL and, strangely, found no errors at all. After some extra trial-and-error effort, I eventually figured out that an extra option for &lt;code&gt;cxf-codegen-plugin&lt;/code&gt; causes the error. The old/original plugin configuration in &lt;code&gt;pom.xml&lt;/code&gt; is as following.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/b0634545a64e3b94dacee3982456ec4f.js&#34;&gt;&lt;/script&gt; &lt;p&gt;The option &lt;code&gt;&amp;lt;wsdlList&amp;gt;&lt;/code&gt; is the culprit. It was declared &lt;code&gt;boolean&lt;/code&gt; since CXF 2.2 to 2.7.0 as I found &lt;a href=&#34;https://cxf.apache.org/javadoc/latest-2.7.x/org/apache/cxf/maven_plugin/wsdl2java/Option.html&#34;&gt;here&lt;/a&gt;. However, in &lt;a href=&#34;http://cxf.apache.org/docs/wsdl-to-java.html&#34;&gt;the most recent documentation&lt;/a&gt; of CXF 3, &lt;code&gt;wsdlList&lt;/code&gt; is still listed as an option for &lt;code&gt;wsdl2java&lt;/code&gt; but no longer of type &lt;code&gt;boolean&lt;/code&gt; (&lt;code&gt;-wsdlList &amp;lt;wsdlurl&amp;gt;&lt;/code&gt;). To make it worse, the option is totally hidden/undocumented. So all I have to do is to disable the line &lt;code&gt;&amp;lt;wsdlList&amp;gt;true&amp;lt;/wsdlList&amp;gt;&lt;/code&gt; and &lt;code&gt;cxf-codegen-plugin&lt;/code&gt; works again in CXF 3.0+.&lt;/p&gt; &lt;p&gt;The problems with &lt;code&gt;cxf-codegen-plugin&lt;/code&gt; keep raising when upgrading CXF to 3.2.4. This time, it threw another exception though.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[ERROR] Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java (generate-sources) on project loan-approval-portal: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java failed: org.xml.sax.SAXNotRecognizedException: Property &#39;http://javax.xml.XMLConstants/property/accessExternalSchema&#39; is not recognized. -&amp;gt; [Help 1] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java (generate-sources) on project loan-approval-portal: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java failed: org.xml.sax.SAXNotRecognizedException: Property &#39;http://javax.xml.XMLConstants/property/accessExternalSchema&#39; is not recognized. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We can see that the error is due to schema validation. Before, I wanted to make sure that the WSDLs were valid before generating Java code. Thus, I chose to enable validation by &lt;code&gt;&amp;lt;validateWsdl&amp;gt;true&amp;lt;/validateWsdl&amp;gt;&lt;/code&gt;. This option is actually the root cause of the aforementioned exception during validation. The problem seems to stem from &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/jaxp/properties/properties.html&#34;&gt;new XML security properties in JAXB 1.5&lt;/a&gt; introduced in Java 8. When I disable that option, the plugin works fine again (voila!). But that means I must live in a maybe-not-error-free world (D&amp;rsquo;oh!). But we are all, aren&amp;rsquo;t we?&lt;/p&gt; &lt;p&gt;After all of the above, I can get my project to work with Apache CXF 3.2.4 while keeping the business logic of services intact.&lt;/p&gt; &lt;h2 id=&#34;update-2018-06-25-xml-less-spring-configuration&#34;&gt;Update 2018-06-25: XML-less Spring Configuration&lt;/h2&gt; &lt;p&gt;As deciding to switch to XML-less Spring configuration to learn more about Spring Java annotations, I also tried to migrate CXF settings, too. Here are some last updates.&lt;/p&gt; &lt;h3 id=&#34;loading-cxfservlet&#34;&gt;Loading CXFServlet&lt;/h3&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/b2f57f33ea4940b3756ae74c8f0693aa.js&#34;&gt;&lt;/script&gt; &lt;h3 id=&#34;publishing-services&#34;&gt;Publishing Services&lt;/h3&gt; &lt;p&gt;I configured the CXF bus used for publishing web services and defining JAX-WS service endpoints. Instead of importing existing CXF&amp;rsquo;s XML resources as many developers have chosen, I opted for a pure Java approach. What we have to do is to create a bean named &amp;lsquo;&lt;em&gt;cxf&lt;/em&gt;&amp;rsquo; (defined as &lt;code&gt;org.apache.cxf.Bus.DEFAULT_BUS_ID&lt;/code&gt;) and use that bean for defining service endpoints.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/41add915f3238a517c5185d6a965ba65.js&#34;&gt;&lt;/script&gt; &lt;blockquote&gt; &lt;p&gt;IMPORTANT: &lt;code&gt;Endpoint.publish()&lt;/code&gt; must be called to expose the service instead of &lt;code&gt;Endpoint.setAddress()&lt;/code&gt; as above.&lt;/p&gt; &lt;/blockquote&gt;</description></item><item><title>Integration Laravel 5 and Gentelella admin theme</title><link>https://htr3n.github.io/2018/05/integration-laravel-gentelella/<pubdate>Wed, 09 May 2018 00:00:00 +0000</pubdate><guid>0acd6b6922aac765a7c7bcc60fc2c522</guid><description>&lt;p&gt;&lt;a href=&#34;https://github.com/puikinsh/gentelella&#34;&gt;Gentelella&lt;/a&gt; is a very nice and gently-looking &lt;a href=&#34;https://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt; based admin theme developed by Aigars Silkalns (aka &lt;a href=&#34;https://github.com/puikinsh&#34;&gt;puikinsh&lt;/a&gt;). It can be integrated into several Web application frameworks. This post is one of my development exercises in which Gentelella is used to decorate a &lt;a href=&#34;https://github.com/laravel/laravel&#34;&gt;Laravel&lt;/a&gt; 5 based Web application. This task is part of building my PHP based framework &lt;a href=&#34;https://github.com/htr3n/laramod&#34;&gt;LaraMod&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Laravel can act as backend for any Web application. At the moment of this writing, Laravel includes several &lt;a href=&#34;https://laravel.com/docs/frontend&#34;&gt;good supports&lt;/a&gt; for popular front-ends such as Bootstrap, &lt;a href=&#34;https://vuejs.org&#34;&gt;Vue.js&lt;/a&gt;, and &lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt;. The included tool &lt;a href=&#34;https://github.com/JeffreyWay/laravel-mix&#34;&gt;Laravel Mix&lt;/a&gt;, which runs on top of &lt;a href=&#34;https://webpack.js.org/&#34;&gt;Webpack&lt;/a&gt;, can significantly lessen development effort on compiling and mixing Web resources. Thus, I have just leveraged Laravel Mix for this integration task. Further details on Laravel Mix can be found &lt;a href=&#34;https://laravel.com/docs/mix&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt; &lt;p&gt;Laravel provides built-in support for some front-end frameworks but they might cause some conflicts and incompability with Gentelella&amp;rsquo;s own libraries. Therefore, I have decided to start from scratch, i.e. using basic Laravel without any front-end scaffolding&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# remove all scaffolding php artisan preset none &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This command will remove all relevant scaffolding components including Bootstrap, Vue or React. Note that Laravel configuration for Bootstrap and Vue might still exist. For instance, check &lt;code&gt;resource/assets/js/app.js&lt;/code&gt; for the following line and make sure it is commented out.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// require(&#39;./bootstrap&#39;); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we just add Gentelella&amp;rsquo;s dependencies.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# adding Gentelella yarn add --save gentelella # or npm install gentelella --save # update dependencies yarn install # or npm install &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After this step, Gentelella should be available in the local &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt; &lt;h2 id=&#34;compiling-and-mixing-resources&#34;&gt;Compiling and Mixing Resources&lt;/h2&gt; &lt;p&gt;The main configuration file of Laravel Mix is &lt;code&gt;webpack.mix.js&lt;/code&gt;. The fundamental tasks are defined as following.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let mix = require(&#39;laravel-mix&#39;); ... mix.js(&#39;resources/assets/js/app.js&#39;, &#39;public/js&#39;) .sass(&#39;resources/assets/sass/app.scss&#39;, &#39;public/css&#39;); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That is, Mix will compile JavaScript and SASS resources in &lt;code&gt;resources/assets/js/app.js&lt;/code&gt; and &lt;code&gt;resources/assets/sass/app.scss&lt;/code&gt; to &lt;code&gt;public/js&lt;/code&gt; and &lt;code&gt;public/css&lt;/code&gt;, respectively.&lt;/p&gt; &lt;p&gt;We shall use the same way to compile necessary Gentelella resources. The full configuration can be found in the LaraMod project &lt;a href=&#34;https://github.com/htr3n/laramod/blob/master/webpack.mix.js&#34;&gt;&lt;code&gt;webpack.mix.js&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Some common variables are defined to reduce duplicates.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// general resources let public_js = &#39;public/js/&#39;; let public_css = &#39;public/css/&#39;; let resource_sass = &#39;resources/assets/sass/&#39;; // Gentelella resources let gentelella_home = &#39;node_modules/gentelella/&#39;; let gentelella_vendor = gentelella_home + &#39;/vendors/&#39;; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As using separate styles for different pages, e.g. Login, Dashboard, etc., I configure Mix to compile them accordingly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;mix.js(&#39;resources/assets/js/app.js&#39;, public_js). sass(resource_sass + &#39;app.scss&#39;, public_css). sass(resource_sass + &#39;home.scss&#39;, public_css). options({processCssUrls: false}). sass(resource_sass + &#39;login.scss&#39;, public_css). options({processCssUrls: false}). sass(resource_sass + &#39;dashboard.scss&#39;, public_css). options({processCssUrls: false}); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For each component of Gentelella that we need for our project or certain pages, we can copy them into Laravel public folders.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/* * Copy dependent JavaScripts and CSSs */ mix. // gentelella copy(gentelella_home + &#39;build/css/custom.css&#39;, public_css + &#39;gentelella-custom.css&#39;). copy(gentelella_home + &#39;build/js/custom.js&#39;, public_js + &#39;gentelella-custom.js&#39;). ... &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We can definitely use Mix/Webpack tools for optimising/minimising/transforming Gentelella resources. I will leave it as extra deployment exercises. For now, I will mainly concentrate on development aspects. When I need to use a Gentelella&amp;rsquo;s component for a certain page, I will include the following directives in the corresponding Laravel Blade templates for that page.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;&amp;lt;!-- Styles --&amp;gt; &amp;lt;link href=&amp;quot;{{ asset(&#39;css/font-awesome.css&#39;) }}&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt; &amp;lt;link href=&amp;quot;{{ asset(&#39;css/bootstrap.css&#39;) }}&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt; &amp;lt;link href=&amp;quot;{{ asset(&#39;css/gentelella-custom.css&#39;) }}&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt; ... &amp;lt;!-- Scripts --&amp;gt; &amp;lt;script src=&amp;quot;{{ asset(&#39;js/jquery.min.js&#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;{{ asset(&#39;js/bootstrap.js&#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;{{ asset(&#39;js/gentelella-custom.js&#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;{{ asset(&#39;js/app.js&#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the specific Laravel Blade directive &lt;code&gt;{{ }}&lt;/code&gt; and &lt;code&gt;asset(...)&lt;/code&gt; are used to refer to the resources inside Laravel &lt;code&gt;public/&lt;/code&gt; folder accordingly. A working example of Laravel and Gentelella integration is illustrated via the &lt;a href=&#34;https://github.com/htr3n/laramod&#34;&gt;LaraMod&lt;/a&gt; project that you can check out and have a deeper look.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;login.png&#34; alt=&#34;Login&#34; /&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;dashboard.png&#34; alt=&#34;Dashboard&#34; /&gt;&lt;/p&gt; &lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Integration Laravel 5 and Gentelella is a simple but interesting exercise showing many nice features of Laravel for supporting common front-ends. Laravel Mix provides a good wrapper on top of Webpack that really reduces the complexity of Webpack and lessens considerable amount of development effort.&lt;/p&gt;</description></item><item><title>Node.js package managers: NPM and Yarn</title><link>https://htr3n.github.io/2018/04/node.js-package-managers-npm-and-yarn/<pubdate>Mon, 23 Apr 2018 00:00:00 +0000</pubdate><guid>b3d7607ba2c296738f3239328d601b95</guid><description>&lt;p&gt;Node.js is an increasingly popular and widely used JavaScript runtime nowadays. One of the important aspects of Node.js is to manage the dependencies among software artefacts. Better dependency management would advocate modularisation and decoupling of software components. Since the dawn of Node.js, &lt;a href=&#34;https://stackoverflow.com/questions/35062852/npm-vs-bower-vs-browserify-vs-gulp-vs-grunt-vs-webpack&#34;&gt;several package managers&lt;/a&gt; have been developed, notably, &lt;a href=&#34;https://www.npmjs.org/&#34;&gt;npm&lt;/a&gt;, &lt;a href=&#34;https://anymod.com&#34;&gt;anymod&lt;/a&gt; (formerly &lt;code&gt;component&lt;/code&gt;), &lt;a href=&#34;http://volojs.org&#34;&gt;volo&lt;/a&gt;, &lt;a href=&#34;http://packages.ringojs.org&#34;&gt;ringojs&lt;/a&gt;, &lt;a href=&#34;https://bower.io&#34;&gt;bower&lt;/a&gt;, &lt;a href=&#34;https://yarnpkg.com&#34;&gt;yarn&lt;/a&gt;, &lt;a href=&#34;https://pnpm.js.org&#34;&gt;&lt;code&gt;pnpm&lt;/code&gt;&lt;/a&gt;, to name but a few.&lt;/p&gt; &lt;p&gt;In this post, we shall walk through the two tools that have been seemingly living up to the high expectation of a majority of JavaScript developers and communities, &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt;. &lt;code&gt;pnpm&lt;/code&gt; is an improvement that &lt;a href=&#34;https://github.com/pnpm/node-package-manager-benchmark&#34;&gt;performs sometimes better&lt;/a&gt; than &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt;. The great advantage of using &lt;code&gt;pnpm&lt;/code&gt; is that we just replace the command &lt;code&gt;npm&lt;/code&gt; by &lt;code&gt;pnpm&lt;/code&gt; and keep the rest intact. Bower is a powerful tool that supports not only JS but also various types of Web resources including HTML, CSS, fonts, images. Nevertheless, the core Bower developers and maintainers &lt;a href=&#34;https://bower.io/blog/2017/how-to-migrate-away-from-bower&#34;&gt;had recently recommended the users to switch to &lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;npm&lt;/code&gt; seems to be the &lt;em&gt;de facto&lt;/em&gt; package management included with Node.js. When Node.js is installed, &lt;code&gt;npm&lt;/code&gt; will also be available and ready to use as well. This is one among many reasons why &lt;code&gt;npm&lt;/code&gt; is well-known and widely used by JS developers.&lt;/li&gt; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt; was &lt;a href=&#34;https://code.facebook.com/posts/1840075619545360&#34;&gt;originally developed by Facebook&lt;/a&gt; to overcome existing problems of existing package management tools. Some notable &lt;code&gt;yarn&lt;/code&gt;&amp;rsquo;s features are &lt;em&gt;deterministic model&lt;/em&gt; (producing the same result when repeating), &lt;em&gt;flat mode&lt;/em&gt; (resolving mismatching versions of dependencies to a single version to avoid duplicate), &lt;em&gt;security first&lt;/em&gt;, &lt;em&gt;offline mode&lt;/em&gt;, &lt;em&gt;network performance&lt;/em&gt;, and so forth. Nevertheless, recent versions of &lt;code&gt;npm&lt;/code&gt; also improve significantly by learning and incorporate several good features from &lt;code&gt;yarn&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&#34;walking-through&#34;&gt;Walking Through&lt;/h2&gt; &lt;p&gt;In this part, we will go through a typical development workflow that each tool provides with basic steps and some commonly used options.&lt;/p&gt; &lt;h3 id=&#34;0-installing-and-upgrading&#34;&gt;0. Installing and Upgrading&lt;/h3&gt; &lt;h5 id=&#34;npm&#34;&gt;NPM&lt;/h5&gt; &lt;p&gt;As mentioned above, &lt;code&gt;npm&lt;/code&gt; is available wherever Node.js is installed. So, the only thing to do is to upgrade &lt;code&gt;npm&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install npm@latest -g # you can also use the alias &#39;i&#39; npm i npm@latest -g &lt;/code&gt;&lt;/pre&gt; &lt;h5 id=&#34;yarn&#34;&gt;Yarn&lt;/h5&gt; &lt;p&gt;Yarn can be installed via &lt;code&gt;npm&lt;/code&gt; but this method is &lt;a href=&#34;https://yarnpkg.com/en/docs/install#install-via-npm&#34;&gt;not recommended due to security reason&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --g yarn &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;macOS users can install Yarn using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# installing brew update &amp;amp;&amp;amp; brew install yarn # upgrading brew upgrade yarn &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There are also &lt;a href=&#34;https://yarnpkg.com/en/docs/install&#34;&gt;concrete instructions&lt;/a&gt; for Linux and Windows users, too.&lt;/p&gt; &lt;h3 id=&#34;1-starting-new-projects&#34;&gt;1. Starting New Projects&lt;/h3&gt; &lt;h5 id=&#34;npm-1&#34;&gt;NPM&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm init [-f|--force] [-y|--yes] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;npm init&lt;/code&gt; will ask you a number of questions and create an initial configuration file &lt;code&gt;package.json&lt;/code&gt;. In case you do not want to answer the questions one by one, you can use any option &lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;--force&lt;/code&gt;, &lt;code&gt;-y&lt;/code&gt; or &lt;code&gt;--yes&lt;/code&gt; to skip all questions and get a default &lt;code&gt;package.json&lt;/code&gt; in the current directory.&lt;/p&gt; &lt;h5 id=&#34;yarn-1&#34;&gt;Yarn&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn init [-y | --yes] [-p | --private] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This command is totally similar to &lt;code&gt;npm init&lt;/code&gt; and the outcome will be &lt;code&gt;package.json&lt;/code&gt;. The only difference is &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--private&lt;/code&gt; to set &lt;code&gt;&amp;quot;private&amp;quot;: true&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&#34;2-getting-information&#34;&gt;2. Getting Information&lt;/h3&gt; &lt;h5 id=&#34;npm-2&#34;&gt;NPM&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# display a particular package&#39;s information npm view eslint npm info eslint # search for a package/name npm search eslint # list installed packages npm ls &lt;/code&gt;&lt;/pre&gt; &lt;h5 id=&#34;yarn-2&#34;&gt;Yarn&lt;/h5&gt; &lt;p&gt;Yarn developers deliberately do not add support for searching packages like &lt;code&gt;npm&lt;/code&gt; as &lt;a href=&#34;https://github.com/yarnpkg/yarn/issues/778#issuecomment-253146299&#34;&gt;explained here&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# display a particular package&#39;s information yarn info eslint # list installed packages yarn list &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Yarn provodes a nice command for showing why a certain package was installed.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn why eslint &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;3-installing-dependencies&#34;&gt;3. Installing Dependencies&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; provide several options to add dependencies ranging from registered packages, tarballs, to git repositories. Please note that, &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; also support manipulating global package repositories, i.e. installed packages that are available to the whole working system instead of local projects. In most of the case, we can use the option &lt;code&gt;-g&lt;/code&gt; for &lt;code&gt;npm&lt;/code&gt; and the command &lt;code&gt;global&lt;/code&gt; for &lt;code&gt;yarn&lt;/code&gt;. Thus, in the following steps, we mainly concentrate on local repositories.&lt;/p&gt; &lt;h5 id=&#34;npm-3&#34;&gt;NPM&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install all dependencies defined in package.json npm install # add a registered package and record it in &#39;dependencies&#39; npm install eslint # add an exact version npm install eslint@3.0.0 # add and record in &#39;devDependencies&#39; npm install --save-dev eslint # add a git repos npm install git@github.com:eslint/eslint.git &lt;/code&gt;&lt;/pre&gt; &lt;h5 id=&#34;yarn-3&#34;&gt;Yarn&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# install all dependencies defined in package.json yarn install # add a registered package yarn add eslint # add an exact version yarn add eslint@3.0.0 # add to dev dependencies yarn add --dev eslint # add a git repos yarn add git@github.com:eslint/eslint.git &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;4-upgrading-packages&#34;&gt;4. Upgrading Packages&lt;/h3&gt; &lt;h5 id=&#34;npm-4&#34;&gt;NPM&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# check outdated packages npm outdated # upgrade all to the latest versions w.r.t version ranges in &#39;package.json&#39; (since 2.6.1 default to top level packages) npm update # upgrade a specific package npm update eslint &lt;/code&gt;&lt;/pre&gt; &lt;h5 id=&#34;yarn-4&#34;&gt;Yarn&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# check outdated packages yarn outdated # upgrade all yarn upgrade # upgrade all and ignore version ranges in &#39;package.json&#39; yarn upgrade --latest # upgrade a specific package yarn upgrade eslint # upgrade packages match a pattern yarn upgrade --pattern eslint &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;5-removing-packages&#34;&gt;5. Removing Packages&lt;/h3&gt; &lt;h5 id=&#34;npm-5&#34;&gt;NPM&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm uninstall eslint &lt;/code&gt;&lt;/pre&gt; &lt;h5 id=&#34;yarn-5&#34;&gt;Yarn&lt;/h5&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn remove eslint &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;6-running-commands&#34;&gt;6. Running Commands&lt;/h3&gt; &lt;h5 id=&#34;npm-6&#34;&gt;NPM&lt;/h5&gt; &lt;p&gt;&lt;code&gt;npm&lt;/code&gt; allows users to define executable scripts in &lt;code&gt;package.json&lt;/code&gt; under the section&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;scripts&amp;quot; : { &amp;quot;test&amp;quot; : &amp;quot;...&amp;quot; } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;then use &lt;code&gt;npm run script-name&lt;/code&gt; to execute the predefined scripts.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run test &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Nevertheless, &lt;code&gt;npm&lt;/code&gt; provides a short form for executing testing scripts as well.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm test &lt;/code&gt;&lt;/pre&gt; &lt;h5 id=&#34;yarn-6&#34;&gt;Yarn&lt;/h5&gt; &lt;p&gt;Similar to &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;yarn&lt;/code&gt; users can execute scripts with &lt;code&gt;yarn run script-name&lt;/code&gt; and &lt;code&gt;yarn test&lt;/code&gt; for testing.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn run start yarn test &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So far, we have walked through some basic steps of a typical development workflow, ranging from initialisation to inquiring and manipulating packages. Apart from that, both &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; also go extra length with many more different functionality. Backing by very strong and active communities, your development projects will surely in safe hands when choosing either of them.&lt;/p&gt;</description></item><item><title>Confusing Hugo issues: datetime and &#39;isset&#39;</title><link>https://htr3n.github.io/2018/03/confusing-hugo-issues-datetime-and-isset/<pubdate>Sat, 31 Mar 2018 00:00:00 +0000</pubdate><guid>fdd9e8e1cb451d75b702fcce8006aded</guid><description>&lt;p&gt;Yesterday I got notified from Github for &lt;a href=&#34;https://github.com/htr3n/hyde-hyde/issues?q=is%3Aissue&#34;&gt;two opening issues&lt;/a&gt; of the Hugo&amp;rsquo;s theme &lt;a href=&#34;https://github.com/htr3n/hyde-hyde&#34;&gt;hyde-hyde&lt;/a&gt; I have ported and developed further.&lt;/p&gt; &lt;p&gt;The &lt;a href=&#34;https://github.com/htr3n/hyde-hyde/issues/2&#34;&gt;newest one&lt;/a&gt; is reported by &lt;a href=&#34;https://github.com/jdayton3&#34;&gt;jdayton3&lt;/a&gt; (Jonathan Dayton) on wrong dates shown up. The issue seems very strange and difficult to spot. It took me a while to research around and found some relevant reports by &lt;a href=&#34;https://www.madboa.com/blog/2016/08/24/hugo-dateformat&#34;&gt;Paul Heinlein&lt;/a&gt; and &lt;a href=&#34;https://github.com/gohugoio/hugo/issues/163&#34;&gt;Dana Woodman&lt;/a&gt;, that Hugo date/time formatting is internally based on Golang, and therefore, uses &lt;a href=&#34;https://golang.org/pkg/time/#example_Time_Format&#34;&gt;a smart but confusing convention&lt;/a&gt;. It&amp;rsquo;s funny that I made almost the same mistake as Dana (i.e. he used the format string &amp;ldquo;March 1, 2010&amp;rdquo; whilst mine is &amp;ldquo;Jan 1, 2006&amp;rdquo;). As such, the generated dates were totally incorrect.&lt;/p&gt; &lt;p&gt;Paul&amp;rsquo;s post summarise excellently the Go&amp;rsquo;s date/time format convention:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Format strings absolutely must adhere to the 1-2-3-4-5-6-7 order:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Month must be Jan, January, 01, or 1&lt;/li&gt; &lt;li&gt;Date must be 02 or 2&lt;/li&gt; &lt;li&gt;Hour must be 03, 3, or 15&lt;/li&gt; &lt;li&gt;Minute must 04&lt;/li&gt; &lt;li&gt;Second must be 05&lt;/li&gt; &lt;li&gt;Year must be 2006&lt;/li&gt; &lt;li&gt;Timezone must be MST or -7&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;After changing the format string, the aforementioned issue surely disappears. Even better, &lt;code&gt;hyde-hyde&lt;/code&gt; date/time formatting can also now adopt a default option to prevent such potential issues.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{{ .Date.Format (.Site.Params.dateformat | default &amp;quot;Jan 02, 2006&amp;quot;) }} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/htr3n/hyde-hyde/issues/1&#34;&gt;The other issue&lt;/a&gt; reported by &lt;a href=&#34;https://github.com/paskal&#34;&gt;paskal&lt;/a&gt; (Dmitry Verkhoturov) is an error Dmitry spotted when compiling and testing his blog against several Hugo themes including mine, &lt;code&gt;hyde-hyde&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Building sites ‚Ä¶ ERROR 2018/03/20 20:35:56 Error while rendering &amp;quot;page&amp;quot; in &amp;quot;&amp;quot;: template: /srv/hugo/themes/hyde-hyde/layouts/_default/single.html:6:7: executing &amp;quot;content&amp;quot; at &amp;lt;partial &amp;quot;post_conten...&amp;gt;: error calling partial: template: theme/partials/post_content.html:22:21: executing &amp;quot;theme/partials/post_content.html&amp;quot; at &amp;lt;len .Params.tags&amp;gt;: error calling len: len of untyped nil ERROR 2018/03/20 20:35:56 Error while rendering &amp;quot;page&amp;quot; in &amp;quot;post/&amp;quot;: template: /srv/hugo/themes/hyde-hyde/layouts/_default/single.html:6:7: executing &amp;quot;content&amp;quot; at &amp;lt;partial &amp;quot;post_conten...&amp;gt;: error calling partial: template: theme/partials/post_content.html:22:21: executing &amp;quot;theme/partials/post_content.html&amp;quot; at &amp;lt;len .Params.tags&amp;gt;: error calling len: len of untyped nil &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The problem related to accessing &lt;a href=&#34;https://gohugo.io/variables/page/#page-level-params&#34;&gt;the tags&lt;/a&gt; of each post via &lt;code&gt;.Params.tags&lt;/code&gt;. The function &lt;code&gt;len .Params.tags&lt;/code&gt; receives an untyped &lt;code&gt;nil&lt;/code&gt; value. Strangely, there is a conditional check using the function &lt;a href=&#34;https://github.com/gohugoio/hugo/blob/1823c053c8900cb6ee53b8e5c02939c7398e34dd/tpl/collections/collections.go#L315&#34;&gt;isset&lt;/a&gt; right before that.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;tags&amp;quot; }} {{ $total := len .Params.tags }} ... {{ end }} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;a href=&#34;https://gohugo.io/functions/isset&#34;&gt;semantics&lt;/a&gt; of &lt;code&gt;isset&lt;/code&gt; is a bit vague:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Returns true if the parameter is set.&lt;/p&gt; &lt;/blockquote&gt; &lt;pre&gt;&lt;code&gt;isset COLLECTION INDEX isset COLLECTION KEY &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It does not say anything when either &lt;code&gt;COLLECTION&lt;/code&gt; or &lt;code&gt;INDEX/KEY&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; or empty. As such, perhaps Dmitry&amp;rsquo;s blog contains some posts with empty tags. Hence, the variable &lt;code&gt;.Params.tags&lt;/code&gt; yields &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; whilst &lt;code&gt;isset.Params &amp;quot;tags&amp;quot;&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;One of the temporary mitigation is to use &lt;a href=&#34;https://gohugo.io/functions/with&#34;&gt;with&lt;/a&gt; instead. The semantics of &lt;code&gt;with&lt;/code&gt; is a bit clearer.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Rebinds the context (&lt;code&gt;.&lt;/code&gt;) within its scope and skips the block if the variable is absent.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Nevertheless, the error is dismissed when replacing the above code with the following. Hoooraaay!!!&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{{ with .Params.tags }} {{ $total := len . }} {{ end }} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Hugo is quite tricky, eh?&lt;/p&gt;</description></item><item><title>Getting started with Webpack</title><link>https://htr3n.github.io/2018/02/getting-started-webpack/<pubdate>Fri, 16 Feb 2018 00:00:00 +0000</pubdate><guid>9cad8498a3549c62d61178b1e5d4d7a7</guid><description>&lt;p&gt;Webpack is a &lt;a href=&#34;https://webpack.js.org/concepts&#34;&gt;&lt;em&gt;static module bundler&lt;/em&gt;&lt;/a&gt; for Web applications. It analyses and processes the &lt;em&gt;input application&lt;/em&gt; and generates output &lt;em&gt;bundles&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;The design of Webpack architecture is highly modularised and extendable. In this post, I share here some notes on major aspects of Webpack since I&amp;rsquo;ve started learning it.&lt;/p&gt; &lt;figure &gt; &lt;img src=&#34;https://htr3n.github.io/2018/02/getting-started-webpack/what-is-webpack.png&#34; alt=&#34;Webpack overview&#34; style=&#34;max-width: 100%;&#34; /&gt; &lt;figcaption&gt; &lt;span class=&#34;img--caption&#34;&gt; Figure 1. Webpack overview [&lt;a href=&#34;https://webpack.github.io&#34;&gt;source&lt;/a&gt;] &lt;/span&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;h3 id=&#34;main-concepts&#34;&gt;Main Concepts&lt;/h3&gt; &lt;h5 id=&#34;configuration-https-webpack-js-org-concepts-configuration&#34;&gt;&lt;a href=&#34;https://webpack.js.org/concepts/configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/h5&gt; &lt;p&gt;Webpack&amp;rsquo;s configuration is conventionally defined using a file &lt;code&gt;webpack.config.js&lt;/code&gt;. It is a JavaScript/Node.js source file. A comprehensive example of &lt;code&gt;webpack.config.js&lt;/code&gt; can be found &lt;a href=&#34;https://webpack.js.org/configuration/#options&#34;&gt;here&lt;/a&gt;. The four major parts of Webpack&amp;rsquo;s configuration are &lt;em&gt;entry&lt;/em&gt;, &lt;em&gt;output&lt;/em&gt;, &lt;em&gt;loaders&lt;/em&gt; and &lt;em&gt;plugins&lt;/em&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://webpack.js.org/concepts/entry-points&#34;&gt;Entry&lt;/a&gt;: An entry denotes the starting point where Webpack commences buidling the internal &lt;em&gt;dependency graph&lt;/em&gt; by analysing all direct and indirect dependencies. There might be more than one entry.&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://webpack.js.org/concepts/output&#34;&gt;Output&lt;/a&gt;: The output part defines the places where Webpack stores and how to name the outputs.&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://webpack.js.org/concepts/loaders&#34;&gt;Loaders&lt;/a&gt;: Webpack uses loaders to handle files other than JavaScript by transform them into modules that can be processed by Webpack. Loaders are configured using &lt;code&gt;module.rules&lt;/code&gt; that specify the properties &lt;code&gt;test&lt;/code&gt; (what/which files to be transformed) and &lt;code&gt;use&lt;/code&gt; (which loaders to be used).&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://webpack.js.org/concepts/plugins&#34;&gt;Plugins&lt;/a&gt;: Plugins are important part of Webpack that will carry out different kinds of tasks such as checking, combining files, optimised outputs, and so on. Webpack provides a &lt;a href=&#34;https://webpack.js.org/api/plugins&#34;&gt;clear interface&lt;/a&gt; for creating and/or extending plugins.&lt;/li&gt; &lt;/ul&gt; &lt;h5 id=&#34;modules-https-webpack-js-org-concepts-modules&#34;&gt;&lt;a href=&#34;https://webpack.js.org/concepts/modules&#34;&gt;Modules&lt;/a&gt;&lt;/h5&gt; &lt;p&gt;Webpack considers almost each file of any kinds a &lt;em&gt;module&lt;/em&gt;. The dependencies between modules can be described via various ways, for instance using ES2015&amp;rsquo;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&#34;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;, CommonJS&amp;rsquo;s &lt;a href=&#34;http://www.commonjs.org/specs/modules/1.0&#34;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/amdjs/amdjs-api/blob/master/AMD.md&#34;&gt;AMD&lt;/a&gt;&amp;rsquo;s &lt;code&gt;define&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt;, and CSS&amp;rsquo;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/@import&#34;&gt;&lt;code&gt;@import&lt;/code&gt;&lt;/a&gt;. Some built-in module types supported by Webpack are including CoffeeScript, TypeScript, Babel, Sass, Less, and Stylus.&lt;/p&gt; &lt;h5 id=&#34;dependency-graph-https-webpack-js-org-concepts-dependency-graph&#34;&gt;&lt;a href=&#34;https://webpack.js.org/concepts/dependency-graph&#34;&gt;Dependency Graph&lt;/a&gt;&lt;/h5&gt; &lt;p&gt;When a file or module needs another, it is considered a &lt;em&gt;dependency&lt;/em&gt;. Webpack analyses all possible dependencies and builds a &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_graph&#34;&gt;graph&lt;/a&gt; that includes all &lt;em&gt;needed modules&lt;/em&gt; starting from the &lt;em&gt;entry points&lt;/em&gt;. The &lt;em&gt;dependency graph&lt;/em&gt; is then used to package these modules into the &lt;em&gt;output bundles&lt;/em&gt;.&lt;/p&gt; &lt;h3 id=&#34;some-typical-usage-scenarios&#34;&gt;Some Typical Usage Scenarios&lt;/h3&gt; &lt;h5 id=&#34;1-a-simple-greeting&#34;&gt;1. A Simple Greeting&lt;/h5&gt; &lt;p&gt;To demonstrate the simplest and, somewhat naive, usage of Webpack, we will create a small project as following.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;simple-greeting ‚îú‚îÄ‚îÄ package.json ‚îú‚îÄ‚îÄ public ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.html ‚îú‚îÄ‚îÄ src ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main.js ‚îî‚îÄ‚îÄ webpack.config.js &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; can be quickly instantiated using &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt; or &lt;a href=&#34;https://yarnpkg.com&#34;&gt;yarn&lt;/a&gt;, as I prefer)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd simple-greeting # create a package.json with default options $ yarn init -y # now we use npm install webpack as a dependency of our project $ yarn add --dev webpack &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&amp;rsquo;s create a JavaScript &lt;code&gt;src/main.js&lt;/code&gt; that contains our main business logic, i.e. writing out a heading 1 &lt;code&gt;Hello Webpack!&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.write(&#39;&amp;lt;h1&amp;gt;Hello Webpack!&amp;lt;/h1&amp;gt;&#39;); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And we edit &lt;code&gt;public/index.html&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Getting Started with Webpack - A Simple Greeting&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You might have noticed that &lt;code&gt;index.html&lt;/code&gt; uses &lt;code&gt;bundle.js&lt;/code&gt; instead of &lt;code&gt;main.js&lt;/code&gt; that we created above. You are right, &lt;code&gt;bundle.js&lt;/code&gt; is generated by Webpack given the input &lt;code&gt;main.js&lt;/code&gt;. Let&amp;rsquo;s create a config file &lt;code&gt;webpack.config.js&lt;/code&gt; to do that.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const webpack = require(&#39;webpack&#39;); const path = require(&#39;path&#39;); module.exports = { entry: &#39;./src/main.js&#39;, output: { path: path.resolve(__dirname, &#39;public&#39;), filename: &#39;bundle.js&#39;, } }; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that, a simple invocation of &lt;code&gt;webpack&lt;/code&gt; at the command line will work. Please note that &lt;code&gt;npm&lt;/code&gt; installs the executable &lt;code&gt;webpack&lt;/code&gt; inside &lt;code&gt;node_modules/.bin&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node_modules/.bin/webpack Hash: 9300b893968675cae1ef Version: webpack 3.11.0 Time: 81ms Asset Size Chunks Chunk Names bundle.js 2.52 kB 0 [emitted] main [0] ./src/main.js 43 bytes {0} [built] &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The execution of &lt;code&gt;webpack&lt;/code&gt; command should be successful. Now should you open &lt;code&gt;public/index.html&lt;/code&gt; using a Web browser, you will see &amp;ldquo;&lt;strong&gt;Hello Webpack&lt;/strong&gt;&amp;rdquo;.&lt;/p&gt; &lt;h4 id=&#34;2-using-loaders&#34;&gt;2. Using Loaders&lt;/h4&gt; &lt;p&gt;Several loaders have been developed for Webpack in order to handle various application resource types. An incompleted list of Webpack loaders can be found &lt;a href=&#34;https://github.com/webpack-contrib/awesome-webpack#loaders&#34;&gt;here&lt;/a&gt;. We will exemplify &lt;a href=&#34;https://github.com/webpack-contrib/eslint-loader&#34;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt; for analysing JavaScript sources and reporting errors, if any.&lt;/p&gt; &lt;p&gt;Let&amp;rsquo;s reuse the previous example &lt;code&gt;webpack.config.js&lt;/code&gt; and add the &lt;code&gt;eslint-loader&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = { entry: &#39;./src/main.js&#39;, output: { path: path.resolve(__dirname, &#39;public&#39;), filename: &#39;bundle.js&#39; }, module: { rules: [ { test:/\.js$/, exclude:/node_modules/, loader: &#39;eslint-loader&#39; } ], }, }; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We also needs, at least, the following packages: &lt;code&gt;eslint&lt;/code&gt; and &lt;code&gt;eslint-loader&lt;/code&gt; which can be easily installed. In case you need further styles or rules, you can install more packages, for instance, &lt;code&gt;eslint-config-airbnb&lt;/code&gt;, &lt;code&gt;eslint-config-google&lt;/code&gt;, to name but a few.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ yarn add --dev eslint eslint-loader &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For starting, we can initialise a simple configuration for &lt;em&gt;eslint&lt;/em&gt; using the option &lt;code&gt;--init&lt;/code&gt; and answer the corresponding questions. &lt;code&gt;eslint&lt;/code&gt; will create a file &lt;code&gt;.eslintrc.xxx&lt;/code&gt; where &amp;ldquo;xxx&amp;rdquo; is either &amp;ldquo;js&amp;rdquo;, &amp;ldquo;json&amp;rdquo;, or &amp;ldquo;yaml&amp;rdquo; depending on which file format you had chosen.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ eslint --init ... &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then we can invoke &lt;code&gt;webpack&lt;/code&gt; to trigger the loader. For example, we can add the following line in the &lt;code&gt;src/main.js&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.write(&#39;&amp;lt;h1&amp;gt;Hello Webpack!&amp;lt;/h1&amp;gt;&#39;); document.write(x); // eslint will report an error here &lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ webpack Hash: 9b7cb596310bf077e30b Version: webpack 3.11.0 Time: 622ms Asset Size Chunks Chunk Names bundle.js 2.53 kB 0 [emitted] main [0] ./src/main.js 61 bytes {0} [built] [1 error] ERROR in ./src/main.js /Users/huytran/working/dev/dev-web/webpack-demo/using-linter/src/main.js 2:16 error &#39;x&#39; is not defined no-undef ‚úñ 1 problem (1 error, 0 warnings) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So you can see that &lt;code&gt;eslint-loader&lt;/code&gt; indeed caught the intended error. All errors should be fixed such that Webpack can move forward.&lt;/p&gt; &lt;h4 id=&#34;3-using-plugins&#34;&gt;3. Using Plugins&lt;/h4&gt; &lt;p&gt;As mentioned above, Webpack architecture enables the use of plugins for performing various kinds of tasks, for example, merging, minimising or uglifying source code. Many of Webpack plugins and guides can be found &lt;a href=&#34;https://webpack.js.org/plugins&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://github.com/webpack-contrib/awesome-webpack#webpack-plugins&#34;&gt;here&lt;/a&gt;. We take an example of &lt;a href=&#34;https://webpack.js.org/plugins/uglifyjs-webpack-plugin&#34;&gt;&lt;code&gt;UglifyjsWebpackPlugin&lt;/code&gt;&lt;/a&gt; to illustrate how plugins actually work.&lt;/p&gt; &lt;p&gt;Let&amp;rsquo;s modify the file &lt;code&gt;webpack.config.js&lt;/code&gt; taken from the previous scenarios and add the &lt;code&gt;plugins&lt;/code&gt; part.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = { entry: &#39;./src/main.js&#39;, output: { path: path.resolve(__dirname, &#39;public&#39;), filename: &#39;bundle.js&#39; }, ... plugins: [ new webpack.optimize.UglifyJsPlugin() ] }; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After executing &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt; again, you can see that JavaScript source in &lt;code&gt;public/bundle.js&lt;/code&gt; has been uglified/minimised whilst the ouput of &lt;code&gt;public/index.html&lt;/code&gt; remains in tact.&lt;/p&gt; &lt;p&gt;So far, we have walked through some simple scenarios. They are not quite complex and might have not yet shown all aspects and power of Webpack. Nevertheless, I hope they are sufficient for just showing the basis of Webpack architecture and how it works.&lt;/p&gt; &lt;p&gt;The aforementioned demo projects are hosted at Github, respectively.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/htr3n/webpack-simple-greeting&#34;&gt;https://github.com/htr3n/webpack-simple-greeting&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/htr3n/webpack-with-loaders&#34;&gt;https://github.com/htr3n/webpack-with-loaders&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://github.com/htr3n/webpack-with-plugins&#34;&gt;https://github.com/htr3n/webpack-with-plugins&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</description></item><item><title>First experience with Hugo</title><link>https://htr3n.github.io/2018/01/first-experience-with-hugo/<pubdate>Tue, 23 Jan 2018 00:00:00 +0000</pubdate><guid>2b6be7a16c2673903693860372a1f7e4</guid><description>&lt;p&gt;To commence my journey in software development, I have looked for a Web framework to build my personal blog. I have started writing blog posts mainly using (Multi)Markdown and plan to migrate other posts to Markdown too. Thus, it&amp;rsquo;s rather natural to go with built-in or first-class support for Markdown to minimise the migration effort.&lt;/p&gt; &lt;p&gt;I have not foreseen any great use of extensive backend storage and computation thus far. Therefore, I narrowed down my search to static site generators with two prominent candidates &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt; and &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; popping up, for instance, &lt;a href=&#34;https://www.staticgen.com&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://www.smashingmagazine.com/2015/11/static-website-generators-jekyll-middleman-roots-hugo-review&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://www.netlify.com/blog/2017/05/25/top-ten-static-site-generators-of-2017&#34;&gt;here&lt;/a&gt;. Both offer all essential features to bootstrap a new site or migrate existing sites. Nothing can go wrong when you pick either one.&lt;/p&gt; &lt;p&gt;After a week trying both Jekyll and Hugo, I ended up deciding to go with Hugo. It&amp;rsquo;s not to say I hate Jekyll but quite the opposite. Jekyll is a rather well-engineered piece of software (by the guys behind &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;). I love its design, strong community, rich ecosystem, a lot of beautiful themes and good integration with Github.&lt;/p&gt; &lt;p&gt;There is just one thing I do not feel comfortable working with Jekyll is the way to apply a theme. As far as I know, most of Jekyll&amp;rsquo;s themes ask for copying and pasting theme resources (e.g. CSS, templates) into an existing Jekyll site (please correct me if I am wrong).&lt;/p&gt; &lt;p&gt;This is quite strange regarding the conventional approach of Ruby &amp;ndash; the backend of Jekyll. As predicted, I had way too many problems changing themes that cross various Jekyll versions. It should be the other way around. That is, a theme would remain in tact inside predefined folders and be plugged into the Jekyll site via the configuration file. I think this approach, in terms of software design, would be less intrusive and much lower &lt;a href=&#34;https://en.wikipedia.org/wiki/Coupling_(computer_programming)&#34;&gt;coupling&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Hugo gets this design decision quite right. That&amp;rsquo;s why I prefer Hugo, apart from its amazing performance. You can easily find numerous compliments for Hugo around the Internet. I just fall in love with the way Hugo allows me to apply and adapt any themes (of course with some extra effort as each theme might often introduce some additional customizable features or variables). Besides, as I desire to learn more about &lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;, Hugo would be definitely a nice start.&lt;/p&gt; &lt;p&gt;The longer I play around with Hugo, the more I become passionate about Hugo in particular and Golang in general. The first week working with Hugo has yielded a Hugo&amp;rsquo;s theme for my personal use that you might find useful, namely, &lt;a href=&#34;https://github.com/htr3n/hyde-hyde&#34;&gt;hyde-hyde&lt;/a&gt; (based on spf13&amp;rsquo;s &lt;a href=&#34;https://github.com/spf13/hyde&#34;&gt;Hyde&lt;/a&gt;). My journey with Hugo and Golang has just started but it looks quite bright and promising thus far.&lt;/p&gt; &lt;p&gt;I ‚ù§Ô∏è Hugo.&lt;/p&gt;</description></item><item><title>LaraMod - Modularised Laravel 5</title><link>https://htr3n.github.io/2018/01/laramod/<pubdate>Fri, 19 Jan 2018 00:00:00 +0000</pubdate><guid>0bca01c9ee00f241fa227bb5a7448a46</guid><description>&lt;p&gt;&lt;a href=&#34;https://laravel.com&#34;&gt;Laravel&lt;/a&gt; is an amazing emerging, well-designed and well-developed PHP framework. It is currently under active development and has been among top Web development frameworks. For a simple development project, the structure is totally fine. Nevertheless, you might not want to mix up your source code and resources with Laravel&amp;rsquo;s except some really necessary configurations.&lt;/p&gt; &lt;p&gt;Moreover, you might also want to organise your project into submodules that are assigned to more than one team/person such that they can be developed silmutaneously. Thus, the need for complex submodule organisation is quite inevitable.&lt;/p&gt; &lt;p&gt;From my struggle to organise a Laravel-based project such that I can divide and work on individual submodules such as &lt;code&gt;UserManagement&lt;/code&gt;, &lt;code&gt;Authentication&lt;/code&gt;, &lt;code&gt;Dashboard&lt;/code&gt;, etc. whilst keeping the Laravel code base intact as much as possible (this could be convenient for upgrading Laravel) and keeping my code base separate from Laravel&amp;rsquo;s.&lt;/p&gt; &lt;p&gt;There are a number decent attempts on modalurasing Laravel projects for example &lt;a href=&#34;https://nicolaswidart.com/blog/writing-modular-applications-with-laravel-modules&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/caffeinated/modules&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;http://kamranahmed.info/blog/2015/12/03/creating-a-modular-application-in-laravel&#34;&gt;here&lt;/a&gt;. Being inspired and learning from these articles, I decided to start a simple project on my own, namely, &lt;a href=&#34;https://github.com/htr3n/laramod&#34;&gt;&lt;code&gt;LaraMod&lt;/code&gt;&lt;/a&gt;, for many reasons, but the biggest one is to dig deeper into Laravel 5 and PHP.&lt;/p&gt; &lt;p&gt;Here I only emphasize some major aspects of LaraMod. The rest, including code and extra improvements can be found at LaraMod&amp;rsquo;s &lt;a href=&#34;https://github.com/htr3n/laramod&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Update 1 @ 2018-04-25&lt;/strong&gt;: &lt;code&gt;LaraMod&lt;/code&gt; has been revised and updated to work with the most recent version of Laravel framework, &lt;code&gt;5.6.17&lt;/code&gt;. Instead of a standalone git repos, LaraMod is from now on a fork of &lt;a href=&#34;https://github.com/laravel/laravel&#34;&gt;Laravel repos&lt;/a&gt; enhanced with better modularisation.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Update 2 @ 2018-11-30&lt;/strong&gt;: &lt;code&gt;LaraMod&lt;/code&gt; has been upgraded and merged with Laravel &lt;code&gt;master&lt;/code&gt; in which the stable release version is &lt;code&gt;5.7.15&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&#34;modularising-laravel-5&#34;&gt;Modularising Laravel 5&lt;/h2&gt; &lt;h3 id=&#34;a-simple-submodule-structure&#34;&gt;A Simple Submodule Structure&lt;/h3&gt; &lt;p&gt;Assuming that I want to divide my project into submodules of which each comprises own controllers, views, models (MVC) and others such as database migration, i18n, and routes. A simple structure of the submodule &lt;code&gt;Authentication&lt;/code&gt; is shown as following.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Authentication ‚îú‚îÄ‚îÄControllers ‚îú‚îÄ‚îÄLang ‚îú‚îÄ‚îÄMigrations ‚îú‚îÄ‚îÄModels ‚îú‚îÄ‚îÄView ‚îî‚îÄ‚îÄroutes.php &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Such a structure can be very useful for different teams/people working independently. In LaraMod, there is an &lt;code&gt;artisan&lt;/code&gt; command &lt;code&gt;gen:module&lt;/code&gt; provided in &lt;a href=&#34;https://github.com/htr3n/laramod/blob/master/app/Console/Commands/GenModuleCommand.php&#34;&gt;&lt;code&gt;App\Console\Commands\GenModuleCommand&lt;/code&gt;&lt;/a&gt; that can quickly create a submodule following that structure.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ php artisan gen:module Authentication &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;how-to-proceed&#34;&gt;How to Proceed&lt;/h3&gt; &lt;p&gt;An easy approach is to rely on Laravel&amp;rsquo;s &lt;a href=&#34;https://laravel.com/docs/providers&#34;&gt;&lt;code&gt;ServiceProvider&lt;/code&gt;&lt;/a&gt; to load the submodules and register the necessary components of the submodules.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/ecfb6f83c71df096e0cb9f67c7ca53b6.js?file=XYZServiceProvider.php&#34;&gt;&lt;/script&gt; &lt;p&gt;A &lt;code&gt;ServiceProvider&lt;/code&gt; contains two important methods &lt;code&gt;register()&lt;/code&gt; and &lt;code&gt;boot()&lt;/code&gt;. In this case, LaraMod mainly uses the method &lt;code&gt;boot()&lt;/code&gt; to load the corresponding submodule. LaraMod also adopts a simple, conventional method for defining a submodule. That is, all submodules will be subfolders of the folder &lt;code&gt;/modules&lt;/code&gt; and each module follows the conventional structure as mentioned above.&lt;/p&gt; &lt;h4 id=&#34;automatically-loading-submodules&#34;&gt;Automatically Loading Submodules&lt;/h4&gt; &lt;h5 id=&#34;loading-a-submodule&#34;&gt;Loading a Submodule&lt;/h5&gt; &lt;p&gt;First, we create a method &lt;code&gt;loadModule()&lt;/code&gt; to load the resources such as views, i18n, database migration, and routes of a submodule using the provided methods &lt;code&gt;loadViewsFrom()&lt;/code&gt;, &lt;code&gt;loadTranslationsFrom()&lt;/code&gt;, &lt;code&gt;loadMigrationsFrom()&lt;/code&gt;, &lt;code&gt;loadRoutesFrom()&lt;/code&gt;, respectively. As models and controllers are essential PHP classes, they can be loaded using PSR-4 autoloaders as shown in the next parts.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/ecfb6f83c71df096e0cb9f67c7ca53b6.js?file=loadModule.php&#34;&gt;&lt;/script&gt; &lt;h5 id=&#34;detecting-and-loading-submodules&#34;&gt;Detecting and Loading Submodules&lt;/h5&gt; &lt;p&gt;Then we can walk through the folder &lt;code&gt;module&lt;/code&gt; and load all submodules using the method &lt;code&gt;loadModule()&lt;/code&gt; created above.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/ecfb6f83c71df096e0cb9f67c7ca53b6.js?file=findAndLoadModules.php&#34;&gt;&lt;/script&gt; &lt;p&gt;Note that in this conventional approach, &lt;code&gt;findAndLoadModules()&lt;/code&gt; will look for submodule configurations either (1) explicitly in the file &lt;code&gt;/config/module.php&lt;/code&gt; with the following syntax or (2) implicitly as subfolders of &lt;code&gt;/modules&lt;/code&gt; (in case &lt;code&gt;/config/module.php&lt;/code&gt; does not exist).&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/ecfb6f83c71df096e0cb9f67c7ca53b6.js?file=module.php&#34;&gt;&lt;/script&gt; &lt;p&gt;Finally we invoke &lt;code&gt;findAndLoadModules()&lt;/code&gt; within &lt;code&gt;boot()&lt;/code&gt;.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/ecfb6f83c71df096e0cb9f67c7ca53b6.js?file=ModulesServiceProvider.php&#34;&gt;&lt;/script&gt; &lt;h4 id=&#34;registering-the-service-provider&#34;&gt;Registering the Service Provider&lt;/h4&gt; &lt;p&gt;The &lt;code&gt;ModulesServiceProvider&lt;/code&gt; must be registered in &lt;code&gt;/config/app.php&lt;/code&gt; in order to be loaded by Laravel.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/39e631c6726ed69ab26e2cd3bbe1964f.js&#34;&gt;&lt;/script&gt; &lt;h4 id=&#34;autoloading-submodules-classes&#34;&gt;Autoloading Submodules&amp;rsquo; Classes&lt;/h4&gt; &lt;p&gt;Apart from resources like views, i18n, database migration loaded in the previous steps, a submodule can also contain other PHP classes such as database ORM models and controllers.&lt;/p&gt; &lt;p&gt;One natural approach would be to leverage the &lt;a href=&#34;http://www.php-fig.org/psr/psr-4&#34;&gt;PSR-4 autoloader&lt;/a&gt; autoloading supported by Laravel 5.5. This approach also nicely fits when we want to define separate namespaces for each submodule and especially submodule&amp;rsquo;s components.&lt;/p&gt; &lt;p&gt;For this, we can define the submodule&amp;rsquo;s namespace and manually specify the submodule&amp;rsquo;s classpaths to be loaded in &lt;code&gt;composer.json&lt;/code&gt; as following.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/ecfb6f83c71df096e0cb9f67c7ca53b6.js?file=composer.json&#34;&gt;&lt;/script&gt; &lt;p&gt;Another technique for autoloading classes in Laravel 5 is to dynamically add PSR4 classpaths in &lt;code&gt;ModulesServiceProvider.php&lt;/code&gt;.&lt;/p&gt; &lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/htr3n/b785ff9bc2b07b6540441f6dc550d9d4.js&#34;&gt;&lt;/script&gt; &lt;p&gt;One problem, though, is that LaraMod must be able to detect or guess the namespace classpaths. To do this, we can either use the configuration file &lt;code&gt;config/module.php&lt;/code&gt; or, even nicer and smarter, scan the submodule&amp;rsquo;s folders to extract the necessary information. However, loading time then will be really significant when the project grows because Laravel loaders willl do the scanning and loading whenever any classes are referenced.&lt;/p&gt; &lt;h3 id=&#34;accessing-submodule-resources&#34;&gt;Accessing Submodule Resources&lt;/h3&gt; &lt;p&gt;Given a submodule, for instance &lt;code&gt;SubmoduleA&lt;/code&gt;, most of its classes such as controllers and database mapping models, if configuring properly using PSR-4, will be automatically loaded and used straightforwardly. Nonetheless, acessing to resources such as views and i18n (languages) requires a slightly different syntax, for instance, &lt;code&gt;SubmoduleA::blade_view_name&lt;/code&gt; or &lt;code&gt;SubmoduleA::messages.error&lt;/code&gt;. If the &lt;code&gt;SubmoduleA::&lt;/code&gt; is missing, Laravel will look for views and language files in the default places.&lt;/p&gt; &lt;h2 id=&#34;finale&#34;&gt;Finale&lt;/h2&gt; &lt;p&gt;The outcome of my very first PHP project, LaraMod, would be a reasonable skeleton for modularising software projects based on Laravel 5. That is, you can just easily create a new submodule with the predefined conventional structure and add the PSR-4 namespaces and classpaths, then good you go. Each submodule should then be developed independently. Sure there are some areas that need improvement. For example, all testing stuffs are still under &lt;code&gt;/tests&lt;/code&gt; and database seeders are still in &lt;code&gt;database/seeds&lt;/code&gt;. The first one requires intervention with PHPUnit/&lt;code&gt;phpunit.xml&lt;/code&gt; whilst the later asks for further changes in built-in Laravel &lt;code&gt;artisan&lt;/code&gt; commands.&lt;/p&gt; &lt;p&gt;For me&amp;mdash;a new bie, it was not quite an all-pleasant journey to experience several Laravel aspects. Nevertheless, developing and customising LaraMod are extremely valuable as I could learn a lot about not only Laravel in particular but also PHP in general. Achieving reasonable modularisation for a complex software development project requires a lot of thoughtful design and hard work and even sometimes trade-offs and compromises. In sharing this, I hope LaraMod might become handy and helpful start so that your journeys with Laravel can be more pleasant and joyful. I look forward to hearing and learning from your experience, too.&lt;/p&gt;</description></item><item><title>Ng·ª•y bi·ªán / Fallacies (st)</title><link>https://htr3n.github.io/2018/01/nguy-bien-fallacies/<pubdate>Mon, 01 Jan 2018 00:00:00 +0000</pubdate><guid>b6e4a8e01a40d97f703267ec2458f802</guid><description>&lt;p&gt;B√†i vi·∫øt s∆∞u t·∫ßm tr√™n Internet v·ªÅ c√°c h√¨nh th·ª©c ng·ª•y bi·ªán kh√°c nhau.&lt;/p&gt; &lt;h2 id=&#34;thay-ƒë·ªïi-ch·ªß-ƒë·ªÅ&#34;&gt;Thay ƒë·ªïi ch·ªß ƒë·ªÅ&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;C√¥ng k√≠ch c√° nh√¢n (ad hominem). ƒê√¢y l√† m·ªôt lo·∫°i ng·ª•y bi·ªán ph·ªï bi·∫øn nh·∫•t, nguy hi·ªÉm nh·∫•t, v√† c√≥ ‚Äúc√¥ng hi·ªáu‚Äù nh·∫•t, v√¨ n√≥ t·∫•n c√¥ng v√†o c√° nh√¢n c·ªßa ng∆∞·ªùi tranh lu·∫≠n, v√† t√¨m c√°ch tr·ªën tr√°nh lu·∫≠n ƒëi·ªÉm c·ªßa c√° nh√¢n ƒë√≥. H√¨nh th·ª©c ng·ª•y bi·ªán n√†y th∆∞·ªùng xu·∫•t hi·ªán d∆∞·ªõi d·∫°ng: √îng A ph√°t bi·ªÉu v·ªÅ m·ªôt v·∫•n ƒë·ªÅ; √¥ng B t·∫•n c√¥ng v√†o c√° nh√¢n √¥ng A, v√† l√†m cho ng∆∞·ªùi ta nghi ng·ªù lu·∫≠n ƒëi·ªÉm c·ªßa √¥ng A. Tuy nhi√™n, c√≥ th·ªÉ kh√¥ng c√≥ m·ªëi li√™n h·ªá n√†o gi·ªØa c√° nh√¢n v√† lu·∫≠n ƒëi·ªÉm c·ªßa √¥ng A.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;C√≥ hai h√¨nh th·ª©c thu·ªôc lo·∫°i ng·ª•y bi·ªán n√†y. Th·ª© nh·∫•t l√† d∆∞·ªõi h√¨nh th·ª©c s·ªâ nh·ª•c, hay ch·ª≠i r·ªßa. Khi b·∫•t ƒë·ªìng √Ω ki·∫øn, ng∆∞·ªùi ng·ª•y bi·ªán ch·ªâ vi·ªác c√¥ng k√≠ch v√†o c√° nh√¢n c·ªßa ng∆∞·ªùi ph√°t bi·ªÉu.&lt;/p&gt; &lt;p&gt;H√¨nh th·ª©c ng·ª•y bi·ªán th·ª© hai trong lo·∫°i n√†y l√† ng∆∞·ªùi ng·ª•y bi·ªán c·ªë g·∫Øng thuy·∫øt ph·ª•c ng∆∞·ªùi ƒë·ªëi tho·∫°i ch·∫•p nh·∫≠n lu·∫≠n ƒëi·ªÉm c·ªßa h·ªç b·∫±ng c√°ch ƒë·ªÅ c·∫≠p ƒë·∫øn ho√†n c·∫£nh c·ªßa c√° nh√¢n ƒë√≥. V√≠ d·ª•: ‚ÄúAnh n√≥i l√† kh√¥ng n√™n u·ªëng r∆∞·ª£u, v·∫≠y m√† anh ƒë√£ t·ª´ng ng·∫•t ng∆∞·ªüng c·∫£ nƒÉm qua.‚Äù&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;L·ª£i d·ª•ng quy·ªÅn l·ª±c (ad verecundiam). ƒê√¢y l√† lo·∫°i ng·ª•y bi·ªán d√πng nh·ªØng nh√¢n v·∫≠t n·ªïi ti·∫øng hay ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi √°i m·ªô ƒë·ªÉ t√¨m s·ª± ·ªßng h·ªô cho lu·∫≠n ƒëi·ªÉm c·ªßa m√¨nh.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·ª£i d·ª•ng quy·ªÅn l·ª±c n·∫∑c danh. Trong tr∆∞·ªùng h·ª£p n√†y, ng∆∞·ªùi ng·ª•y bi·ªán kh√¥ng n√™u danh t√≠nh ng∆∞·ªùi c√≥ th·∫©m quy·ªÅn, v√† v√¨ kh√¥ng ai bi·∫øt t√™n ng∆∞·ªùi c√≥ th·∫©m quy·ªÅn n√™n kh√¥ng ai c√≥ th·ªÉ ki·ªÉm ch·ª©ng s·ª± ch√≠nh x√°c c·ªßa l·ªùi ph√°t bi·ªÉu. M·ªôt lo·∫°i ng·ª•y bi·ªán kh√°c c√≥ quan h·ªá v·ªõi lo·∫°i n√†y l√† d√πng l·ªùi ƒë·ªìn ƒë·∫°i ƒë·ªÉ l√†m c∆° s·ªü l·∫≠p lu·∫≠n.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·ª£i d·ª•ng t√°c phong. Lo·∫°i ng·ª•y bi·ªán n√†y d√πng t√°c phong hay c√°ch l√†m vi·ªác hay m·ªôt ƒë·∫∑c t√≠nh n√†o ƒë√≥ c·ªßa ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ c·ªë thuy·∫øt ph·ª•c v·ªÅ s·ª± h·ª£p l√≠ c·ªßa ph√°t bi·ªÉu.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Lu·∫≠n ƒëi·ªáu c√° tr√≠ch. Lo·∫°i ng·ª•y bi·ªán n√†y th∆∞·ªùng hay ƒë∆∞·ª£c ·ª©ng d·ª•ng khi m·ªôt ng∆∞·ªùi n√†o ƒë√≥ ƒë∆∞a v√†o nh·ªØng ph√°t bi·ªÉu kh√¥ng d√≠nh d√°ng g√¨ ƒë·∫øn v·∫•n ƒë·ªÅ ƒëang tranh lu·∫≠n, nh·∫±m m·ª•c ƒë√≠ch ƒë√°nh l·∫°c h∆∞·ªõng v·∫•n ƒë·ªÅ.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Lu·∫≠n ƒëi·ªáu ng∆∞·ª£c ng·∫°o (Burden of Proof). B·∫±ng ch·ª©ng lu√¥n lu√¥n l√† g√°nh n·∫∑ng c·ªßa ng∆∞·ªùi ph√°t bi·ªÉu. Do ƒë√≥, t√¨m c√°ch di chuy·ªÉn g√°nh n·∫∑ng ƒë√≥ cho m·ªôt ng∆∞·ªùi kh√°c l√† m·ªôt th·ªß thu·∫≠t gi·ªõi ng·ª•y bi·ªán hay d√πng. V√≠ d·ª•: &amp;ldquo;Anh kh√¥ng tin l√† c√≥ UFO, v·∫≠y anh c√≥ th·ªÉ ch·ª©ng minh kh√¥ng?&amp;rdquo;, ƒë√°ng l·∫Ω ng∆∞·ªùi ph√°t bi·ªÉu ph·∫£i ch·ª©ng minh l√† c√≥ UFO, nh∆∞ng c√¥ng vi·ªác ƒë√≥ ƒë√£ ƒë∆∞·ª£c chuy·ªÉn cho ng∆∞·ªùi ƒë·ªëi tho·∫°i.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;l·ª£i-d·ª•ng-c·∫£m-t√≠nh-v√†-ƒë√°m-ƒë√¥ng&#34;&gt;L·ª£i d·ª•ng c·∫£m t√≠nh v√† ƒë√°m ƒë√¥ng&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;D·ª±a v√†o b·∫°o l·ª±c (ad baculum). Ng·ª•y bi·ªán d·ª±a v√†o b·∫°o l·ª±c th·ª±c ch·∫•t l√† m·ªôt s·ª± ƒëe d·ªça, nh·∫±m m·ª•c ƒë√≠ch g√¢y √°p l·ª±c cho ng∆∞·ªùi ƒë·ªëi tho·∫°i ph·∫£i ch·∫•p nh·∫≠n m·ªôt k·∫øt lu·∫≠n n√†o ƒë√≥. V√≠ d·ª•: &amp;ldquo;Kh√¥ng ƒë·ªìng √Ω v·ªõi t√¥i th√¨ v√†o game s·∫Ω b·ªã kill red&amp;rdquo;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·ª£i d·ª•ng l√≤ng th∆∞∆°ng h·∫°i (ad misericordiam). ƒê√¢y l√† m·ªôt lo·∫°i ng·ª•y bi·ªán d·ª±a v√†o l√≤ng tr·∫Øc ·∫©n c·ªßa ng∆∞·ªùi ƒë·ªëi tho·∫°i ƒë·ªÉ ng∆∞·ªùi ƒë·ªëi tho·∫°i ch·∫•p nh·∫≠n l√≠ l·∫Ω c·ªßa m√¨nh. ‚ÄúT√¥i hi v·ªçng anh s·∫Ω ch·∫•p nh·∫≠n ƒë·ªÅ ngh·ªã n√†y, ch√∫ng ta ƒë√£ ti√™u ra ba th√°ng nay r·ªìi ƒë·∫•y.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·ª£i d·ª•ng h·∫≠u qu·∫£ (ad consequentiam). Ng·ª•y bi·ªán lo·∫°i n√†y th∆∞·ªùng ƒë∆∞·ª£c bi·ªÉu hi·ªán qua c√°ch ph√°t bi·ªÉu ‚ÄúA h√†m √Ω B, B l√† s·ª± th·∫≠t, do ƒë√≥ A l√† s·ª± th·∫≠t‚Äù.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·∫°m d·ª•ng ch·ªØ nghƒ©a. ƒê√¢y l√† m·ªôt lo·∫°i ng·ª•y bi·ªán d·ª±a v√†o d√πng nh·ªØng ch·ªØ mang c·∫£m t√≠nh cao ƒë·ªÉ g·∫Øn m·ªôt gi√° tr·ªã ƒë·∫°o ƒë·ª©c v√†o m·ªôt ƒë·ªÅ ngh·ªã hay m·ªôt c√¢u ph√°t bi·ªÉu.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;D·ª±a v√†o qu·∫ßn ch√∫ng (ad numerum). Lo·∫°i ng·ª•y bi·ªán n√†y tin r·∫±ng n·∫øu c√≥ nhi·ªÅu ng∆∞·ªùi ·ªßng h·ªô m·ªôt ƒë·ªÅ ngh·ªã n√†o ƒë√≥, th√¨ ƒë·ªÅ ngh·ªã ƒë√≥ ph·∫£i ƒë√∫ng. V√≠ d·ª• nh∆∞ ‚Äúƒê·∫°i ƒëa s·ªë th√†nh vi√™n c≈© c·ªßa [Clan Spammer TM] ·ªßng h·ªô Phantom, h·∫≥n anh ·∫•y ph·∫£i lu√¥n lu√¥n ƒë√∫ng.‚Äù Li√™n h·ªá v·ªõi lo·∫°i ng·ª•y bi·ªán n√†y l√† h√¨nh th·ª©c tranh th·ªß s·ª± ·ªßng h·ªô c·ªßa ƒë√°m ƒë√¥ng ƒë·ªÉ c·ªë g·∫Øng cho th·∫•y lu·∫≠n ƒëi·ªÉm c·ªßa m√¨nh l√† ƒë√∫ng.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;l√†m-l·∫°c-h∆∞·ªõng-v·∫•n-ƒë·ªÅ&#34;&gt;L√†m l·∫°c h∆∞·ªõng v·∫•n ƒë·ªÅ&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;L√≠ l·∫Ω ch·∫ª ƒë√¥i. Lo·∫°i ng·ª•y bi·ªán n√†y th∆∞·ªùng ph√¢n ƒë·ªãnh m·ªôt v·∫•n ƒë·ªÅ th√†nh hai gi√° tr·ªã: tr·∫Øng v√† ƒëen, b·∫°n v√† th√π, c√≥ v√† kh√¥ng, v.v.. d√π trong th·ª±c t·∫ø, c√≥ h∆°n hai l·ª±a ch·ªçn. V√≠ d·ª• n√≥i: &amp;ldquo;B·∫°n ch·ªçn ƒëi, ho·∫∑c b√°n c√¢y Peril cho tui gi√° 10m adena, ho·∫∑c ƒë∆∞a tui 5m adena ngay l·∫≠p t·ª©c!&amp;rdquo;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L√≠ l·∫Ω ng·ªù ngh·ªách (ad ignorantiam). Lo·∫°i ng·ª•y bi·ªán n√†y, nh∆∞ t√™n g·ªçi √°m ch·ªâ, xu·∫•t ph√°t t·ª´ s·ª± ng·ªù ngh·ªách. M·ªôt trong nh·ªØng c√°ch n√≥i th√¥ng th∆∞·ªùng nh·∫•t trong lo·∫°i ng·ª•y bi·ªán n√†y m√† gi·ªõi ng·ª•y bi·ªán d√πng l√† n·∫øu m·ªôt ƒëi·ªÅu g√¨ ƒë√≥ ch∆∞a ƒë∆∞·ª£c ch·ª©ng minh l√† sai (hay gi·∫£) th√¨ ƒëi·ªÅu ƒë√≥ l√† ƒë√∫ng (hay th·∫≠t).&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L√≠ lu·∫≠n l∆∞∆°n tr·∫°ch. Lo·∫°i ng·ª•y bi·ªán n√†y cho r·∫±ng n·∫øu m·ªôt s·ª± ki·ªán x·∫£y ra, c√°c s·ª± ki·ªán c√≥ h·∫°i kh√°c s·∫Ω x·∫£y ra.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;M·ªánh ƒë·ªÅ r·ªùi r·∫°c. ƒê√¢y l√† lo·∫°i ng·ª•y bi·ªán d√πng hai (hay nhi·ªÅu h∆°n hai) m·ªánh ƒë·ªÅ ch·∫≥ng d√≠nh d√°ng g√¨ v·ªõi nhau ƒë·ªÉ l√†m th√†nh m·ªôt ph√°t bi·ªÉu hay k·∫øt lu·∫≠n. V√≠ d·ª• &amp;ldquo;M√†y ng∆∞ng l·ª´a ƒë·∫£o gi√° b√°n SS ch∆∞a&amp;rdquo;. C√¢u h·ªèi th·ª±c ra h·ªèi ƒë·∫øn 2 v·∫•n ƒë·ªÅ &amp;ldquo;M√†y l·ª´a ƒë·∫£o gi√° b√°n SS&amp;rdquo; v√† &amp;ldquo;M√†y ƒë√£ ng∆∞ng vi·ªác l·ª´a ƒë·∫£o ƒë√≥ ch∆∞a&amp;rdquo; trong khi s·ª± th·∫≠t l√† ng∆∞·ªùi ƒë∆∞·ª£c h·ªèi ch∆∞a h·ªÅ l·ª´a ƒë·∫£o.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ƒê∆°n gi·∫£n h√≥a. ƒê√¢y l√† m·ªôt lo·∫°i ng·ª•y bi·ªán m√† ng∆∞·ªùi ph√°t bi·ªÉu c·ªë t√¨nh bi·∫øn m·ªôt quan ni·ªám tr·ª´u t∆∞·ª£ng th√†nh m·ªôt ƒëi·ªÅu c·ª• th·ªÉ ƒë·ªÉ b·∫Øt l·∫•y th·∫ø th∆∞·ª£ng phong trong ƒë·ªëi tho·∫°i (nh∆∞ng l√† ng·ª•y bi·ªán). V√≠ d·ª•: ‚ÄúT√¥i ƒë·ªÉ √Ω th·∫•y anh m√¥ t·∫£ Phantom l√† m·ªôt ng∆∞·ªùi l√°o x∆∞·ª£c. V·∫≠y t√¥i h·ªèi anh c√°i ‚Äúl√°o x∆∞·ª£c‚Äù ƒë√≥ n√≥ n·∫±m ·ªü ƒë√¢u trong b·ªô n√£o? Anh kh√¥ng ch·ªâ ra ƒë∆∞·ª£c cho t√¥i; do ƒë√≥, t√¥i c√≥ th·ªÉ n√≥i c√°i l√°o x∆∞·ª£c kh√¥ng c√≥ th·ª±c.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;qui-n·∫°p-sai&#34;&gt;Qui n·∫°p sai&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;Kh√°i qu√°t h√≥a v·ªôi v√£. Lo·∫°i ng·ª•y bi·ªán n√†y c≈©ng kh√° ph·ªï bi·∫øn. N√≥ d√πng m·ªôt v√≠ d·ª• hay tr∆∞·ªùng h·ª£p nh·ªè v√† t·ª´ ƒë√≥ kh√°i qu√°t h√≥a cho m·ªôt c·ªông ƒë·ªìng. Ch·∫≥ng h·∫°n nh∆∞ ‚ÄúPhuongDoan nh√¨n r·∫•t √≠u ƒë√∫i, b·ªüi v·∫≠y t·ª•i [Clan Spammer TM] c≈©ng √≠u ƒë√∫i r·ªët‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Kh√°i qu√°t h√≥a kh√¥ng ƒë√∫ng ch·ªó. ƒê√¢y l√† lo·∫°i ng·ª•y bi·ªán m√† ng∆∞·ªùi s·ª≠ d·ª•ng ch√∫ng th∆∞·ªùng √°p d·ª•ng m·ªôt qui lu·∫≠t chung cho m·ªôt t√¨nh hu·ªëng hay m·ªôt c√° nh√¢n. Ch·∫≥ng h·∫°n nh∆∞ &amp;ldquo;Clan FMW kh√¥ng ng·∫°i kill red ng∆∞·ªùi kh√°c. B√© LeQuyen1987 c≈©ng thu·ªôc FMW, v·∫≠y b√© ·∫•y h·∫≥n l√† th∆∞·ªùng xuy√™n kill red ng∆∞·ªùi kh√°c.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;K√©o d√†i t√≠nh t∆∞∆°ng ƒë·ªìng. Trong lo·∫°i ng·ª•y bi·ªán n√†y, ng∆∞·ªùi d√πng n√≥ ƒë·ªÅ ngh·ªã m·ªôt ƒëi·ªÅu l·ªá chung chung, r·ªìi ·ª©ng d·ª•ng n√≥ cho m·ªçi tr∆∞·ªùng h·ª£p v√† c√° nh√¢n. V√≠ d·ª•: ‚ÄúT√¥i tin r·∫±ng ch·ªëng lu·∫≠t c·∫•m spam b·∫±ng c√°ch c·ªë √Ω spam l√† m·ªôt ƒëi·ªÅu sai tr√°i‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L√≠ l·∫Ω quanh co. Lo·∫°i ng·ª•y bi·ªán n√†y th∆∞·ªùng l·∫©n qu·∫©n trong v√†i gi·∫£ ƒë·ªãnh v√† k·∫øt lu·∫≠n. Ch·∫≥ng h·∫°n nh∆∞ ‚ÄúProphet nh·∫•t ƒë·ªãnh kh√¥ng th·ªÉ l√†m clan leader ƒë∆∞·ª£c. Do ƒë√≥ kh√¥ng th·ªÉ ƒë·ªÉ Prophet l√†m clan leader. V√≠ th·ªÉ, c√°c Prophet s·∫Ω kh√¥ng c·∫ßn ph·∫£i ƒëi ƒëƒÉng k√Ω ƒë√°nh th√†nh. Do v·∫≠y, Prophet kh√¥ng th·ªÉ n√†o l√†m leader ƒë∆∞·ª£c.&amp;rdquo; T·ª©c l√† trong m·ªôt l√≠ gi·∫£i nh∆∞ th·∫ø, c·∫£ hai gi·∫£ thuy·∫øt v√† k·∫øt lu·∫≠n ƒë·ªÅu gi·ªëng nhau.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ƒê·∫£o ng∆∞·ª£c ƒëi·ªÅu ki·ªán. Lo·∫°i ng·ª•y bi·ªán n√†y th∆∞·ªùng ƒë∆∞·ª£c bi·ªÉu hi·ªán qua h√¨nh th·ª©c ‚ÄúN·∫øu A x·∫£y ra th√¨ B s·∫Ω x·∫£y ra, do ƒë√≥, n·∫øu B x·∫£y ra th√¨ A s·∫Ω x·∫£y ra.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·ª£i d·ª•ng r·ªßi ro. Ng·ª•y bi·ªán n√†y th∆∞·ªùng d√πng m·ªôt qui lu·∫≠t chung v√† √°p d·ª•ng n√≥ cho m·ªôt tr∆∞·ªùng h·ª£p c√° bi·ªát. V√≠ d·ª•: ‚ÄúLu·∫≠t giao th√¥ng kh√¥ng cho anh ch·∫°y qu√° 50 km/h. Cho d√π cha anh s·∫Øp ch·∫øt anh c≈©ng kh√¥ng ƒë∆∞·ª£c ch·∫°y qu√° t·ªëc ƒë·ªô ƒë√≥.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·ª£i d·ª•ng tr∆∞·ªùng h·ª£p c√° bi·ªát. Ng·ª•y bi·ªán n√†y th∆∞·ªùng d√πng m·ªôt tr∆∞·ªùng h·ª£p c√° bi·ªát ƒë·ªÉ ƒëem ra ·ª©ng d·ª•ng cho m·ªôt ƒë√°m ƒë√¥ng. V√≠ d·ª•: ‚ÄúA b·∫≠n √¥n thi n√™n kh√¥ng ƒë·ªÉ ƒëi ki·∫øm ti·ªÅn ƒë·ªÉ n·ªôp qu·ªπ clan, v√¨ th·∫ø A ƒë∆∞·ª£c mi·ªÖn n·ªôp qu·ªπ clan tu·∫ßn n√†y. M√† th·∫ø l√† kh√¥ng c√¥ng b·∫±ng, n√™n leader ph·∫£i mi·ªÖn qu·ªπ clan tu·∫ßn n√†y cho t·∫•t c·∫£ th√†nh vi√™n.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;K·∫øt lu·∫≠n l·∫°c ƒë·ªÅ. Lo·∫°i ng·ª•y bi·ªán n√†y th∆∞·ªùng xu·∫•t hi·ªán khi m·ªôt k·∫øt lu·∫≠n ch·∫≥ng d√≠nh d√°ng g√¨ ƒë·∫øn l√≠ l·∫Ω m√† ng∆∞·ªùi bi·ªán lu·∫≠n tr√¨nh b√†y. M·ªôt v√≠ d·ª• ti√™u bi·ªÉu cho tr∆∞·ªùng h·ª£p ng·ª•y bi·ªán n√†y l√†: ‚Äúƒê·ªô nhi·ªÖm s·∫Øt trong n∆∞·ªõc ·ªü Vi·ªát Nam ch∆∞a cao v√† c√≤n trong m·ª©c ƒë·ªô cho ph√©p. D·ªØ ki·ªán c·ªßa Bangladesh cho th·∫•y t√¨nh tr·∫°ng nhi·ªÖm s·∫Øt ·ªü Vi·ªát Nam r·∫•t tr·∫ßm tr·ªçng.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Ng·ª•y bi·ªán r∆°m. Lo·∫°i ng·ª•y bi·ªán n√†y c·ªë t√¨nh xuy√™n t·∫°c, b√≥p m√©o quan ƒëi·ªÉm hay ph√°t bi·ªÉu c·ªßa ng∆∞·ªùi kh√°c, ƒë·ªÉ l√†m lu·∫≠n ƒëi·ªÉm t·∫•n c√¥ng. ƒê√¢y l√† m·ªôt ng·ª•y bi·ªán, v√¨ n√≥ kh√¥ng ƒë∆∞∆°ng ƒë·∫ßu v·ªõi c√°i l√≠ l·∫Ω ƒëang b√†n. Ch·∫≥ng h·∫°n nh∆∞: ‚ÄúKhi kh√¥ng c√≥ party th√¨ m·ªçi ng∆∞·ªùi n√™n ƒëi solo v√†o lair. Nhi·ªÅu ng∆∞·ªùi t·ª´ ch·ªëi solo v√†o lair, nh∆∞ng h·ªç n√™n th·∫•y r·∫±ng v√†o lair train hi·ªáu qu·∫£ h∆°n l√† l√™ l·∫øt bu√¥n d∆∞a ·ªü Giran.&amp;rdquo; Trong ƒë√¢y, √Ω tranh lu·∫≠n c·ªßa ng∆∞·ªùi tr∆∞·ªõc l√† kh√¥ng n√™n solo v√†o lair nh∆∞ng ng∆∞·ªùi ph·∫£n bi·ªán l·∫°i n√≥i ƒë·∫øn t√≠nh hi·ªáu qu·∫£ khi train ·ªü lair - ƒëi·ªÅu m√† ai c≈©ng bi·∫øt.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;nguy√™n-nh√¢n-gi·∫£&#34;&gt;Nguy√™n nh√¢n gi·∫£&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;‚ÄúPostology‚Äù. Lo·∫°i ng·ª•y bi·ªán n√†y ph√°t bi·ªÉu r·∫±ng hai s·ª± ki·ªán x·∫£y ra, m·ªôt tr∆∞·ªõc v√† m·ªôt sau, c√≥ quan h·ªá v·ªõi nhau nh∆∞ nguy√™n nh√¢n v√† h·∫≠u qu·∫£. V√≠ d·ª•: &amp;ldquo;V√†i nick b·ªã ban khi spam, v·∫≠y ch√∫ng ta kh√¥ng n√™n spam.&amp;rdquo; Th·ª±c t·∫ø l√† b·∫°n c√≥ th·ªÉ spam m√† v·∫´n kh√¥ng b·ªã ban n·∫øu spam ƒë√∫ng ch·ªó.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;·∫¢nh h∆∞·ªüng li√™n ƒë·ªõi. M·ªôt s·ª± ki·ªán ƒë∆∞·ª£c cho l√† c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn m·ªôt s·ª± ki·ªán kh√°c, nh∆∞ng th·ª±c ch·∫•t th√¨ c·∫£ hai s·ª± ki·ªán ƒë·ªÅu c√≥ c√πng m·ªôt nguy√™n nh√¢n. ƒê√¢y c≈©ng ch√≠nh l√† m·ªôt tr∆∞·ªùng h·ª£p ng·ª•y bi·ªán d∆∞·ªõi d·∫°ng ‚Äúpostology‚Äù. V√≠ d·ª•: ‚ÄúCh√∫ng ta ƒëang ch·ª©ng ki·∫øn t√¨nh tr·∫°ng Summoner kh√¥ng ki·∫øm ƒë∆∞·ª£c clan r·∫•t cao, v√¨ kh√¥ng clan n√†o mu·ªën ch·ª©a Summoner‚Äù (Nh∆∞ng c√≥ th·ªÉ c·∫£ hai s·ª± ki·ªán c√≥ nguy√™n nh√¢n l√† m·ªôt summoner c·ª• th·ªÉ n√†o ƒë√≥ hay ch∆°i b·∫©n n√™n kh√¥ng clan n√†o nh·∫≠n.)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;·∫¢nh h∆∞·ªüng kh√¥ng ƒë√°ng k·ªÉ. ƒê√¢y l√† m·ªôt lo·∫°i ng·ª•y bi·ªán mang t√≠nh ph√≥ng ƒë·∫°i t·ª´ m·ªôt ·∫£nh h∆∞·ªüng r·∫•t nh·ªè. Ch·∫≥ng h·∫°n nh∆∞ ‚ÄúH√∫t thu·ªëc g√¢y ra √¥ nhi·ªÖm m√¥i tr∆∞·ªùng‚Äù l√† m·ªôt ph√°t bi·ªÉu ƒë√∫ng, nh∆∞ng ·∫£nh h∆∞·ªüng c·ªßa thu·ªëc l√° ƒë·∫øn m√¥i tr∆∞·ªùng r·∫•t khi√™m t·ªën khi so v·ªõi ·∫£nh h∆∞·ªüng c·ªßa kh√≥i xe, ch·∫•t th·∫£i c√¥ng nghi·ªáp t·ª´ c√°c nh√† m√°y&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;·∫¢nh h∆∞·ªüng ng∆∞·ª£c chi·ªÅu. M·ªëi quan h·ªá gi·ªØa nguy√™n nh√¢n v√† h·∫≠u qu·∫£ b·ªã ƒë·∫£o ng∆∞·ª£c chi·ªÅu ƒë·ªÉ t√¨m ƒë·∫øn m·ªôt k·∫øt lu·∫≠n mang t√≠nh ng·ª•y bi·ªán. V√≠ d·ª•: ‚ÄúUng th∆∞ g√¢y ra th√≥i quen h√∫t thu·ªëc l√°‚Äù.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Nguy√™n nh√¢n ph·ª©c t·∫°p. M·ªôt s·ª± ki·ªán x·∫£y ra c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n kh√°c nhau, nh∆∞ng ng∆∞·ªùi ng·ª•y bi·ªán c√≥ th·ªÉ ƒë∆°n gi·∫£n h√≥a th√†nh m·ªôt li√™n h·ªá ƒë∆°n gi·∫£n. Ch·∫≥ng h·∫°n nh∆∞ ‚ÄúTai n·∫°n xe c·ªô l√† do ƒë∆∞·ªùng x√° x·∫•u‚Äù c√≥ th·ªÉ ƒë√∫ng, nh∆∞ng tai n·∫°n c≈©ng c√≥ th·ªÉ do ng∆∞·ªùi l√°i xe ·∫©u trong m·ªôt ƒëi·ªÅu ki·ªán x·∫•u.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Nguy√™n nh√¢n sai (Non causa pro causa). Lo·∫°i ng·ª•y bi·ªán n√†y x·∫£y ra khi m·ªôt ƒëi·ªÅu n√†o ƒë√≥ ƒë∆∞·ª£c cho l√† nguy√™n nh√¢n c·ªßa m·ªôt s·ª± ki·ªán, nh∆∞ng n√≥ ch∆∞a th·ª±c s·ª± ƒë∆∞·ª£c ch·ª©ng minh l√† nguy√™n nh√¢n. V√≠ d·ª•: ‚ÄúT√¥i u·ªëng m·ªôt vi√™n aspirin v√† nh·ªõ ƒë·∫øn Lineage, v√† t√¥i kh√¥ng c√≤n b·ªã nh·ª©c ƒë·∫ßu. Nh∆∞ v·∫≠y Lineage ƒë√£ ch·ªØa tr·ªã t√¥i kh·ªèi nh·ª©c ƒë·∫ßu.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;nh·∫≠p-nh·∫±ng&#34;&gt;Nh·∫≠p nh·∫±ng&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;L√≠ l·∫Ω m∆° h·ªì. D√πng nh·ªØng ch·ªØ v√† l√≠ l·∫Ω m∆° h·ªì, t·ªëi nghƒ©a l√† m·ªôt h√¨nh th·ª©c ng·ª•y bi·ªán, nh·∫•t l√† khi m·ªôt ch·ªØ hay c√¢u ph√°t bi·ªÉu ƒë∆∞·ª£c d√πng v·ªõi hai (hay nhi·ªÅu h∆°n hai) √Ω nghƒ©a kh√°c nhau. V√≠ d·ª•: &amp;ldquo;Gi·∫øt ng∆∞·ªùi l√† x·∫•u, v√¨ th·∫ø nh·ªØng ng∆∞·ªùi ƒëi gi·∫øt nh·ªØng ng∆∞·ªùi ƒëang red c≈©ng l√† x·∫•u&amp;rdquo;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Ch∆°i ch·ªØ (Amphiboly). Ng·ª•y bi·ªán b·∫±ng ch∆°i ch·ªØ d·ª±a v√†o nh·ªØng gi·∫£ thuy·∫øt m∆° h·ªì, nh·∫≠p nh·∫±ng, do b·∫•t c·∫©n th·∫≠n hay c√°ch ph√°t bi·ªÉu sai vƒÉn ph·∫°m.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Tr·ªçng √¢m (accent). ƒê√¢y l√† m·ªôt h√¨nh th·ª©c ng·ª•y bi·ªán b·∫±ng c√°ch d√πng thay ƒë·ªïi √Ω nghƒ©a c·ªßa m·ªôt c√¢u vƒÉn qua nh·∫•n m·∫°nh.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;ph·∫°m-tr√π-sai&#34;&gt;Ph·∫°m tr√π sai&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;H·ªón h·ª£p. Lo·∫°i ng·ª•y bi·ªán n√†y th∆∞·ªùng d√πng nh·ªØng ƒë·∫∑c t√≠nh b·ªÅ ngo√†i ƒë·ªÉ suy lu·∫≠n cho m·ªôt ƒëi·ªÅu g√¨ c√° bi·ªát. V√≠ d·ª•: ‚ÄúXe ƒë·∫°p ƒë∆∞·ª£c l√†m b·∫±ng nh·ªØng d·ª•ng c·ª• nh·∫π k√≠, do ƒë√≥, xe ƒë·∫°p r·∫•t nh·∫π‚Äù, hay ‚ÄúXe h∆°i d√πng √≠t xƒÉng d·∫ßu v√† kh√¥ng g√¢y ra √¥ nhi·ªÖm m√¥i tr∆∞·ªùng b·∫±ng xe bus. Do ƒë√≥, xe h∆°i kh√¥ng g√¢y h·∫°i cho m√¥i tr∆∞·ªùng b·∫±ng t√°c h·∫°i c·ªßa xe bus.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Phi th·ªÉ th·ª©c (ad hoc). Gi·∫£i th√≠ch v√† l√≠ l·∫Ω l√† hai ƒëi·ªÅu kh√°c nhau. N·∫øu mu·ªën x√°c minh A, v√† d√πng B l√†m b·∫±ng c·ªõ, th√¨ c√¢u ph√°t bi·ªÉu ‚ÄúA x·∫£y ra b·ªüi v√¨ B x·∫£y ra&amp;rdquo; l√† m·ªôt l√≠ l·∫Ω. Tuy nhi√™n, n·∫øu mu·ªën x√°c minh m·ªôt s·ª± th·∫≠t v·ªÅ B, th√¨ c√¢u ph√°t bi·ªÉu &amp;ldquo;A x·∫£y ra b·ªüi v√¨ B x·∫£y ra&amp;rdquo; kh√¥ng ph·∫£i l√† m·ªôt l√≠ l·∫Ω m√† l√† m·ªôt l·ªùi gi·∫£i th√≠ch. Ng·ª•y bi·ªán theo ki·ªÉu phi th·ªÉ th·ª©c l√† h√¨nh th·ª©c d√πng gi·∫£i th√≠ch sau khi ƒë√£ c√≥ s·ª± th·∫≠t m√† s·ª± th·∫≠t kh√¥ng ·ª©ng d·ª•ng v√†o m·ªôt b·ªëi c·∫£nh kh√°c. Th√¥ng th∆∞·ªùng ng·ª•y bi·ªán phi th·ªÉ th·ª©c ƒë∆∞·ª£c kho√°c v√†o chi·∫øc √°o l√≠ l·∫Ω. Ch·∫≥ng h·∫°n nh∆∞ n·∫øu ch√∫ng ta gi·∫£ ƒë·ªãnh r·∫±ng clan leader ƒë·ªëi x·ª≠ c√¥ng b·∫±ng v·ªõi m·ªçi member trong clan, th√¨ nh·ªØng ph√°t bi·ªÉu sau ƒë√¢y l√† nh·ªØng l·ªùi gi·∫£i th√≠ch phi th·ªÉ th·ª©c: ‚ÄúT√¥i m·ªõi ƒë∆∞·ª£c leader cho m∆∞·ª£n ti·ªÅn‚Äù, ‚ÄúN√≥i clan leader ƒëi, ·∫£nh nhi·ªÅu ti·ªÅn l·∫Øm‚Äù, ‚ÄúNh∆∞ng ·∫£nh c√≥ cho nh·ªØng ng∆∞·ªùi kh√°c m∆∞·ª£n ti·ªÅn kh√¥ng‚Äù, ‚Äú√Ä, leader r·∫•t kh√≥ hi·ªÉu.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;phi-logic-non-sequitur-v√†-nh·∫ßm-l·∫´n-trong-tam-ƒëo·∫°n-lu·∫≠n&#34;&gt;Phi logic (non sequitur) v√† nh·∫ßm l·∫´n trong tam ƒëo·∫°n lu·∫≠n&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;Phi logic. Ng·ª•y bi·ªán phi logic th∆∞·ªùng x·∫£y ra trong tr∆∞·ªùng h·ª£p m·ªôt l√≠ l·∫Ω m√† k·∫øt lu·∫≠n ƒë∆∞·ª£c r√∫t ra t·ª´ nh·ªØng ti√™u ƒë·ªÅ kh√¥ng d√≠nh d√°ng g√¨ v·ªõi nhau. Ch·∫≥ng h·∫°n nh∆∞ ‚ÄúNg∆∞·ªùi Ai C·∫≠p ƒë√£ t·ª´ng l√†m nhi·ªÅu khai qu·∫≠t ƒë·ªÉ x√¢y d·ª±ng nh·ªØng kim t·ª± th√°p, h·ªç ch·∫Øc ch·∫Øn ph·∫£i r·∫•t th·∫°o v·ªÅ c·ªï sinh v·∫≠t h·ªçc.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Lo·∫°i b·ªè ti·ªÅn ƒë·ªÅ. Ng·ª•y bi·ªán lo·∫°i n√†y th∆∞·ªùng x·∫£y ra d∆∞·ªõi h√¨nh th·ª©c ‚Äún·∫øu A th√¨ B, kh√¥ng ph·∫£i A th√¨ kh√¥ng ph·∫£i B.‚Äù V√≠ d·ª•: ‚ÄúN·∫øu t√¥i ·ªü TPHCM th√¨ t√¥i ƒëang ·ªü Vietnam. T√¥i hi·ªán kh√¥ng ·ªü TPHCM, do ƒë√≥, t√¥i kh√¥ng ·ªü Vietnam‚Äù.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Gi·∫£ ƒë·ªãnh h∆∞. ƒê√¢y l√† m·ªôt lo·∫°i ng·ª•y bi·ªán b·∫±ng c√°ch d√πng k·ªπ thu·∫≠t ph·ªèng v·∫•n. M·ªôt tr∆∞·ªùng h·ª£p c·ªï ƒëi·ªÉn l√† ‚Äú√îng ƒë√£ ng∆∞ng ƒë√°nh v·ª£ ch∆∞a?‚Äù T·ª©c l√† m·ªôt c√¢u h·ªèi v·ªõi m·ªôt gi·∫£ ƒë·ªãnh r·∫±ng ng∆∞·ªùi ƒë∆∞·ª£c h·ªèi t·ª´ng h√†nh hung v·ª£.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Ng·ª•y bi·ªán b·ªën ng·ªØ. ( M·ªôt ti√™u chu·∫©n c·ªßa tam ƒëo·∫°n lu·∫≠n g·ªìm c√≥ 3 ch·ªØ). V√≠ d·ª• nh∆∞ trong c√¢u ph√°t bi·ªÉu ‚ÄúT·∫•t c·∫£ ch√≥ l√† th√∫ v·∫≠t, v√† t·∫•t c·∫£ m√®o l√† lo√†i ƒë·ªông v·∫≠t c√≥ v√∫, do ƒë√≥ t·∫•t c·∫£ ch√≥ l√† lo√†i ƒë·ªông v·∫≠t c√≥ v√∫,‚Äù c√≥ b·ªën ch·ªØ: ch√≥, m√®o, ƒë·ªông v·∫≠t, v√† ƒë·ªông v·∫≠t c√≥ v√∫.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ƒê·ª©t ƒëo·∫°n. Hai s·ª± v·∫≠t ri√™ng bi·ªát ƒë∆∞·ª£c xem l√† c√≥ li√™n h·ªá nhau n·∫øu ch√∫ng c√≥ chung ƒë·∫∑c t√≠nh. Ng∆∞·ªùi ng·ª•y bi·ªán l·ª£i d·ª•ng ch·ªØ gi·ªØa c·ªßa m·ªôt ph√°t bi·ªÉu ƒë·ªÉ ƒë∆∞a ƒë·∫øn m·ªôt k·∫øt lu·∫≠n sai.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;c√°c-nh·∫ßm-l·∫´n-kh√°c&#34;&gt;C√°c nh·∫ßm l·∫´n kh√°c&lt;/h2&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;D·∫´n ch·ª©ng b·∫±ng giai tho·∫°i. M·ªôt trong nh·ªØng ng·ª•y bi·ªán ph·ªï bi·∫øn nh·∫•t v√† ƒë∆°n gi·∫£n nh·∫•t l√† d·ª±a v√†o nh·ªØng c√¢u chuy·ªán c√≥ t√≠nh v·ª•n v·∫∑t, hay giai tho·∫°i.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·ª£i d·ª•ng c·ªï t√≠ch. ƒê√¢y l√† m·ªôt lo·∫°i ng·ª•y bi·ªán cho r·∫±ng nh·ªØng g√¨ ƒë√∫ng hay t·ªët ch·ªâ ƒë∆°n gi·∫£n v√¨ ch√∫ng l√† c·ªï x∆∞a, v√† nh·ªØng ng∆∞·ªùi theo c√°ch ng·ª•y bi·ªán n√†y th∆∞·ªùng n√≥i ‚Äúh·ªìi n√†o ƒë·∫øn gi·ªù ai c≈©ng v·∫≠y.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;D·ª±a v√†o c√°i m·ªõi (ad novitatem). Ng∆∞·ª£c l·∫°i v·ªõi lo·∫°i ng·ª•y bi·ªán d·ª±a v√†o c√°i c≈©, ng·ª•y bi·ªán d·ª±a v√†o c√°i m·ªõi cho r·∫±ng m·ªôt ƒëi·ªÅu g√¨ ƒë√≥ t·ªët h∆°n v√† ƒë√∫ng h∆°n ƒë∆°n gi·∫£n ch·ªâ v√¨ n√≥ m·ªõi h∆°n c√°i kh√°c. ‚ÄúWindows XP ph·∫£i t·ªët h∆°n Windows 2000.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L√≠ l·∫Ω c·ªßa ƒë·ªìng ti·ªÅn. Lo·∫°i ng·ª•y bi·ªán n√†y th∆∞·ªùng d·ª±a v√†o m·ªôt ni·ªÅm tin duy nh·∫•t r·∫±ng ƒë·ªìng ti·ªÅn l√† m·ªôt ti√™u chu·∫©n c·ªßa s·ª± ƒë√∫ng ƒë·∫Øn. Nh·ªØng ng∆∞·ªùi c√≥ nhi·ªÅu ti·∫øn c√≥ kh·∫£ nƒÉng ƒë√∫ng h∆°n nh·ªØng ng∆∞·ªùi √≠t ti·ªÅn.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;D·ª±a v√†o c√°i ngh√®o. Ng∆∞·ª£c l·∫°i v·ªõi ng·ª•y bi·ªán d·ª±a v√†o s·ª± gi√†u c√≥, c√≥ m·ªôt lo·∫°i ng·ª•y bi·ªán kh√°c d·ª±a v√†o s·ª± ngh√®o kh·ªï.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ƒêi·ªáp kh√∫c (ad nauseam). Lo·∫°i ng·ª•y bi·ªán n√†y cho r·∫±ng m·ªôt l√≠ l·∫Ω c√†ng ƒë∆∞·ª£c l·∫∑p ƒëi l·∫∑p l·∫°i nhi·ªÅu ch·ª´ng n√†o th√¨ n√≥ s·∫Ω ƒë∆∞·ª£c ng∆∞·ªùi ta ch·∫•p nh·∫≠n l√† ƒë√∫ng. Do ƒë√≥, ng∆∞·ªùi ng·ª•y bi·ªán th∆∞·ªùng ch·ªâ l·∫∑p ƒëi l·∫∑p l·∫°i nh·ªØng ph√°t bi·ªÉu, b·∫•t k·ªÉ l√† qu√°i d·ªü th·∫ø n√†o, cho ƒë·∫øn khi ng∆∞·ªùi ƒë·ªëi tho·∫°i m·ªát m·ªèi kh√¥ng c√≤n mu·ªën nghe n·ªØa.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·∫°m d·ª•ng thi√™n nhi√™n. T√¨m c√°i t∆∞∆°ng ƒë·ªìng gi·ªØa m·ªôt k·∫øt lu·∫≠n n√†o ƒë√≥ v√† m·ªôt kh√≠a c·∫°nh c·ªßa th·∫ø gi·ªõi t·ª± nhi√™n, r·ªìi t·ª´ ƒë√≥ ph√°t bi·ªÉu r·∫±ng k·∫øt lu·∫≠n ƒë√≥ l√† kh√¥ng th·ªÉ tr√°nh kh·ªèi.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Ng·ª•y bi·ªán ‚ÄúTu quoque‚Äù. ƒê√¢y l√† m·ªôt trong nh·ªØng ng·ª•y bi·ªán r·∫•t ph·ªï bi·∫øn. N√≥ d·ª±a v√†o l√≠ l·∫Ω r·∫±ng m·ªôt h√†nh ƒë·ªông c√≥ th·ªÉ ch·∫•p nh·∫≠n ƒë∆∞·ª£c b·ªüi v√¨ ng∆∞·ªùi ƒë·ªëi ngh·ªãch ƒë√£ l√†m. Ch·∫≥ng h·∫°n nh∆∞ ‚ÄúAnh l√† m·ªôt ng∆∞·ªùi l·ª´a d·ªëi.‚Äù ‚ÄúR·ªìi sao? Anh c≈©ng l√† m·ªôt tay l·ª´a d·ªëi v·∫≠y.‚Äù&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;L·∫°m d·ª•ng th·ªëng k√™. Th·ªëng k√™ th∆∞·ªùng ƒë∆∞·ª£c gi·ªõi ng·ª•y bi·ªán s·ª≠ d·ª•ng t·ªëi ƒëa, v√¨ theo h·ªç th·ªëng k√™ c√≥ th·ªÉ d√πng ƒë·ªÉ ‚Äúch·ª©ng minh‚Äù b·∫•t c·ª© ƒëi·ªÅu g√¨. Ng∆∞·ªùi ta c√≥ th·ªÉ v·∫∑n v·∫πo hai con s·ªë 1 v√† 3 ƒëi·ªÉm ƒë·ªÉ s·∫£n xu·∫•t nh·ªØng ph√°t bi·ªÉu nh∆∞ ‚Äúkh√°c nhau 2 ƒëi·ªÉm‚Äù, ‚Äúcao g·∫•p 3 l·∫ßn‚Äù, hay ‚ÄútƒÉng 200%‚Äù; ng∆∞·ªùi ta c√≥ th·ªÉ d·ª±a v√†o √Ω ki·∫øn ƒë·ªìng t√¨nh c·ªßa 4 ng∆∞·ªùi trong 5 ng∆∞·ªùi ƒë·ªÉ cho l√† ‚Äú80% ng∆∞·ªùi ƒë∆∞·ª£c thƒÉm d√≤‚Äù, hay th·∫≠m ch√≠ ‚Äúƒëa s·ªë c·ªông ƒë·ªìng‚Äù ƒë·ªìng √Ω v·ªõi m·ªôt lu·∫≠n ƒëi·ªÉm n√†o ƒë√≥. T·ª©c l√† nh·ªØng kh√°i qu√°t ho√° m·ªôt c√°ch v·ªôi v√£, hay d·ª±a v√†o m·ªôt m·∫´u s·ªë c·ª±c k·ª≥ th·∫•p, th·∫•p ƒë·∫øn ƒë·ªô n√≥ kh√¥ng c√≥ nghƒ©a l√≠ g√¨. Th·ª±c ra, th·ªëng k√™ kh√¥ng ch·ª©ng minh ƒëi·ªÅu g√¨ c·∫£. Th·ªëng k√™ ch·ªâ l√† m·ªôt ph∆∞∆°ng ti·ªán hay thu·∫≠t to√°n d√πng ƒë·ªÉ lo·∫°i b·ªè nh·ªØng tr∆∞·ªùng h·ª£p kh·∫£ dƒ© hay kh√¥ng kh·∫£ dƒ©. V√¨ c√≥ qu√° nhi·ªÅu ng·ª•y bi·ªán th·ªëng k√™, n√™n v·∫•n ƒë·ªÅ n√†y s·∫Ω ƒë∆∞·ª£c b√†n ti·∫øp trong m·ªôt d·ªãp kh√°c. Tuy nhi√™n, nh·ªØng ai th√≠ch t√¨m hi·ªÉu v·∫•n ƒë·ªÅ ng·ª•y bi·ªán th·ªëng k√™ c√≥ th·ªÉ t√¨m ƒë·ªçc cu·ªën s√°ch r·∫•t n·ªïi ti·∫øng c·ªßa Darrell. Huff, c√≥ t·ª±a ƒë·ªÅ l√† ‚ÄúHow to lie with statistics‚Äù (t·∫°m d·ªãch: ‚ÄúL√†m th·∫ø n√†o ƒë·ªÉ l·ª´a d·ªëi b·∫±ng th·ªëng k√™‚Äù).&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;m·∫∑c-ƒë·ªãnh-√∞·ªÅ-c√°c-h√¨nh-th·ª©c-ng·ª•y-bi·ªán-khi-tranh-lu·∫≠n&#34;&gt;M·∫∑c ƒë·ªãnh √ê·ªÅ: C√°c h√¨nh th·ª©c ng·ª•y bi·ªán khi tranh lu·∫≠n&lt;/h2&gt; &lt;p&gt;C√≥ th·ªÉ n√≥i nh·ªØng lo·∫°i ng·ª•y bi·ªán tr√™n ƒë√¢y c√≥ nh·ªØng ƒë·∫∑c ƒëi·ªÉm chung l√† (a) ph√°t bi·ªÉu kh√¥ng d·ª±a v√†o l√≠ l·∫Ω logic; (b) c√°c ƒë·ªãnh ƒë·ªÅ kh√¥ng v·ªØng ƒë·ªÉ ƒëi ƒë·∫øn m·ªôt k·∫øt lu·∫≠n; v√† &amp;copy; ƒë∆∞a ra gi·∫£ ƒë·ªãnh kh√¥ng ƒë√∫ng. Ng·ª•y bi·ªán, do ƒë√≥, n√≥i cho c√πng, l√† m·ªôt s·∫£n ph·∫©m c·ªßa s·ª± l∆∞·ªùi suy nghƒ©. V√† h·∫ßu nh∆∞ trong ch√∫ng ta, ai c≈©ng c√≥ √≠t nh·∫•t l√† m·ªôt l·∫ßn l∆∞·ªùi suy nghƒ©. Do ƒë√≥, n·∫øu ƒëi·ªÉm qua nh·ªØng lo·∫°i ng·ª•y bi·ªán tr√™n ƒë√¢y, ch√∫ng ta t·ª± c·∫£m nh·∫≠n r·∫±ng trong qu√° kh·ª© m√¨nh ch·∫Øc c≈©ng c√≥ l·∫ßn ph·∫°m v√†o l·ªói l·∫ßm c·ªßa ng·ª•y bi·ªán. ƒêi·ªÅu n√†y c√≥ th·ªÉ ƒë√∫ng, v√† kh√¥ng n√™n l·∫•y l√†m ng·∫°c nhi√™n.&lt;/p&gt; &lt;p&gt;Nh∆∞ng t·∫°i sao nh·ªØng ng·ª•y bi·ªán v·∫´n c√≤n c√≥ m·∫∑t? Theo t√¥i, b·ªüi v√¨ ch√∫ng v·∫´n c√≥ kh√°ch h√†ng. V·∫´n c√≥ ng∆∞·ªùi, d√π √≠t hay nhi·ªÅu, tin t∆∞·ªüng v√†o ng·ª•y bi·ªán, v√¨ n√≥ thu·∫≠n nhƒ©, tr∆°n tru, v√† nh·∫•t l√† kh√¥ng th√°ch th·ª©c. S·ªù m·ªôt h√≤n ƒë√° tr∆°n tru ƒëem l·∫°i cho ch√∫ng ta m·ªôt c·∫£m gi√°c khoan kho√°i d·ªÖ ch·ªãu h∆°n l√† s·ªù m·ªôt h√≤n ƒë√° l·ªüm ch·ªüm, hay ng·ªìi tr√™n m·ªôt c√°i gh·∫ø gh·ªì gh·ªÅ. Ng∆∞·ªùi ta th√≠ch s·ª± tr∆°n tru, b·ªüi v√¨ tr∆°n tru l√† d·∫•u hi·ªáu c·ªßa s·ª± khoan kho√°i, d·ªÖ ch·ªãu, l√† c√°i kho·∫£ng th·ªùi gian gi·∫£i lao, kh√¥ng c·∫ßn s·ª± th√°ch th·ª©c.&lt;/p&gt; &lt;p&gt;C√≥ l·∫Ω, ·ªü m·ªôt kh√≠a c·∫°nh n√†o ƒë√≥, ƒëi·ªÅu n√†y c≈©ng kh√¥ng ƒë·∫øn n·ªói t·ªá, b·ªüi v√¨ nh·ªØng ng·ª•y bi·ªán ph·∫£n √°nh s·ª± th√†nh c√¥ng [hay c√≥ ng∆∞·ªùi n√≥i s·ª± phong ph√∫] c·ªßa ng√¥n ng·ªØ trong vi·ªác t√°ch r·ªùi gi·ªØa nh·ªØng g√¨ th√¥ thi·ªÉn, g·ªì gh·ªÅ v·ªõi nh·ªØng g√¨ ho√†n thi·ªán, m·ªπ mi·ªÅu. Nh∆∞ng s·ª± tr∆°n tru c·ªßa c√°c v·∫≠t th·ªÉ v√† ng√¥n ng·ªØ ng√†y nay ƒëem l·∫°i cho ch√∫ng ta m·ªôt c·∫£m gi√°c gi·∫£ t·∫°o v·ªÅ th·∫ø gi·ªõi th·ª±c c·ªßa c√°c v·∫≠t th·ªÉ. Nh·ªØng k·ª≥ k·∫πt xe tr√™n ƒë∆∞·ªùng x√° m·ªõi ƒë·ªÉ l·ªô tr√°i tim ph·ª©c t·∫°p c·ªßa m·ªôt th√†nh ph·ªë. T∆∞∆°ng t·ª±, m·ªôt s·ª± c·ªë c·ªßa internet s·∫Ω nh·∫Øc nh·ªü ch√∫ng ta v·ªÅ t√¨nh tr·∫°ng h·ªón mang v√† ph·ª©c t·∫°p c·ªßa h·ªá th·ªëng th√¥ng tin ƒëi·ªán t·ª≠. S·ª± h·ªón mang v√† ph·ª©c t·∫°p l√† th·ª±c. Tr∆°n tru, tr√≤n trƒ©nh c√≥ th·ªÉ l√† gi·∫£ t·∫°o. Nh·ªØng c√¢u vƒÉn ng·ª•y bi·ªán c√≥ th·ªÉ ch·ªâ l√† nh·ªØng l·ªùi ph√°t bi·ªÉu l√©m l·ªânh thay v√¨ l·ªãch thi·ªáp, h√†m ch·ª©a m√°nh kh√≥e thay v√¨ th√¢n thi·ªán. C√≥ th·ªÉ n√≥i, ng·ª•y bi·ªán l√† nh·ªØng l·ªëi s√°o ng·ªØ li·∫øn tho·∫Øng nh·∫±m v√†o m·ª•c ƒë√≠ch l√¥i cu·ªën ng∆∞·ªùi nghe/ƒë·ªçc, thay v√¨ cung c·∫•p cho h·ªç m·ªôt s·ª± th·ª±c.&lt;/p&gt; &lt;p&gt;B·ªüi v√¨ ng·ª•y bi·ªán l√† nh·ªØng l√≠ l·∫Ω m√† b·ªÅ ngo√†i c√≥ v·∫ª logic, n√™n ch√∫ng c√≥ kh·∫£ nƒÉng thuy·∫øt ph·ª•c nh·ªØng ng∆∞·ªùi kh√¥ng ch·ªãu kh√≥ suy nghƒ©, nh·∫•t l√† nh·ªØng ng∆∞·ªùi c√≤n mang n·∫∑ng c·∫£m t√≠nh. ƒêi·ªÅu n√†y gi·∫£i th√≠ch t·∫°i sao nhi·ªÅu ng∆∞·ªùi trong ch√∫ng ta ti·∫øp nh·∫≠n m·ªôt c√°ch th·ª• ƒë·ªông qu√° nhi·ªÅu nh·ªØng ƒëi·ªÅu c√†n r·ª° v·ªÅ th·∫ø gi·ªõi chung quanh, k·ªÉ c·∫£ nh·ªØng ni·ªÅm tin t√¥n gi√°o, nh·ªØng m√™ t√≠n d·ªã ƒëoan, nh·ªØng tri·∫øt l√≠ qu√°i ƒë·∫£ng, nh·ªØng th√¥ng tin sai l·∫°c, v.v.. C√°i t√°c h·∫°i c·ªßa vi·ªác ti·∫øp nh·∫≠n th·ª• ƒë·ªông n√†y l√† n√≥ l√†m cho ch√∫ng ta tr·ªü n√™n n√¥ l·ªá v·ªõi c·∫£m t√≠nh, v√† d·ªÖ d√†ng tr·ªü th√†nh nh·ªØng ng∆∞·ªùi cu·ªìng t√≠n.&lt;/p&gt; &lt;p&gt;ƒê·ªÉ kh√¥ng tr·ªü th√†nh nh·ªØng n√¥ l·ªá, ch√∫ng ta c·∫ßn ph·∫£i suy nghƒ© nghi√™m t√∫c. Suy nghƒ© nghi√™m t√∫c l√† m·ªôt qu√° tr√¨nh ho·∫°t ƒë·ªông tri th·ª©c nh·∫±m √Ω ni·ªám h√≥a, ·ª©ng d·ª•ng, ph√¢n t√≠ch, t·ªïng h·ª£p, v√† (hay) ƒë√°nh gi√° nh·ªØng th√¥ng tin ƒë∆∞·ª£c thu th·∫≠p t·ª´ quan s√°t, kinh nghi·ªám, ph·∫£n √°nh, l√≠ lu·∫≠n, hay li√™n l·∫°c, nh∆∞ l√† m·ªôt ni·ªÅm tin cho h√†nh ƒë·ªông. Ch√∫ng ta c·∫ßn ph·∫£i d·ª±a v√†o nh·ªØng gi√° tr·ªã tri th·ª©c v·ªõi nh·ªØng ƒë·∫∑c ƒëi·ªÉm nh∆∞ trong s√°ng, ch√≠nh x√°c, nh·∫•t qu√°n, c√≥ li√™n h·ªá, b·∫±ng ch·ª©ng t·ªët, l√≠ l·∫Ω h·ª£p l√≠, c√≥ chi·ªÅu s√¢u, v√† c√¥ng b√¨nh. T·ª©c l√†, tr∆∞·ªõc m·ªôt c√¢u ph√°t bi·ªÉu hay m·ªôt ƒë·ªÅ ngh·ªã, ch√∫ng ta ph·∫£i th·∫©m ƒë·ªãnh l·∫°i k·∫øt c·∫•u v√† nguy√™n t·ªë c·ªßa ph√°t bi·ªÉu hay ƒë·ªÅ ngh·ªã ƒë√≥. Nh·ªØng k·∫øt c·∫•u v√† nguy√™n t·ªë n√†y l√†: m·ª•c ƒë√≠ch, v·∫•n ƒë·ªÅ, gi·∫£ ƒë·ªãnh, quan ni·ªám, b·ªëi c·∫£nh, k·∫øt lu·∫≠n, ng·ª• √Ω, h·∫≠u qu·∫£, ph·∫°m vi tham kh·∫£o, v√† quan ƒëi·ªÉm kh√°c.&lt;/p&gt; &lt;p&gt;Theo d√µi nh·ªØng tranh lu·∫≠n tr√™n c√°c forum, ch√∫ng ta th·∫•y nh·ªØng h√¨nh th·ª©c t·∫•n c√¥ng c√° nh√¢n (thay v√¨ t·∫•n c√¥ng v√†o lu·∫≠n ƒëi·ªÉm), xuy√™n t·∫°c √Ω t∆∞·ªüng, ch·ª•p m≈©, suy lu·∫≠n theo c·∫£m t√≠nh, m·ªâa mai, ƒë∆°n gi·∫£n h√≥a v·∫•n ƒë·ªÅ, v.v‚Ä¶ xu·∫•t hi·ªán h·∫ßu nh∆∞ h√†ng ng√†y, c√≥ khi h√†ng gi·ªù. V√¨ nh·ªØng t·∫ßn s·ªë c·ªßa nh·ªØng lo·∫°i ng·ª•y bi·ªán xu·∫•t hi·ªán qu√° nhi·ªÅu nh∆∞ th·∫ø, n√≥ th√†nh m·ªôt s·ª± r·∫≠p khu√¥n. Theo th·ªùi gian, r·∫≠p khu√¥n tr·ªü th√†nh ‚Äútruy·ªÅn th·ªëng‚Äù. H·∫≠u qu·∫£ c·ªßa c√°i truy·ªÅn th·ªëng n√†y l√† nh·ªØng ai ra ngo√†i c√°i khu√¥n s√°o c·ªßa ng·ª•y bi·ªán ƒë·ªÅu c√≥ th·ªÉ b·ªã xem l√† phi ch√≠nh th·ªëng, d·∫´n ƒë·∫øn m·ªôt l·ªëi suy nghƒ© v√† ph√°n x√©t k·ª≥ qu·∫∑c&lt;/p&gt; &lt;p&gt;Trong c√°i s·ª± th·ª±c ph·ª©c t·∫°p, m·ªù m·ªù ·∫£o ·∫£o c·ªßa v·∫•n ƒë·ªÅ, c√≥ c√°i ƒë·∫πp ri√™ng. Kh√¥ng ph·∫£i c√°i ƒë·∫πp tr∆°n tru, tr√≤n trƒ©nh, nh∆∞ng l√† c√°i ƒë·∫πp kh·∫Øt khe c·ªßa s·ª± th·∫≠t. T∆∞∆°ng t·ª±, m·ªôt l·ªùi ph√°t bi·ªÉu ngh·ªãch l√Ω c√≥ c√°i ƒë·∫πp c·ªßa n√≥, v√¨ n√≥ c√≥ th·ªÉ ƒë√°nh th·ª©c ch√∫ng ta v·ªÅ m·ªôt th·∫ø gi·ªõi ph·ª©c t·∫°p, m·ªôt th·∫ø gi·ªõi kh√¥ng n·∫±m g·ªçn trong ƒë√∫ng/sai, t·ªët/x·∫•u, b·∫°n/th√π. C√≥ l·∫Ω ƒë√£ ƒë·∫øn l√∫c ch√∫ng ta n√™n v∆∞·ª£t qua ch√≠nh m√¨nh.&lt;/p&gt;</description></item><item><title>Apache httpd 2.4 and PHP 7 in macOS</title><link>https://htr3n.github.io/2017/09/apache-httpd-php-macos/<pubdate>Mon, 25 Sep 2017 00:00:00 +0000</pubdate><guid>9768d80543b9aa03ee844dd13e08a3be</guid><description>&lt;p&gt;Together, &lt;a href=&#34;https://httpd.apache.org&#34;&gt;Apache HTTP&lt;/a&gt; server, &lt;a href=&#34;https://php.net&#34;&gt;PHP&lt;/a&gt;, and &lt;a href=&#34;https://www.mysql.com&#34;&gt;MySQL&lt;/a&gt; form a powerful and popular combination for Web development. MacOS are often shipped with pre-installed versions of Apache HTTP server and PHP but these are often outdated and merely customised for macOS. The well-known bundles &lt;em&gt;*AMP&lt;/em&gt; (e.g. WAMP for Windows, LAMP for Linux, MAMP for Mac) are commonly used but also considered a tad bloated for the beginners like me ;).&lt;/p&gt; &lt;p&gt;After few years of Java development, I turned myself into Web development, and in particular, PHP programming. As usual, I would start with pure PHP aspects that really help me to understand the fundamental concepts and techniques instead of being drown with everyone-known frameworks and their complexity and hard-to-understand magics. As a result, I first looked for a simple setup of Apache and PHP that best suits the beginning of my initial learning path. In this note, I write down what I learn from many sources on the Internet tweaked to suit my needs.&lt;/p&gt; &lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt; &lt;blockquote&gt; &lt;p&gt;Let&amp;rsquo;s assume that we want to set up an exemplary Web development environment including Apache HTTP 2.4 server and PHP 7.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&#34;strategies&#34;&gt;Strategies&lt;/h2&gt; &lt;p&gt;A typical and well-documented approach is to load PHP processor as a module under Apache httpd using the directive &lt;code&gt;LoadModule&lt;/code&gt;. It is so-called &lt;a href=&#34;http://www.php.net/manual/en/install.unix.apache2.php&#34;&gt;&lt;em&gt;mod_php&lt;/em&gt;&lt;/a&gt; approach. However, this is now gradually out of favor of Web developers and hosting providers because the tight combination of PHP and Apache makes things difficult for monitoring, debugging, and scaling. One of the recent favorite strategies is to set up PHP as Fast-CGI using &lt;a href=&#34;http://php.net/manual/en/install.fpm.php&#34;&gt;PHP-FPM&lt;/a&gt; (FastCGI Process Manager). This method also brings several advantages including good support for nginx integration and &lt;a href=&#34;https://wiki.apache.org/httpd/PHP-FPM&#34;&gt;performance&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Based on the aforementioned analysis of strategies, I consider the following installation activities to fulfill that goal.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Installing &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; (a sane package manager for macOS)&lt;/li&gt; &lt;li&gt;Installing Apache HTTP server 2.4&lt;/li&gt; &lt;li&gt;Installing PHP 7 and &lt;em&gt;PHP-FPM&lt;/em&gt;&lt;/li&gt; &lt;li&gt;Putting all together&lt;/li&gt; &lt;li&gt;Installing &lt;a href=&#34;http://www.thekelleys.org.uk/dnsmasq/doc.html&#34;&gt;DNSMasq&lt;/a&gt; (optional)&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&#34;installation-and-configuration&#34;&gt;Installation and Configuration&lt;/h2&gt; &lt;h3 id=&#34;homebrew-https-brew-sh&#34;&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Homebrew is currently a prominent and well-supported package managing solution for macOS. Installing Homebrew is rather straightforward. Nevertheless, you should be familiar with using the command line in order to easily get thing done. All you need is to launch the Terminal app (&lt;code&gt;/Applications/Utilities/Terminal.app&lt;/code&gt;) or even the better &lt;a href=&#34;https://www.iterm2.com&#34;&gt;iTerm 2&lt;/a&gt; and start executing terminal commands.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Note: From now on, the sign &lt;code&gt;$&lt;/code&gt; will denote the user&amp;rsquo;s command line prompt where you will execute the terminal commands, except that you must not type &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Homebrew requires Xcode&amp;rsquo;s command line tooling so we must install it first.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install Xcode command line tooling $ xcode-select --install &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Next we start installing Homebrew using a one-line command.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, Homebrew will be installed into &lt;code&gt;/usr/local/Cellar&lt;/code&gt; and use &lt;code&gt;/usr/local&lt;/code&gt; and its sub-folders for the its installed binary and configuration files. For more advanced settings and manual configurations, please refer &lt;a href=&#34;https://docs.brew.sh/Installation.html&#34;&gt;here&lt;/a&gt;. To ensure that Homebrew is properly installed, we can simply check.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew --version Homebrew 1.3.8 Homebrew/homebrew-core (git revision 22ac3; last commit 2017-12-02) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The command &lt;code&gt;brew config&lt;/code&gt; shows more information about the installed Homebrew.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew config &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we should add some extra &lt;em&gt;taps&lt;/em&gt; (i.e. package repositories in Homebrew&amp;rsquo;s world) that contain packages we need, for instance, Apache HTTP server, PHP, and MySQL along with tools for running them as macOS services.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew tap homebrew/apache $ brew tap homebrew/php $ brew tap homebrew/services &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Last but not least, always make sure Homebrew is up-to-date.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew update $ brew doctor &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;apache-http-server-https-httpd-apache-org&#34;&gt;&lt;a href=&#34;https://httpd.apache.org&#34;&gt;Apache HTTP server&lt;/a&gt;&lt;/h3&gt; &lt;h4 id=&#34;installing-apache-http-server-2-4&#34;&gt;Installing Apache HTTP server 2.4&lt;/h4&gt; &lt;p&gt;We can also use the pre-installed Apache HTTP server (from now on, Apache &lt;code&gt;httpd&lt;/code&gt;, Apache, &lt;code&gt;httpd&lt;/code&gt; will be used interchangeably) shipped with macOS. Nevertheless, I want to play around with the newer version. Apart from the Homebrew-based installation commands, the steps for setting up Apache are the same in either way.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install httpd &lt;/code&gt;&lt;/pre&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;NOTE 1&lt;/strong&gt;: Since Sep 30th, 2017 the Apache HTTP server package in Homebrew has been renamed from &lt;code&gt;httpd24&lt;/code&gt; to &lt;code&gt;httpd&lt;/code&gt; and the corresponding folders are also changed from &lt;code&gt;apache2&lt;/code&gt; to &lt;code&gt;httpd&lt;/code&gt;. This note has been updated with the newer versions. Apart from the aforementioned updates, the configuration steps remain the same though.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE 2&lt;/strong&gt;: When we use &lt;code&gt;brew install &amp;lt;package_name&lt;/code&gt; without any further options, Homebrew often accomplishes the installation faster by downloading a &lt;em&gt;bottled version&lt;/em&gt; (i.e. a &lt;em&gt;pre-compiled package&lt;/em&gt;) from &lt;a href=&#34;https://homebrew.bintray.com&#34;&gt;homebrew.bintray.com&lt;/a&gt;. If there are any extra compling options, Homebrew can download the package&amp;rsquo;s source code and compile the source. The compilation of a source package usually takes a a bit longer. For a simple and quick start, I mostly opt for the bottled versions of Apache server and PHP as the configured and compiled options are rather sufficient. After learning the fundamental aspects, I can turn to a more complex approach with lots of tweaks for further needs or experiments.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;By default, the Homebrew-based Apache server will use the ports &lt;code&gt;http/8080&lt;/code&gt; and &lt;code&gt;https/8443&lt;/code&gt; that do not need system administrator privileges. In my setup, I will go with this option as I simply want to run Apache with my user account. Nonetheless, you can tell Homebrew to install a version that use ports &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt; by the option &lt;code&gt;--with-privileged-ports&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install httpd --with-privileged-ports &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case you want to experiment with the bleeding edge Apache server pulled from its development repository, use the option &lt;code&gt;--HEAD&lt;/code&gt; along with other options. For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install httpd --HEAD --with-privileged-ports &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&amp;rsquo;s assume the bottled &lt;code&gt;httpd&lt;/code&gt; is installed. The Apache server will be installed in the following folder &lt;code&gt;/usr/local/Cellar/httpd/2.4.29&lt;/code&gt; (which might be different in your computer). You can check the Homebrew&amp;rsquo;s &lt;em&gt;Cellar&lt;/em&gt;, i.e. where Homebrew puts installed packages, with &lt;code&gt;brew --cellar&lt;/code&gt;. The precise location of &lt;code&gt;httpd&lt;/code&gt; in a bit complex nerdy form is &lt;code&gt;$(brew --cellar)/httpd/$(brew list --versions httpd | cut -d &#39; &#39; -f 2)&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd $(brew --cellar)/httpd/$(brew list --versions httpd | cut -d &#39; &#39; -f 2) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;configuring-apache-server&#34;&gt;Configuring Apache server&lt;/h4&gt; &lt;p&gt;The main configuration file &lt;code&gt;httpd.conf&lt;/code&gt; can be located at &lt;code&gt;/usr/local/etc/httpd&lt;/code&gt;. There are some directives and options that you may want to notice or change ( &lt;code&gt;#&lt;/code&gt; starts a comment).&lt;/p&gt; &lt;p&gt;There is a default directive &lt;code&gt;Listen 8080&lt;/code&gt; denoting the port where Apache server will be listening. You can change it to your favourite one or the one that suits your projects. Note that if you change to a port in the range from &lt;code&gt;1-1023&lt;/code&gt; (so-called privileged ports), you need an administrator role to run the &lt;code&gt;httpd&lt;/code&gt; process. Because I need to create virtual hosts for various projects, I have to configure &lt;code&gt;httpd&lt;/code&gt; to listen at a particular address and port, which is &lt;code&gt;127.0.0.1:8080&lt;/code&gt; in my setting.&lt;/p&gt; &lt;p&gt;The directives &lt;code&gt;LoadModule&lt;/code&gt; will enable some Apache HTTP modules we need for configuring PHP-FPM such as &lt;code&gt;mod_proxy&lt;/code&gt;and &lt;code&gt;mod_proxy_fcgi&lt;/code&gt; (disabled by default).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;Listen 127.0.0.1:8080 ... # LoadModule proxy_module libexec/mod_proxy.so ... # LoadModule proxy_fcgi_module libexec/mod_proxy_fcgi.so ... &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apache server can be started by using either &lt;code&gt;apachectl start&lt;/code&gt; or &lt;code&gt;brew services start httpd&lt;/code&gt;. Note that the latter also installs a snippet to run Apache &lt;code&gt;httpd&lt;/code&gt; as a startup service.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew services start httpd $ brew services list &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;running-and-testing&#34;&gt;Running and Testing&lt;/h4&gt; &lt;p&gt;We use the following commands to start, stop, or restart &lt;code&gt;httpd&lt;/code&gt;, respectively.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew services start httpd $ brew services stop httpd $ brew services restart httpd $ launchctl list | grep httpd 91962	0	homebrew.mxcl.httpd &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To see whether Apache &lt;code&gt;httpd&lt;/code&gt; is up and running, you just start your Web browser and point to the URL &lt;a href=&#34;http://localhost:8080&#34;&gt;&lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/a&gt; and should see a simple Web page saying &lt;em&gt;&amp;ldquo;It works&amp;rdquo;&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ps -ef | grep httpd 501 91962 1 0 8:51AM ?? 0:00.07 /usr/local/opt/httpd/bin/httpd -D FOREGROUND 501 91968 91962 0 8:51AM ?? 0:00.04 /usr/local/opt/httpd/bin/httpd -D FOREGROUND 501 91969 91962 0 8:51AM ?? 0:00.04 /usr/local/opt/httpd/bin/httpd -D FOREGROUND 501 91970 91962 0 8:51AM ?? 0:00.04 /usr/local/opt/httpd/bin/httpd -D FOREGROUND $ lsof -Pni4 | grep httpd httpd 91962 huytran 5u IPv4 0xd51255ae3385c3d7 0t0 TCP *:* (CLOSED) httpd 91968 huytran 5u IPv4 0xd51255ae3385c3d7 0t0 TCP *:* (CLOSED) httpd 91969 huytran 5u IPv4 0xd51255ae3385c3d7 0t0 TCP *:* (CLOSED) httpd 91970 huytran 5u IPv4 0xd51255ae3385c3d7 0t0 TCP *:* (CLOSED) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We can also test whether Apache server configuration file is correct:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apachectl configtest Syntax OK $ httpd -t Syntax OK &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;php-7-http-php-net&#34;&gt;&lt;a href=&#34;http://php.net&#34;&gt;PHP 7&lt;/a&gt;&lt;/h3&gt; &lt;h4 id=&#34;install-php-and-php-fpm&#34;&gt;Install PHP and PHP-FPM&lt;/h4&gt; &lt;p&gt;Likewise, I just use Homebrew to install newer/older versions of PHP ranging from 5.x to 7.x. I opt for the stable release of PHP 7.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install php72 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The default installation of PHP 7 almost covers several useful aspects including a PHP module &lt;code&gt;libphp7.so&lt;/code&gt; that can be integrated with Apache HTTP server via the directive &lt;code&gt;LoadModule&lt;/code&gt; and PHP-FPM that can be used as FastCGI.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ php -version PHP 7.2.0 (cli) (built: Dec 2 2017 11:27:08) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.2.0, Copyright (c) 1998-2017 Zend Technologies &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;php-configurations&#34;&gt;PHP configurations&lt;/h4&gt; &lt;p&gt;The main configuration file of PHP is &lt;code&gt;php.ini&lt;/code&gt; as shown below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Configuration File (php.ini) Path: /usr/local/etc/php/7.2 Loaded Configuration File: /usr/local/etc/php/7.2/php.ini Scan for additional .ini files in: /usr/local/etc/php/7.2/conf.d Additional .ini files parsed: (none) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The default setting in &lt;code&gt;/usr/local/etc/php/7.2/php.ini&lt;/code&gt; is quite sufficient for simple development purposes. We may tweak later if necessary but can leave it for now.&lt;/p&gt; &lt;h4 id=&#34;starting-php-fpm&#34;&gt;Starting PHP-FPM&lt;/h4&gt; &lt;p&gt;The configuration for PHP-FPM is &lt;code&gt;/usr/local/etc/php/7.2/php-fpm.conf&lt;/code&gt;. Note the last lines in this file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;;include=/usr/local/etc/php/7.1/php-fpm.d/*.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can remove the semi-colon to enable the inclusion of other configurations and/or might also change the path to whether it fits your development environment. In the folder &lt;code&gt;/usr/local/etc/php/7.1/php-fpm.d/*&lt;/code&gt;, there is a file &lt;code&gt;www.conf&lt;/code&gt; that can be used as a starting point for setting up your own PHP-FPM.&lt;/p&gt; &lt;p&gt;Now we can start PHP-FPM to see whether everything is fine before doing some extra configuration steps.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew services start php72 ==&amp;gt; Successfully started `php72` (label: homebrew.mxcl.php72) $ brew services stop¬†php72 Stopping `php72`... (might take a while) ==&amp;gt; Successfully stopped `php72` (label: homebrew.mxcl.php72) $ brew services restart php72 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The command &lt;code&gt;brew services start php72&lt;/code&gt; can create the file &lt;code&gt;homebrew.mxcl.php72.plist&lt;/code&gt; in &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; for starting up.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ launchctl list | grep php 47728	0	homebrew.mxcl.php72 $ ps -ef | grep php-fpm ... &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;putting-all-together&#34;&gt;Putting all together&lt;/h3&gt; &lt;p&gt;After basically finishing the installation of Apache, PHP 7 and PHP-FPM, we start putting these pieces together.&lt;/p&gt; &lt;h4 id=&#34;configurating-a-php-fpm-pool&#34;&gt;Configurating a &amp;lsquo;PHP-FPM&amp;rsquo; pool&lt;/h4&gt; &lt;p&gt;PHP-FPM supports multiple resource &lt;strong&gt;&lt;em&gt;pools&lt;/em&gt;&lt;/strong&gt;. Each pool defines how PHP-FPM will create and manage processes. Let&amp;rsquo;s start with enabling the inclusion and handling of pools in &lt;code&gt;/usr/local/etc/php/7.2/php-fpm.conf&lt;/code&gt; by changing the following line&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;;include=/usr/local/etc/php/7.2/php-fpm.d/*.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to (i.e. uncommenting it)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;include=/usr/local/etc/php/7.2/php-fpm.d/*.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then we can leverage the stock configuration in &lt;code&gt;/usr/local/etc/php/7.2/php-fpm.d/www.conf&lt;/code&gt;. In my case, I have cleaned up &lt;code&gt;www.conf&lt;/code&gt; and kept a simple configuration as following for the sake of readability. The configuration explains for itself.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[www] user = _www group = _www listen = 127.0.0.1:9072 pm = dynamic pm.max_children = 5 pm.start_servers = 2 pm.min_spare_servers = 1 pm.max_spare_servers = 3 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The most important setting of each pool is the &lt;em&gt;TCP socket&lt;/em&gt; (including &lt;em&gt;IP address&lt;/em&gt; and &lt;em&gt;port&lt;/em&gt;) or Unix domain socket (UDS) that PHP-FPM will be receiving FastCGI requests. This will be set using the directive &lt;code&gt;listen&lt;/code&gt; . A typical setting of PHP-FPM is &lt;code&gt;listen = 127.0.0.1:9000&lt;/code&gt;. As I might want to install multiple PHP versions for testing, I will change the port to &lt;code&gt;9072&lt;/code&gt; that corresponds to the PHP version 7.2.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Note that we can also configure PHP-FPM to serve at a &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_domain_socket&#34;&gt;Unix domain socket&lt;/a&gt; (UDS) because PHP-FPM and &lt;code&gt;httpd&lt;/code&gt; processes are running in the same host. To do that, the directive &lt;code&gt;listen&lt;/code&gt; must be changed, for example, &lt;code&gt;listen = /usr/local/var/run/php72-fpm.sock&lt;/code&gt;. This approach would need extra effort to configure Apache to use PHP-FPM via UDS that we will visit later near the end of this guide.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Now as I want to check whether PHP-FPM will be up and running with the above changes, I restart PHP-FPM and check the open ports &lt;code&gt;9072&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew services restart php72 $ ps -ef | grep php-fpm ... $ lsof -Pni4 | grep php-fpm php-fpm 53180 huytran 6u IPv4 0xd51255ae2d4097b7 0t0 TCP 127.0.0.1:9072 (LISTEN) php-fpm 53187 huytran 0u IPv4 0xd51255ae2d4097b7 0t0 TCP 127.0.0.1:9072 (LISTEN) php-fpm 53188 huytran 0u IPv4 0xd51255ae2d4097b7 0t0 TCP 127.0.0.1:9072 (LISTEN) &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;php-fpm-delegation&#34;&gt;PHP-FPM Delegation&lt;/h4&gt; &lt;p&gt;I can define virtual hosts in Apache that suit my needs for separating different development projects. Instead of creating one large &lt;code&gt;httpd.conf&lt;/code&gt;, I will create separate virtual host configurations. Again, I will start with the exemplary virtual host configuration provided in &lt;code&gt;/usr/local/etc/httpd/extra/httpd-vhosts.conf&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Enabling &amp;lsquo;mod_proxy&amp;rsquo; and &amp;lsquo;mod_proxy_fcgi&amp;rsquo;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Change the following lines in &lt;code&gt;/usr/local/etc/httpd/httpd.conf&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;# LoadModule proxy_module libexec/mod_proxy.so ... # LoadModule proxy_fcgi_module libexec/mod_proxy_fcgi.so &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;LoadModule proxy_module libexec/mod_proxy.so ... LoadModule proxy_fcgi_module libexec/mod_proxy_fcgi.so &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Defining Virtual Hosts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;I want to define a PHP development project residing in &lt;code&gt;/Users/huytran/working/dev/dev-web/php&lt;/code&gt;. Therefore, I change &lt;code&gt;/usr/local/etc/httpd/httpd.conf&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;#Include /usr/local/etc/httpd/extra/httpd-vhosts.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;Include /usr/local/etc/httpd/extra/httpd-vhosts.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and then create a file &lt;code&gt;/usr/local/etc/httpd/extra/httpd-vhosts.conf&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;&amp;lt;VirtualHost *:8080&amp;gt; ServerName php7.test DocumentRoot &amp;quot;/Users/huytran/working/dev/dev-web/php&amp;quot; ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://127.0.0.1:9072/Users/huytran/working/dev/dev-web/php/$1 DirectoryIndex index.php index.html &amp;lt;Directory &amp;quot;/Users/huytran/working/dev/dev-web/php&amp;quot;&amp;gt; Require all granted &amp;lt;/Directory&amp;gt; &amp;lt;/VirtualHost&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Further information on Apache virtual hosts can be found &lt;a href=&#34;https://httpd.apache.org/docs/current/vhosts&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://httpd.apache.org/docs/current/vhosts/examples.html&#34;&gt;here&lt;/a&gt;. I can briefly explain some relevant directives used in my virtual host configuration:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;lt;VirtualHost&amp;gt;&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/core.html#virtualhost&#34;&gt;&lt;VirtualHost&gt;&lt;/a&gt; is used to define a new virtual host with respect to a specific hostname or IP address.&lt;/li&gt; &lt;li&gt;Syntax: &lt;code&gt;&amp;lt;VirtualHost addr[:port] [addr[:port]] ...&amp;gt; ... &amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Here I use the wildcard &lt;code&gt;*:*&lt;/code&gt; to match any IP addresses and ports. Note that the port specified in a &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; does not affect the real port Apache &lt;code&gt;httpd&lt;/code&gt; is listening.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;em&gt;ServerName&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/core.html#servername&#34;&gt;ServerName&lt;/a&gt; is recommended in each &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; for resolution and matching. If absent, Apache will use the global &lt;code&gt;ServerName&lt;/code&gt; stated in &lt;code&gt;httpd.conf&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;In my case, I assign different &lt;code&gt;ServerName&lt;/code&gt;, &lt;code&gt;php7.test&lt;/code&gt; and &lt;code&gt;htmljs.test&lt;/code&gt;, respectively, for each project to distinguish them. As Apache mainly matches virtual hosts via IP addresses and it will resolve host names based on DNS servers, I will configure corresponding hostname resolution for &lt;code&gt;php7.test&lt;/code&gt; and &lt;code&gt;htmljs.test&lt;/code&gt; using &lt;code&gt;/etc/hosts&lt;/code&gt; or &lt;em&gt;DNSMasq&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;em&gt;DocumentRoot&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/core.html&#34;&gt;DocumentRoot&lt;/a&gt; specifies the place where Apache &lt;code&gt;httpd&lt;/code&gt; will look for files to serve relevant incoming request. In each case, &lt;code&gt;DocumentRoot&lt;/code&gt; will be the absolute path of my development project.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;em&gt;ProxyPassMatch&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/mod_proxy.html#proxypassmatch&#34;&gt;ProxyPassMatch&lt;/a&gt; is part of &lt;code&gt;mod_proxy&lt;/code&gt; that can map remote servers into local URLs using regular expressions.&lt;/li&gt; &lt;li&gt;Syntax: &lt;code&gt;ProxyPassMatch [regex] !|url [key=value [key=value ...]]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;When Apache &lt;code&gt;httpd&lt;/code&gt; receives a request for a certain PHP file (e.g. &lt;code&gt;test.php&lt;/code&gt;) then it needs PHP to handle that request. The regular expression &lt;code&gt;^/(.*\.php(/.*)?)$&lt;/code&gt; is used to check whether the incoming request is for a &lt;code&gt;.php&lt;/code&gt; file.&lt;/li&gt; &lt;li&gt;&lt;code&gt;$1&lt;/code&gt; is called back-reference, as it refers to the matched part of the regular expression corresponding to the outermost pair of parentheses. In case the expression matches the incoming request URI (i.e. the request corresponds to a file &lt;code&gt;.php&lt;/code&gt;, for instance, &lt;code&gt;/test.php&lt;/code&gt;) &lt;code&gt;$1&lt;/code&gt; will represent the request URI. As a request is often treated as relative path from the &lt;code&gt;DocumentRoot&lt;/code&gt;, we must add &lt;code&gt;DocumentRoot&lt;/code&gt; path before &lt;code&gt;$1&lt;/code&gt; to form an exact absolute path and hand it over to PHP-FPM by adding the prefix &lt;code&gt;fcgi://127.0.0.1:9072&lt;/code&gt;. Note that PHP-FPM is serving at &lt;a href=&#34;#configuring&#34;&gt;&lt;code&gt;127.0.0.1:9072&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;fcgi://&lt;/code&gt; denotes the scheme FastCGI provided by &lt;code&gt;mod_proxy_fcgi&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The project &lt;strong&gt;&lt;em&gt;htmljs.test&lt;/em&gt;&lt;/strong&gt; does not need PHP processing, therefore I do not set the directive &lt;code&gt;ProxyPassMatch&lt;/code&gt; there.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;em&gt;DirectoryIndex&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/mod_dir.html#directoryindex&#34;&gt;DirectoryIndex&lt;/a&gt; sets the list of resources for an indexing request. As I want to use PHP, I set &lt;code&gt;index.php&lt;/code&gt; as index resource backed up by the default &lt;code&gt;index.html&lt;/code&gt;. Note that &lt;code&gt;DirectoryIndex&lt;/code&gt; can also be set globally in &lt;code&gt;httpd.conf&lt;/code&gt; that affects the main server and can be inherited in all virtual hosts.&lt;/li&gt; &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;&amp;lt;IfModule dir_module&amp;gt; DirectoryIndex index.php index.html &amp;lt;/IfModule&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;Note that &lt;code&gt;DirectoryIndex index.html&lt;/code&gt; is the default global option defined in &lt;code&gt;httpd.conf&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;lt;Directory&amp;gt;&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/core.html#directory&#34;&gt;&lt;Directory&gt;&lt;/a&gt; encloses the settings for folders, subfolders, and their contents.&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/mod_authz_core.html#require&#34;&gt;&lt;code&gt;Require all granted&lt;/code&gt;&lt;/a&gt; : access is allowed unconditionally (authorization &lt;code&gt;mod_authz_core&lt;/code&gt;). We need this, otherwise Apache will return an error &lt;code&gt;403 Forbidden&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&#34;hostname-resolution&#34;&gt;Hostname Resolution&lt;/h4&gt; &lt;p&gt;As mentioned before, I will use the virtual host &lt;code&gt;php7.test&lt;/code&gt; in my macOS to refer to my corresponding Web development projects. The hostname is not known by Apache. Thus, I must tell it how to resolve this hostname. In my setting, all virtual hosts are sharing in the same local computer with the address &lt;code&gt;127.0.0.1&lt;/code&gt;. A simple solution is to change the file &lt;code&gt;/etc/hosts&lt;/code&gt; where macOS will look for when resolving hostnames. This solution requires sufficient administration privilege.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo open -e /etc/hosts Password: (enter your password here) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After entering the administrator password, I will add two following lines to &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;127.0.0.1 php7.test &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case either you do not want to mess up system files like &lt;code&gt;/etc/hosts&lt;/code&gt; or you have several development projects, you can leverage &lt;code&gt;dnsmasq&lt;/code&gt; for automatically resolving hostnames with very simple configurations. Note that this is also the reason I chose the &lt;code&gt;.test&lt;/code&gt; for all of my development projects such that I can use &lt;code&gt;dnsmasq&lt;/code&gt; and only &lt;strong&gt;one line directive&lt;/strong&gt; to resolve the TLD (Top-Level Domain) &lt;code&gt;test&lt;/code&gt;. You can surely pick any TLD other than &lt;code&gt;test&lt;/code&gt; .&lt;/p&gt; &lt;h4 id=&#34;testing-apache-and-php&#34;&gt;Testing Apache and PHP&lt;/h4&gt; &lt;p&gt;Apart from the aforementioned tests, we need to check whether the integration of Apache and PHP-FPM is working. Let&amp;rsquo;s create a file &lt;code&gt;index.php&lt;/code&gt; in &lt;code&gt;/Users/huytran/working/dev/dev-web/php&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php echo &#39;PHP Development Project&#39;; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Restart &lt;code&gt;httpd&lt;/code&gt; and PHP-FPM to apply these changes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew services restart httpd $ brew services restart php72 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Given no problems, the servers should be restarted smoothly. Then open your Web browser to the following URLs &lt;a href=&#34;http://php7.test:8080&#34;&gt;&lt;code&gt;http://php7.test:8080&lt;/code&gt;&lt;/a&gt;. If you see the content created above, our configuration is working.&lt;/p&gt; &lt;h3 id=&#34;dnsmasq-http-www-thekelleys-org-uk-dnsmasq-doc-html&#34;&gt;&lt;a href=&#34;http://www.thekelleys.org.uk/dnsmasq/doc.html&#34;&gt;DNSMasq&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;Instead of altering system hosts &lt;code&gt;/etc/hosts&lt;/code&gt;, I can make use of &lt;code&gt;dnsmasq&lt;/code&gt; to conveniently resolve many hostnames used in my virtual hosts.&lt;/p&gt; &lt;h4 id=&#34;installing-dnsmasq&#34;&gt;Installing DNSMasq&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# update homebrew and install dnsmasq $ brew update &amp;amp;&amp;amp; brew install dnsmasq # Copy the dnsmasq daemon configuration file to be loaded at system startup time $ sudo cp $(brew list dnsmasq | grep /homebrew.mxcl.dnsmasq.plist$) /Library/LaunchDaemons/ # start dnsmasq $ sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&#34;configuring-dnsmasq&#34;&gt;Configuring DNSMasq&lt;/h4&gt; &lt;p&gt;After installing DNSMasq, let&amp;rsquo;s open the configuration file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ open -e /usr/local/etc/dnsmasq.conf &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and add the following line at the end.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;address=/app/127.0.0.1 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above configuration line tells DNSMasq to resolve the TLD &lt;code&gt;dev&lt;/code&gt; to the local IP address &lt;code&gt;127.0.0.1&lt;/code&gt;. You can now use any hostnames like &lt;code&gt;this.is.a.development.project.test&lt;/code&gt; in Apache virtual hosts.&lt;/p&gt; &lt;h4 id=&#34;configuring-macos-to-use-dnsmasq&#34;&gt;Configuring macOS to use DNSMasq&lt;/h4&gt; &lt;p&gt;We have to tell macOS that DNSMasq is now a nameserver running at the local host. The configuration file is &lt;code&gt;/etc/resolv.conf&lt;/code&gt; specifies the nameservers for looking up hostnames. On the one hand, we should not mess up the system setting. Moreover, macOS might overwrite &lt;code&gt;/etc/resolv.conf&lt;/code&gt; when there are changes in Network setting. An elegant solution is to create a file in the folder &lt;code&gt;/etc/resolver/&lt;/code&gt;with the exact TLD managed by DNSMasq.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo mkdir -p /etc/resolver/ $ sudo sh -c &#39;echo &amp;quot;nameserver 127.0.0.1&amp;quot; &amp;gt; /etc/resolver/test&#39; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The aforementioned commands needs administrator privileges and will create a file &lt;code&gt;test&lt;/code&gt; with the content &lt;code&gt;nameserver 127.0.0.1&lt;/code&gt; in the folder &lt;code&gt;/etc/resolver/&lt;/code&gt;.&lt;/p&gt; &lt;h4 id=&#34;testing-dnsmasq&#34;&gt;Testing DNSMasq&lt;/h4&gt; &lt;p&gt;Now we can delete the lines added before in &lt;code&gt;/etc/hosts&lt;/code&gt; and start &lt;code&gt;dnsmasq&lt;/code&gt; (as &lt;code&gt;root&lt;/code&gt;) and test the resolving of hostnames.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start dnsmasq $ sudo brew services start dnsmasq # ping the hostnames $ ping -c 1 php7.test PING php7.test (127.0.0.1): 56 data bytes 64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.040 ms # query hostname using dnsmasq running at 127.0.0.1 $ dig php7.test @127.0.0.1 ... ;; ANSWER SECTION: php7.test. 0	IN	A	127.0.0.1 # test arbitrary hostnames ending with .test $ dig an.arbitrary.host.test @127.0.0.1 &lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&#34;using-proxy-fastcgi-via-handler&#34;&gt;Using Proxy FastCGI via Handler&lt;/h3&gt; &lt;p&gt;Instead of configuring &lt;code&gt;ProxyPassMatch&lt;/code&gt; for each individual virtual host to handle &lt;code&gt;.php&lt;/code&gt; files, we can also set up directives in Apache &lt;code&gt;httpd.conf&lt;/code&gt; (global scope) or at the beginning of the virtual host configuration &lt;code&gt;localhost.conf&lt;/code&gt; (virtual host scope) via handlers.&lt;/p&gt; &lt;p&gt;1) First comment out or delete the line &lt;code&gt;ProxyPassMatch ...&lt;/code&gt; in the virtual host configuration &lt;code&gt;/usr/local/etc/httpd/extra/httpd-vhosts.conf&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;# ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://127.0.0.1:9072/Users/huytran/working/dev/dev-web/php/$1 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2) Then, add the following lines to either the end of &lt;code&gt;/usr/local/etc/httpd/httpd.conf&lt;/code&gt; or the beginning of &lt;code&gt;/usr/local/etc/httpd/extra/httpd-vhosts.conf&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;&amp;lt;Proxy &amp;quot;fcgi://localhost:9072/&amp;quot; enablereuse=on max=10&amp;gt; &amp;lt;/Proxy&amp;gt; &amp;lt;FilesMatch &amp;quot;\.php$&amp;quot;&amp;gt; &amp;lt;If &amp;quot;-f %{REQUEST_FILENAME}&amp;quot;&amp;gt; SetHandler &amp;quot;proxy:fcgi://127.0.0.1:9072/&amp;quot; &amp;lt;/If&amp;gt; &amp;lt;/FilesMatch&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/core.html#filesmatch&#34;&gt;&amp;lt;FilesMatch&amp;gt;&lt;/a&gt; : defines the scope of the enclosed directives by filenames that match the regular expression. &lt;ul&gt; &lt;li&gt;&lt;em&gt;Syntax&lt;/em&gt;: &lt;code&gt;&amp;lt;FilesMatch regex&amp;gt; ... &amp;lt;/FilesMatch&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/core.html#sethandler&#34;&gt;SetHandler&lt;/a&gt;: forces matching files to be processed by a handler. &lt;ul&gt; &lt;li&gt;&lt;em&gt;Syntax&lt;/em&gt;: &lt;code&gt;SetHandler handler-name|none|expression&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;3) Restart &lt;code&gt;httpd&lt;/code&gt;&lt;/p&gt; &lt;h3 id=&#34;handling-php-via-unix-domain-sockets&#34;&gt;Handling PHP via Unix Domain Sockets&lt;/h3&gt; &lt;p&gt;As mentioned before, PHP-FPM can serve on &lt;em&gt;Unix domain sockets (UDS)&lt;/em&gt;, too. UDS is widely used in the Unix/Linux world for inter-process communication. To enable PHP-FPM listening on UDS, open file &lt;code&gt;/usr/local/etc/php/7.1/php-fpm.d/www.conf&lt;/code&gt; and change the directive &lt;code&gt;listen&lt;/code&gt; .&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[www] ... listen = /usr/local/var/run/php72-fpm.sock ... &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we must change the Apache configuration to adapt to UDS as well. In case we use &lt;code&gt;ProxyPassMatch&lt;/code&gt; directive, change it like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;ProxyPassMatch ^/(.*\.php(/.*)?)$ unix:/usr/local/var/run/php72-fpm.sock|fcgi://127.0.0.1:9072/Users/huytran/working/dev/dev-web/php &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The change is to add &lt;code&gt;unix:/usr/local/var/run/php72-fpm.sock|&lt;/code&gt; before &lt;code&gt;fcgi://...&lt;/code&gt; and remove the captured request URI &lt;code&gt;/$1&lt;/code&gt; at the end.&lt;/p&gt; &lt;p&gt;Similarly, if we switch to Apache handler as above, we update the Apache configuration accordingly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-apacheconf&#34;&gt;&amp;lt;Proxy &amp;quot;unix:/usr/local/var/run/php72-fpm.sock|fcgi://localhost:9072/&amp;quot; enablereuse=on max=10&amp;gt; &amp;lt;/Proxy&amp;gt; &amp;lt;FilesMatch &amp;quot;\.php$&amp;quot;&amp;gt; &amp;lt;If &amp;quot;-f %{REQUEST_FILENAME}&amp;quot;&amp;gt; SetHandler &amp;quot;proxy:unix:/usr/local/var/run/php72-fpm.sock|fcgi://127.0.0.1:9072/&amp;quot; &amp;lt;/If&amp;gt; &amp;lt;/FilesMatch&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We should ensure the configurations are good and then restart the servers afterwards.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# check Apache config $ apachectl -t Syntax OK # check php-fpm config $ php-fpm -t [30-Sep-2017 19:39:46] NOTICE: configuration file /usr/local/etc/php/7.2/php-fpm.conf test is successful # restart servers $ brew services restart httpd $ brew services restart php72 &lt;/code&gt;&lt;/pre&gt;</description></item><item><title>C√°ch x∆∞ng h√¥ h·ªç h√†ng (st)</title><link>https://htr3n.github.io/2016/08/cach-xung-ho/<pubdate>Sun, 07 Aug 2016 00:00:00 +0000</pubdate><guid>ea6fd974f85bfad39608b10181e73ad4</guid><description>&lt;p&gt;B√†i s∆∞u t·∫ßm v·ªÅ c√°ch x∆∞ng h√¥ v·ªõi h·ªç h√†ng n·ªôi ngo·∫°i l∆∞u l·∫°i ƒë√¢y th·ªÉ tham kh·∫£o v·ªÅ sau.&lt;/p&gt; &lt;h2 id=&#34;v·ªõi-h·ªç-n·ªôi-t·ª©c-l√†-h·ªç-h√†ng-b√™n-cha&#34;&gt;V·ªõi h·ªç n·ªôi (t·ª©c l√† h·ªç h√†ng b√™n cha)&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;C√°c anh c·ªßa ba v√† v·ª£ c·ªßa h·ªç = b√°c&lt;/li&gt; &lt;li&gt;C√°c em trai c·ªßa ba = ch√∫.&lt;/li&gt; &lt;li&gt;V·ª£ c·ªßa em trai c·ªßa ba = th√≠m.&lt;/li&gt; &lt;li&gt;C√°c em g√°i, ch·ªã g√°i c·ªßa = c√¥.&lt;/li&gt; &lt;li&gt;Ch·ªìng c·ªßa em g√°i, ch·ªã g√°i c·ªßa ba = d∆∞·ª£ng.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&#34;v·ªõi-h·ªç-ngo·∫°i-t·ª©c-h·ªç-h√†ng-b√™n-m·∫π&#34;&gt;V·ªõi h·ªç ngo·∫°i (t·ª©c h·ªç h√†ng b√™n m·∫π)&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;C√°c anh, em trai c·ªßa m·∫π = c·∫≠u.&lt;/li&gt; &lt;li&gt;V·ª£ c·ªßa anh trai, em trai c·ªßa m·∫π = m·ª£&lt;/li&gt; &lt;li&gt;C√°c ch·ªã, em g√°i c·ªßa m·∫π = d√¨.&lt;/li&gt; &lt;li&gt;Ch·ªìng c√°c ch·ªã, em g√°i c·ªßa m·∫π = d∆∞·ª£ng.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&#34;c√≤n-c√°ch-x∆∞ng-h√¥-b√™n-gia-ƒë√¨nh-sui-gia&#34;&gt;C√≤n c√°ch x∆∞ng h√¥ b√™n gia ƒë√¨nh sui gia&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;V·ª£ c·ªßa em trai = em d√¢u.&lt;/li&gt; &lt;li&gt;Ch·ªìng c·ªßa em g√°i = em r·ªÉ.&lt;/li&gt; &lt;li&gt;V·ª£ c·ªßa anh trai = ch·ªã d√¢u.&lt;/li&gt; &lt;li&gt;Ch·ªìng c·ªßa ch·ªã g√°i = anh r·ªÉ.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;ƒê·∫∑c bi·ªát b·∫°n c√≥ t·ªõi 8 c·ªë g·ªìm 4 c·ªë l√† √¥ng b√† n·ªôi ba, √¥ng b√† ngo·∫°i ba v√† 4 c·ªë n·ªØa l√† √¥ng b√† n·ªôi m·∫π, √¥ng b√† ngo·∫°i m·∫π.&lt;/p&gt; &lt;p&gt;Ng∆∞·ªùi mi·ªÅn Nam g·ªôp chung c√°c c·ªë √¥ng, c·ªë b√† (c√°c c·∫∑p) th√†nh m·ªôt g·ªçi cho d·ªÖ nh∆∞ng n√™n nh·ªõ b·∫°n ch·ªâ c√≥ duy nh·∫•t 1 c·ªë n·ªôi l√† √¥ng b√† n·ªôi c·ªßa ba c√≤n 3 c·∫∑p √¥ng b√† c·ªë kia l√† c·ªë ngo·∫°i h·∫øt theo quy ƒë·ªãnh.&lt;/p&gt;</description></item><item><title>Khen con (st)</title><link>https://htr3n.github.io/2015/07/khen-con-st/<pubdate>Wed, 01 Jul 2015 00:00:00 +0000</pubdate><guid>5101faee12a6a170cceac095e50f7d80</guid><description>&lt;h2 id=&#34;th√≥i-quen-khen-ng·ª£i-con-gi·ªèi-hay-kh·∫£-nƒÉng-s·∫µn-c√≥-c·ªßa-con&#34;&gt;Th√≥i quen khen ng·ª£i con gi·ªèi hay kh·∫£ nƒÉng s·∫µn c√≥ c·ªßa con&lt;/h2&gt; &lt;p&gt;M√¨nh ƒë·ªÉ th·∫•y kh√¥ng ch·ªâ cha m·∫π Vi·ªát m√† c·∫£ cha m·∫π ng∆∞·ªùi n∆∞·ªõc ngo√†i n·ªØa th∆∞·ªùng hay con &amp;ldquo;gi·ªèi qu√°&amp;rdquo; &amp;ldquo;th√¥ng minh qu√°&amp;rdquo; &amp;ldquo;sao con l√†m nhanh v·∫≠y&amp;rdquo;. M·ªõi h√¥m qua th√¥i, m√¨nh ƒë·ªÉ √Ω c√≥ m·ªôt b√† m·∫π ƒë·ªë ƒë·ª©a con h∆°n 2 tu·ªïi c·ªßa m√¨nh &amp;ldquo;con ch√≥ k√™u nh∆∞ th·∫ø n√†o&amp;rdquo;, ƒë·ª©a b√© tr·∫£ l·ªùi &amp;ldquo;g√¢u,g√¢u&amp;rdquo;, th·∫ø l√† b√† m·∫π khen lu√¥n &amp;ldquo;gi·ªèi qu√°&amp;rdquo;. Ng√†y tr∆∞·ªõc c√≥ d·ªãp ƒëi nh√† th·ªù, m√¨nh ƒë·ªÉ √Ω th·∫•y nh·ªØng ng∆∞·ªùi ·ªü trong Nam, c·ª© tr·∫ª con l√†m g√¨ t·ªët hay ngoan c≈©ng quen mi·ªáng khen &amp;ldquo;gi·ªèi qu√°&amp;rdquo; &amp;ldquo;ngoan qu√°&amp;rdquo;.&lt;/p&gt; &lt;p&gt;Nh·ªØng khen ng·ª£i nh∆∞ th·∫ø n√†y c√≥ ·∫£nh h∆∞·ªüng t·ªõi s·ª± ph√°t tri·ªÉn t√≠nh c√°ch, c√°ch nh√¨n nh·∫≠n v·∫•n ƒë·ªÅ c·ªßa tr·∫ª nh∆∞ th·∫ø n√†o?&lt;/p&gt; &lt;h2 id=&#34;khen-ng·ª£i-con-gi·ªèi-th√¥ng-minh-l√†-kh√¥ng-t·ªët&#34;&gt;Khen ng·ª£i con gi·ªèi, th√¥ng minh l√† kh√¥ng t·ªët&lt;/h2&gt; &lt;p&gt;Khen ng·ª£i con c√°i l√† m·ªôt vi·ªác b·ªë m·∫π n√™n l√†m v√¨ l·ªùi khen gi√∫p tr·∫ª ƒë∆∞·ª£c kh√≠ch l·ªá v√† t·ª± tin h∆°n. Nh∆∞ng kh√¥ng ph·∫£i l·ªùi khen n√†o c≈©ng c√≥ t√°c d·ª•ng nh∆∞ v·∫≠y. Nghi√™n c·ª©u ch·ªâ ra r·∫±ng, khen ng·ª£i con c√°i l√† &amp;ldquo;gi·ªèi v√† th√¥ng minh&amp;rdquo; m·ªôt c√°ch chung chung th·∫≠m ch√≠ s·∫Ω c√≥ t√°c d·ª•ng ng∆∞·ª£c l·∫°i. C√°ch cha m·∫π khen ng·ª£i con c√°i c≈©ng ·∫£nh h∆∞·ªüng r·∫•t l·ªõn ƒë·∫øn kh·∫£ nƒÉng ƒë·ªëi m·∫∑t v·ªõi th·∫•t b·∫°i, s·∫µn s√†ng ch·∫•p nh·∫≠n th·ª≠ th√°ch v√† ki√™n tr√¨ tr∆∞·ªõc nh·ªØng v·∫•n ƒë·ªÅ kh√≥.&lt;/p&gt; &lt;p&gt;Theo nghi√™n c·ª©u c·ªßa Carol Dwreck, Khi ƒë·ªëi m·∫∑t v·ªõi nh·ªØng v·∫•n ƒë·ªÅ kh√≥ (h∆°n kh·∫£ nƒÉng hi·ªán t·∫°i c·ªßa m√¨nh), nh·ªØng ƒë·ª©a tr·∫ª quen ƒë∆∞·ª£c khen l√† th√¥ng minh c√≥ xu h∆∞·ªõng r·ª•t r√®, kh√¥ng mu·ªën gi·∫£i quy·∫øt, do ƒë√≥ ch√∫ng t·ª± h·∫°n ch·∫ø c∆° h·ªôi h·ªçc h·ªèi, n√¢ng cao ki·∫øn th·ª©c, kƒ© nƒÉng c·ªßa m√¨nh. Ng∆∞·ª£c l·∫°i nh·ªØng ƒë·ª©a tr·∫ª th∆∞·ªùng ƒë∆∞·ª£c khen ng·ª£i b·ªüi s·ª± n·ªó l·ª±c c·ªßa m√¨nh th√¨ vui v·∫ª, th·∫≠m ch√≠ r·∫•t y√™u th√≠ch nh·ªØng v·∫•n ƒë·ªÅ kh√≥. Tr∆∞·ªõc v·∫•n ƒë·ªÅ kh√≥, nh·ªØng ƒë·ª©a tr·∫ª n√†y th·∫≠m ch√≠ c√≤n reo l√™n &amp;ldquo;Th·∫≠t l√† th√∫ v·ªã, ch√°u th√≠ch nh·ªØng b√†i to√°n h√≥c b√∫a ki·ªÉu n√†y&amp;rdquo;. V√† khi ch√∫ng th·∫•t b·∫°i, nh·ªØng ƒë·ª©a tr·∫ª ƒë∆∞·ª£c khen l√† th√¥ng minh th∆∞·ªùng c·∫£m th·∫•y m·∫•t ƒëi t·ª± tin, trong khi nh·ªØng ƒë·ª©a tr·∫ª ƒë∆∞·ª£c khen ƒë√£ n·ªó l·ª±c n√≥i &amp;ldquo;c√≥ th·ªÉ ch√°u ƒë√£ ch∆∞a c·ªë g·∫Øng h·∫øt s·ª©c m√¨nh&amp;rdquo;.&lt;/p&gt; &lt;p&gt;Dr. Dweck n√≥i &amp;ldquo;Khen ng·ª£i tr√≠ th√¥ng minh c·ªßa tr·∫ª kh√¥ng nh·ªØng kh√¥ng n√¢ng cao s·ª± t·ª± tin c·ªßa tr·∫ª m√† c√≤n khuy·∫øn kh√≠ch ch√∫ng quen v·ªõi vi·ªác lo l·∫Øng s·ª£ th·∫•t b·∫°i v√† s·∫Ω l·∫£ng tr√°nh kh√¥ng ch·∫•p nh·∫≠n th·ª≠ th√°ch&amp;rdquo; &amp;ldquo;Tuy nhi√™n khi tr·∫ª ƒë∆∞·ª£c d·∫°y v·ªÅ gia tr·ªã c·ªßa vi·ªác t·∫≠p trung, t√¨m chi·∫øn l∆∞·ª£c v√† chƒÉm ch·ªâ h·∫øt s·ª©c m√¨nh khi ƒë·ªëi m·∫Øt v·ªõi nh·ªØng v·∫•n ƒë·ªÅ kh√≥ trong h·ªçc t·∫≠p, ch√∫ng s·∫Ω ƒë∆∞·ª£c khuy·∫øn kh√≠ch gi·ªØ v·ªØng ƒë·ªông l·ª±c, s·ª± t·ª± tin v√† th√†nh th√≠ch c·ªßa m√¨nh&amp;rdquo;&lt;/p&gt; &lt;p&gt;&amp;ldquo;Nh·ªØng ƒë·ª©a tr·∫ª ƒë∆∞·ª£c khen ng·ª£i l√† th√¥ng minh th∆∞·ªùng quan t√¢m ƒë·∫øn vi·ªác xem nh·ªØng b·∫°n kh√°c l√†m nh∆∞ th·∫ø n√†o h∆°n l√† quan t√¢m ƒë·∫øn vi·ªác t√¨m t√≤i chi·∫øn l∆∞·ª£c m·ªõi ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ&amp;rdquo;&lt;/p&gt; &lt;h2 id=&#34;khen-con-nh∆∞-th·∫ø-n√†o&#34;&gt;Khen Con Nh∆∞ Th·∫ø N√†o&lt;/h2&gt; &lt;h3 id=&#34;khen-ng·ª£i-s·ª±-c·∫©n-th·∫≠n&#34;&gt;Khen ng·ª£i s·ª± c·∫©n th·∫≠n&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&amp;ldquo;Con l√†m r·∫•t l√† t·ªâ m·ªâ, c·∫©n th·∫≠n. Th·∫£o n√†o m√† m·∫π th·∫•y kh√¥ng v·∫øt m·ª±c n√†o r√¢y ra ngo√†i c·∫£&amp;rdquo;&lt;/li&gt; &lt;li&gt;&amp;ldquo;S·ª± t·ªâ m·ªâ c·∫©n th·∫≠n c·ªßa con ƒë√£ ƒëem l·∫°i k·∫øt qu·∫£ t·ªët r·ªìi, con th·∫•y ko?&amp;rdquo;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&#34;khen-ng·ª£i-s·ª±-b√¨nh-tƒ©nh&#34;&gt;Khen ng·ª£i s·ª± b√¨nh tƒ©nh&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;M·∫π r·∫•t vui v√¨ con ƒë√£ gi·ªØ ƒë∆∞·ª£c b√¨nh tƒ©nh m·∫∑c d√π kh·ªëi g·ªó x√¢y d·ª±ng c·ªßa con c·ª© ƒë·ªï xu·ªëng.&lt;/li&gt; &lt;li&gt;H√¥m nay con ƒë√£ d·∫°y m·∫π m·ªôt b√†i h·ªçc v·ªÅ s·ª± c·∫ßn thi·∫øt c·ªßa vi·ªác gi·ªØ b√¨nh tƒ©nh ƒë√≥.&lt;/li&gt; &lt;li&gt;B√¨nh tƒ©nh lu√¥n lu√¥n gi√∫p con ƒë·∫°t ƒë∆∞·ª£c m·ª•c ƒë√≠ch ƒë√∫ng ko?&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&#34;khen-ng·ª£i-s·ª±-n·ªó-l·ª±c-ki√™n-tr√¨-c·ªë-g·∫Øng&#34;&gt;Khen ng·ª£i s·ª± n·ªó l·ª±c, ki√™n tr√¨, c·ªë g·∫Øng&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&amp;ldquo;cu·ªëi c√πng th√¨ con c≈©ng l√†m ƒë∆∞·ª£c r·ªìi&amp;rdquo;&lt;/li&gt; &lt;li&gt;&amp;ldquo;M·∫π r·∫•t h·∫°nh ph√∫c khi con bi·∫øt n·ªó l·ª±c nh∆∞ v·∫≠y&amp;rdquo;&lt;/li&gt; &lt;li&gt;&amp;ldquo;Con ƒë√£ r·∫•t c·ªë g·∫Øng ki√™n tr√¨ v√† con ƒë√£ th√†nh c√¥ng r·ªìi&amp;rdquo;&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&#34;khen-ng·ª£i-s·ª±-chƒÉm-ch·ªâ&#34;&gt;Khen ng·ª£i s·ª± chƒÉm ch·ªâ&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&amp;ldquo;Con ƒë√£ r·∫•t chƒÉm ch·ªâ √¥n b√†i. M·∫π nghƒ© con ho√†n to√†n x·ª©ng ƒë√°ng v·ªõi ƒëi·ªÉm 10 n√†y&amp;rdquo;&lt;/li&gt; &lt;li&gt;&amp;ldquo;UI, h√¥m nay con m·∫π chƒÉm ch·ªâ, hang say qu√°. Con th·ª±c s·ª± l√†m m·∫π t·ª± h√†o v·ªÅ con.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&#34;khen-ng·ª£i-s·ª±-t·∫≠p-trung&#34;&gt;Khen ng·ª£i s·ª± t·∫≠p trung&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&amp;ldquo;M·∫π ƒë·ªÉ √Ω th·∫•y con r·∫•t say s∆∞a, t·∫≠p trung x·∫øp h√¨nh&amp;rdquo;. C√≥ l·∫Ω v√¨ th·∫ø m√† h√¥m nay con x·∫øp ti·∫øn b·ªô h∆°n h·∫≥n&amp;rdquo;&lt;/li&gt; &lt;li&gt;&amp;ldquo;M·∫π ƒë·ªÉ √Ω th·∫•y con ƒë√£ r·∫•t t·∫≠p trung ƒë·ªçc s√°ch. Ch·∫Øc con ƒë√£ th·∫•y r·∫•t nhi·ªÅu ƒëi·ªÅu th√∫ v·ªã trong c√¢u chuy·ªán ƒë√≥&amp;rdquo;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;M·ªói l·∫ßn tr·∫ª th√†nh c√¥ng trong b·∫•t c·ª© vi·ªác g√¨, ƒë·∫∑c bi·ªát nh·ªØng vi·ªác ƒë√≤i h·ªèi s·ª± c·ªë g·∫Øng, n·ªó l·ª±c, cha m·∫π h√£y √°p d·ª•ng nh·ªØng c√¢u khen ng·ª£i n√†y. Sau m·ªôt th·ªùi gian, h√£y ƒë·ªÉ √Ω s·ª± thay ƒë·ªïi trong c√°ch ·ª©ng x·ª≠ c·ªßa con tr∆∞·ªõc th·∫•t b·∫°i hay nh·ªØng v·∫•n ƒë·ªÅ kh√≥ v√† ch·ªù ƒë·ª£i c·∫£m gi√°c h·∫°nh ph√∫c khi nghe con h√†o h·ª©ng khoe th√†nh qu·∫£ c·ªßa m√¨nh v√† n√≥i &amp;ldquo;M·∫π ∆°i, con l√†m ƒëi l√†m l·∫°i, l√†m m√£i c≈©ng ƒë∆∞·ª£c, con ƒë√£ r·∫•t ki√™n tr√¨ m·∫π ·∫°&amp;rdquo;.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;M·ªói l·ªùi n√≥i c·ªßa cha m·∫π ƒë·ªÅu c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª± ph√°t tri·ªÉn t√≠nh c√°ch c·ªßa con, t∆∞∆°ng lai c·ªßa con&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;(B√†i vi·∫øt s∆∞u t·∫ßm ƒë√¢u ƒë√≥ tr√™n m·∫°ng)&lt;/p&gt;</description></item><item><title>Transitional words (st)</title><link>https://htr3n.github.io/2013/08/transitional-words-st/<pubdate>Tue, 20 Aug 2013 00:00:00 +0000</pubdate><guid>9bd01877c62dbdc67bb70c5ea65a260a</guid><description>&lt;p&gt;M·ªôt s·ªë transitional words r·∫•t h·ªØu d·ª•ng trong vi·ªác n·ªëi ho·∫∑c li√™n k·∫øt c√¢u ho·∫∑c ƒëo·∫°n vƒÉn trong ti·∫øng Anh. ƒê·ªÉ tr√°nh s·ª± l·∫∑p l·∫°i g√¢y nh√†m ch√°n, c√°c transitional words t∆∞∆°ng ƒë∆∞∆°ng n√™n ƒë∆∞·ª£c d√πng xen k·∫Ω.&lt;/p&gt; &lt;h3 id=&#34;addition&#34;&gt;Addition&lt;/h3&gt; &lt;p&gt;also, besides, furthermore, in addition, moreover, again&lt;/p&gt; &lt;h3 id=&#34;consequence&#34;&gt;Consequence&lt;/h3&gt; &lt;p&gt;accordingly, as a result, consequently, hence, otherwise, so then, therefore, thus, there upon&lt;/p&gt; &lt;h3 id=&#34;summarizing&#34;&gt;Summarizing&lt;/h3&gt; &lt;p&gt;after all, all in all, all things considered, briefly, by and large, in any case, in any event, in brief, in conclusion, on the whole, in short, in summary, in the final analysis, in the long run, on balance, to sum up, to summarize, finally&lt;/p&gt; &lt;h3 id=&#34;generalizing&#34;&gt;Generalizing&lt;/h3&gt; &lt;p&gt;as a rule, as usual, for the most part, generally, generally speaking, ordinarily, usually&lt;/p&gt; &lt;h3 id=&#34;restatement&#34;&gt;Restatement&lt;/h3&gt; &lt;p&gt;in essence, in other words, namely, that is, that is to say, in short, in brief, to put it differently&lt;/p&gt; &lt;h3 id=&#34;contrast-and-comparison&#34;&gt;Contrast and Comparison&lt;/h3&gt; &lt;p&gt;contrast, by the same token, conversely, instead, likewise, on one hand, on the other hand, on the contrary, rather, similarly, yet, but, however, still, nevertheless, in contrast&lt;/p&gt; &lt;h3 id=&#34;sequence&#34;&gt;Sequence&lt;/h3&gt; &lt;p&gt;at first, first of all, to begin with, in the first place, at the same time, for now, for the time being, the next step, in time, in turn, later on, meanwhile, next, then, soon, the meantime, later, while, earlier, simultaneously, afterward, in conclusion&lt;/p&gt; &lt;h3 id=&#34;diversion&#34;&gt;Diversion&lt;/h3&gt; &lt;p&gt;by the way, incidentally&lt;/p&gt; &lt;h3 id=&#34;illustration&#34;&gt;Illustration&lt;/h3&gt; &lt;p&gt;for example, for instance, for one thing&lt;/p&gt; &lt;h3 id=&#34;similarity&#34;&gt;Similarity&lt;/h3&gt; &lt;p&gt;likewise, similar, moreover&lt;/p&gt; &lt;h3 id=&#34;direction&#34;&gt;Direction&lt;/h3&gt; &lt;p&gt;here, there, over there, beyond, nearly, opposite, under, above, to the left, to the right, in the distance&lt;/p&gt;</description></item><item><title>S·∫Øp x·∫øp tr√≠ch d·∫´n (citations) trong (La)TeX</title><link>https://htr3n.github.io/2009/01/sap-xep-trich-dan-latex/<pubdate>Thu, 15 Jan 2009 00:00:00 +0000</pubdate><guid>481c3a6c849b3c62c04fc32d65fccc32</guid><description>&lt;p&gt;LaTeX cho ph√©p t·∫°o c√°c tr√≠ch d·∫´n (citations) ƒë·ªÉ tham chi·∫øu ƒë·∫øn c√°c t√†i li·ªáu tham kh·∫£o t∆∞∆°ng ·ª©ng. C√°c tr√≠ch d·∫´n, t√πy theo ƒë·ªãnh d·∫°ng (format/style) c·ªßa t√†i li·ªáu, c√≥ th·ªÉ d·∫°ng s·ªë nh∆∞ &lt;code&gt;[1, 2]&lt;/code&gt; ho·∫∑c d·∫°ng ch·ªØ nh∆∞ &lt;code&gt;[Lamport94]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;M·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n nh∆∞ sau&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\LaTeX{} \cite{latex} is a document preparation system for the \TeX{} \cite{tex} typesetting program. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;s·∫Ω t·∫°o ra k·∫øt qu·∫£&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;LaTeX [1] is a document preparation system for the TeX [2] typesetting program. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Trong v√≠ d·ª• tr√™n, &lt;code&gt;[1]&lt;/code&gt; v√† &lt;code&gt;[2]&lt;/code&gt; l√† c√°c tr√≠ch d·∫´n. T√†i li·ªáu tham kh·∫£o t∆∞∆°ng ·ª©ng s·∫Ω ƒë∆∞·ª£c ƒë·ªÉ trong ph·∫ßn &lt;code&gt;\bibliography{}&lt;/code&gt;. Nhi·ªÅu tr√≠ch d·∫´n li√™n k·∫ø c√≥ th·ªÉ ƒë∆∞·ª£c gom l·∫°i v√† li·ªát k√™ chung trong m·ªôt c·∫∑p d·∫•u ngo·∫∑c vu√¥ng nh∆∞ sau &lt;code&gt;[6, 4, 5, 22, 27, 29]&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;M·∫∑c ƒë·ªãnh trong tr∆∞·ªùng h·ª£p nhi·ªÅu tr√≠ch d·∫´n, LaTeX kh√¥ng x·∫øp th·ª© t·ª± v√† kh√¥ng thu g·ªçn cho d·ªÖ nh√¨n. N·∫øu mu·ªën thu g·ªçn, v√≠ d·ª• nh∆∞ &lt;code&gt;[4‚Äì6, 22, 27, 29]&lt;/code&gt; th√¨ c√≥ th·ªÉ d√πng &lt;a href=&#34;http://www.ctan.org/tex-archive/help/Catalogue/entries/natbib.html&#34;&gt;natbib&lt;/a&gt; ho·∫∑c &lt;a href=&#34;http://www.ctan.org/tex-archive/macros/latex/contrib/cite&#34;&gt;cite&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;H√£y ƒë·∫∑t nh·ªØng d√≤ng sau ·ªü ph·∫ßn ƒë·∫ßu file &lt;code&gt;.tex&lt;/code&gt;, tr∆∞·ªõc &lt;code&gt;\begin{document}&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage{cite} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ho·∫∑c&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[sort&amp;amp;compress]{natbib} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Sau ƒë√≥, ch·∫°y latex/pdflatex v√† bibtex nh∆∞ b√¨nh th∆∞·ªùng. D·∫°ng tr√≠ch d·∫´n trong b√†i s·∫Ω ƒë∆∞·ª£c s·∫Øp x·∫øp v√† nh√≥m l·∫°i h·ª£p l√Ω v√† d·ªÖ nh√¨n h∆°n. G√≥i &lt;code&gt;natbib&lt;/code&gt; c√≥ m·ªôt ƒë·∫∑c ƒëi·ªÉm l√† t∆∞∆°ng th√≠ch t·ªët v·ªõi g√≥i &lt;code&gt;hyperref&lt;/code&gt; (d√πng ƒë·ªÉ t·∫°o c√°c li√™n k·∫øt trong t√†i li·ªáu pdf). Do ƒë√≥, n·∫øu c·∫ßn d√πng &lt;a href=&#34;http://tug.ctan.org/pkg/hyperref&#34;&gt;hyperref&lt;/a&gt; th√¨ b·∫°n n√™n s·ª≠ d·ª•ng &lt;a href=&#34;http://www.ctan.org/tex-archive/help/Catalogue/entries/natbib.html&#34;&gt;natbib&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>T√≠nh ch·∫•t hai m·∫∑t c·ªßa m·ªôt v·∫•n ƒë·ªÅ</title><link>https://htr3n.github.io/2009/01/hai-mat-cua-mot-van-de/<pubdate>Thu, 15 Jan 2009 00:00:00 +0000</pubdate><guid>340930720d54b391b2e2e104a9ee70a2</guid><description>&lt;p&gt;Ng∆∞·ªùi ta th∆∞·ªùng d√πng c√¢u n√≥i &lt;a href=&#34;http://proverbhunter.com/proverb/every-medal-has-two-sides&#34;&gt;&amp;ldquo;&lt;em&gt;m·ªçi c√°i hu√¢n ch∆∞∆°ng lu√¥n c√≥ hai m·∫∑t&lt;/em&gt;&amp;ldquo;&lt;/a&gt; ƒë·ªÉ √°m ch·ªâ r·∫±ng s·ª± vi·ªác n√†o c≈©ng c√≥ nh·ªØng m·∫∑t ƒë·ªëi l·∫≠p nhau. Do ƒë√≥, ƒë·ª©ng tr∆∞·ªõc m·ªôt s·ª± ki·ªán (fact) ho·∫∑c m·ªôt lu·∫≠n ƒëi·ªÉm (argument), vi·ªác l·∫≠t t·ªõi l·∫≠t lui h·∫ßu ph√°t hi·ªán c√°c ng√≥c ng√°ch (c√°c m·∫∑t ƒë·ªëi l·∫≠p) nhi·ªÅu khi mang ƒë·∫øn nh·ªØng √Ω r·∫•t th√∫ v·ªã.&lt;/p&gt; &lt;p&gt;H√¥m tr∆∞·ªõc, nh√¢n ƒë·ªçc m·∫•y b√†i b√°o v·ªÅ c√°i b·∫Øt tay gi·ªØa vn v√† Microsoft, c√πng v·ªõi nh·ªØng nh·∫≠n ƒë·ªãnh c·ªßa m·∫•y nh√¢n v·∫≠t ch√≥p bu Microsoft nh∆∞ S.Balmer, B.Gates v·ªÅ xu h∆∞·ªõng m√£ ngu·ªìn m·ªü, v·ªÅ sao ch√©p b·∫•t h·ª£p ph√°p,v.v&amp;hellip; m√¨nh ch·ª£t c√≥ √Ω vui vui, ph√¢n t√≠ch xem c√°c m·∫∑t tr√°i c·ªßa nh·ªØng ƒëi·ªÅu m√† Microsoft nghƒ©/cho r·∫±ng x√¢m h·∫°i ƒë·∫øn l·ª£i √≠ch c·ªßa h·ªç.&lt;/p&gt; &lt;h3 id=&#34;windows-ƒë∆∞·ª£c-b·ªã-sao-ch√©p-l·∫≠u-b·∫•t-h·ª£p-ph√°p-h·∫ßu-nh∆∞-kh·∫Øp-th·∫ø-gi·ªõi&#34;&gt;Windows &amp;ldquo;ƒë∆∞·ª£c/b·ªã&amp;rdquo; sao ch√©p l·∫≠u (b·∫•t h·ª£p ph√°p) h·∫ßu nh∆∞ kh·∫Øp th·∫ø gi·ªõi&lt;/h3&gt; &lt;p&gt;ƒê·ª©ng v·ªÅ c√°i nh√¨n kinh doanh th√¨ ai c≈©ng d·ªÖ d√†ng ƒë·ªìng t√¨nh v·ªõi Microsoft l√† h·ªç b·ªã t·ªïn th·∫•t nhi·ªÅu $$$ do sao ch√©p trao ƒë·ªïi b·∫•t h·ª£p ph√°p. C√≥ ƒëi·ªÅu r·∫±ng, nh·ªØng ch·ªó n√†o xi·∫øt ƒë∆∞·ª£c th√¨ Microsoft ƒë√¢u c√≥ t·ª´, c√≤n nh·ªØng ch·ªó v·∫´n t·ªìn t·∫°i vi·ªác sao ch√©p b·∫•t h·ª£p ph√°p th√¨ c√≥ nghƒ©a l√† Microsoft kh√¥ng th·ªÉ n√†o xi·∫øt, kh√¥ng th·ªÉ n√†o v·∫Øt cho ra $$$ ƒë∆∞·ª£c (v√≠ d·ª• nh∆∞ ·ªü vn, l√¢u l√¢u khi c√≥ ph√°i ƒëo√†n qua th√¨ c√°c b√°c qu·∫£n l√Ω th·ªã tr∆∞·ªùng l·∫°i ch·∫°y ƒë·∫øn B√πi th·ªã Xu√¢n, T√¥n th·∫•t T√πng m√† thu ƒëƒ©a, thu m√°y, ph·∫°t h√†nh ch√≠nh.. cho x√¥m t·ª•, ch·ª© c√≥ ƒë·ªìng n√†o cho Microsoft ƒë√¢u). Nh∆∞ng, v·ªÅ m·∫∑t marketing th√¨ Microsoft l·ªùi to, th·∫≠m ch√≠ kh√¥ng t·ªën m·ªôt c·∫Øc b·∫°c m√† l·∫°i ƒë∆∞·ª£c nhi·ªát t√¨nh truy·ªÅn b√° r·ªông r√£i. Nh∆∞ v·∫≠y, ·ªü m·ªôt n∆°i m√† anh kh√¥ng t√†i n√†o d√πng lu·∫≠t ƒë·ªÉ b·∫Øt bu·ªôc ng∆∞·ªùi ta s·ª≠ d·ª•ng ph·∫ßn m·ªÅm b·∫£n quy·ªÅn, nh∆∞ng b√π l·∫°i th√¨ ng∆∞·ªùi ta qu·∫£ng c√°o mi·ªÖn ph√≠, ƒë·ª° t·ªën bao nhi√™u l√† chi ph√≠ PR, marketing, th·∫ø m√† anh c√≤n k√™u ca n·ªói gi·ªÅ&amp;hellip;(m√† th·ª±c ra th√¨ Microsoft c≈©ng ch·∫≥ng k√™u ca g√¨ v√¨ bi·∫øt c√≥ k√™u c≈©ng kh√¥ng ƒÉn thua, h·ªç c≈©ng ƒë∆∞·ª£c l·ª£i ph·∫ßn n√†o t·ª´ vi·ªác sao ch√©p l·∫≠u m√†, th√¥i th√¨ &amp;hellip;)&lt;/p&gt; &lt;h3 id=&#34;windows-c√≥-nhi·ªÅu-v·∫•n-ƒë·ªÅ-nhi·ªÅu-s·ª±-c·ªë-nhi·ªÅu-virus-worm&#34;&gt;Windows c√≥ nhi·ªÅu v·∫•n ƒë·ªÅ, nhi·ªÅu s·ª± c·ªë, nhi·ªÅu virus/worm&lt;/h3&gt; &lt;p&gt;ƒê√∫ng l√† v·ªÅ m·ªôt m·∫∑t n√†o ƒë√≥, n√≥ l√†m t·ªïn h·∫°i h√¨nh ·∫£nh c·ªßa Windows v√† Microsoft. B√°o ch√≠ offline, online &amp;hellip; nhan nh·∫£n tin t·ª©c v·ªÅ v·∫•n ƒë·ªÅ, virus, worm,&amp;hellip; tr√™n WINDOWS. Search engine c≈©ng th∆∞·ªùng cho k·∫øt qu·∫£ t√¨m ki·∫øm h√†ng ƒë·∫ßu khi c·∫ßn t√¨m c√°c th√¥ng tin nh∆∞ v·∫≠y v√† lu√¥n hi·ªán ra ·ªü nh·ªØng trang ƒë·∫ßu l√† WINDOWS. ..R·ªìi nh·ªØng c√¢u chuy·ªán t·∫øu ƒë√¢m th·ªçc nh·ªØng v·∫•n ƒë·ªÅ c·ªßa WINDOWS &amp;hellip;. WINDOWS &amp;hellip;. WINDOWS &amp;hellip;Nh∆∞ng m·∫∑t tr√°i c·ªßa nh·ªØng s·ª± ki·ªán tr√™n, v√¥ h√¨nh chung l·∫°i gi√∫p cho c√¥ng t√°c ti·∫øp th·ªã h√¨nh ·∫£nh WINDOWS th√™m ph·∫ßn ƒë·∫Øc l·ª£i. Ng√†y n√†y qua ng√†y kh√°c, ai ai c≈©ng nghe WINDOWS, n√≥i v·ªÅ WINDOWS ri·∫øt r·ªìi c·ª© t∆∞·ªüng l√† tr√™n th·∫ø gi·ªõi n√†y h√¨nh nh∆∞ ch·ªâ c√≥ WINDOWS !?! M·ª•c ti√™u t·ªëi h·∫≠u c·ªßa vi·ªác ti·∫øp th·ªã l√† c·ªë g·∫Øng nh·ªìi nh√©t v√†o ƒë·∫ßu, v√†o suy nghƒ© c·ªßa m·ªçi ng∆∞·ªùi nh·ªØng h√¨nh ·∫£nh, √¢m thanh, logo c·ªßa s·∫£n ph·∫©m&amp;hellip;ch·ª© c√≤n g√¨ n·ªØa !!! (n√≥i th·∫ø th√¥i, ch·ª© Windows m√† c√†ng ng√†y c√†ng nhi·ªÅu s·ª± c·ªë th√¨ ng∆∞·ªùi ta b·ªè ch·∫°y h·∫øt √°)&lt;/p&gt; &lt;h3 id=&#34;windows-b·ªã-linux-c·∫°nh-tranh-kh·ªëc-li·ªát-l√†m-cho-thu-h·∫πp-th·ªã-ph·∫ßn&#34;&gt;Windows b·ªã Linux c·∫°nh tranh kh·ªëc li·ªát l√†m cho thu h·∫πp th·ªã ph·∫ßn&lt;/h3&gt; &lt;p&gt;ƒê√∫ng l√† th·ªã ph·∫ßn Windows c√≥ gi·∫£m ƒëi r√µ r·ªát v√† th·ªã ph·∫ßn Linux tƒÉng. ƒê√∫ng l√† c·ªông ƒë·ªìng Linux v√† m√£ ngu·ªìn m·ªü ƒë√£ tr·ªü th√†nh ƒë·ªëi tr·ªçng ƒë√°ng g·ªùm c·ªßa Windows. Nh∆∞ng m·∫∑t tr√°i c·ªßa vi·ªác n√†y l√† g√¨? S·ª± c·∫°nh tranh m·∫∑c d√π l√†m gi·∫£m th·ªã ph·∫ßn c·ªßa Windows, nh∆∞ng l·∫°i c√≥ t√°c d·ª•ng b·∫•t ng·ªù l√† th√∫c ƒë·∫©y, t·∫°o s·ª©c √©p l·ªõn h∆°n cho ƒë·ªôi ng≈© ph√°t tri·ªÉn c·ªßa Microsoft. Trong m·ªôt kho·∫£ng th·ªùi gian d√†i th·ªëng tr·ªã th·ªã tr∆∞·ªùng desktop OS, h·∫ßu nh∆∞ c√°c s·∫£n ph·∫©m c·ªßa Microsoft c√†ng ng√†y c√†ng ƒëi xu·ªëng, c√†ng k√©m s√°ng t·∫°o ƒëi. M·ªôt trong c√°c nguy√™n nh√¢n ti·ªÅm ·∫©n, b·∫•t th√†nh vƒÉn c√≥ l·∫Ω l√† s·ª± ch·ªß quan, gi·ªëng nh∆∞ ng·ªß qu√™n tr√™n chi·∫øn th·∫Øng (v√¨ h·ªç nghƒ© l√† kh√¥ng c√≥ &amp;ldquo;ƒë·ªëi th·ªß x·ª©ng t·∫ßm&amp;rdquo;). Y nh∆∞ ki·ªÉu m·∫•y ƒë·ªôi b√≥ng, Barca, MU, Brazil.. sau khi v√¥ ƒë·ªãch l√† c·∫ßu th·ªß ƒë√° l∆° m∆°, ƒëi b·ªô, r·ªìi c√≥ khi thua c·∫£ m·∫•y ƒë·ªôi h·∫°ng g√† n·ªØa. ƒê·∫øn khi c√≥ ƒë·ªëi th·ªß xu·∫•t hi·ªán, c√≥ s·ª± ƒëe d·ªça th√¨ h·ªç m·ªõi &amp;ldquo;b·ª´ng t·ªânh&amp;rdquo;. Ch·ª© n·∫øu Linux kh√¥ng c·∫°nh tranh kh·ªëc li·ªát th√¨ kh√¥ng bi·∫øt m·∫•y OS v·ªÅ sau c·ªßa Microsoft s·∫Ω ra sao n·ªØa. C·∫°nh tranh s·∫Ω l√† ƒë√≤n b·∫©y cho s·ª± ph√°t tri·ªÉn.&lt;/p&gt;</description></item><item><title>Ng∆∞·ªùi l·ªõn h√£y t·ª≠ t·∫ø h∆°n v·ªõi t∆∞∆°ng lai ƒë·∫•t n∆∞·ªõc</title><link>https://htr3n.github.io/2008/12/nguoi-lon-hay-tu-te-hon/<pubdate>Sun, 28 Dec 2008 00:00:00 +0000</pubdate><guid>efb0c6ecc984ccf2256605d963c3f273</guid><description>&lt;p&gt;Th·ªânh tho·∫£ng l√™n b√°o ƒë·ªÉ d√µi theo t√¨nh h√¨nh trong n∆∞·ªõc, c≈©ng c√≥ nhi·ªÅu tin vui v·ªÅ s·ª± ƒë·ªïi m·ªõi, ph√°t tri·ªÉn, v·ªÅ s·ª± nƒÉng ƒë·ªông c·ªßa nh·ªØng b·∫°n c√πng th·∫ø h·ªá ho·∫∑c tr·∫ª h∆°n, c≈©ng c√≥ nhi·ªÅu h·∫°t s·∫°n l√†m √™ rƒÉng. ·ª™, th√¨ c≈©ng t·ª± nh·ªß r·∫±ng tr√™n ƒë·ªùi kh√¥ng c√≥ m·ªôt c√°i g√¨ th·ª±c s·ª± ho√†n h·∫£o v√† m·ªü l√≤ng ra ƒë√≥n nh·∫≠n v·ªõi m·ªôt ni·ªÅm tin r·∫±ng nh·ªØng g√¨ ti·∫øn b·ªô, t·ªët ƒë·∫πp r·ªìi s·∫Ω ng√†y m·ªôt nhi·ªÅu h∆°n, nhi·ªÅu h∆°n, s·∫Ω l·∫•n √°t v√† tri·ªát ti√™u nh·ªØng g√¨ ch∆∞a hay. Cu·ªëi tu·∫ßn ƒë·ªçc ƒë∆∞·ª£c tin &lt;a href=&#34;http://www.tuoitre.com.vn/Tianyon/Index.aspx?ArticleID=229540&amp;amp;ChannelID=3&#34;&gt;n√†y t·ª´ Tu·ªïi tr·∫ª&lt;/a&gt; m√† kh√¥ng vui qu√° ch·ª´ng.&lt;/p&gt; &lt;p&gt;Th·ª≠ ƒëi·ªÉm l·∫°i m·ªôt v√†i v·ª• t∆∞∆°ng t·ª± g·∫ßn nh·∫•t: &lt;a href=&#34;http://www.tuoitre.com.vn/Tianyon/Index.aspx?ArticleID=197574&amp;amp;ChannelID=3&#34;&gt;v·ª• b√© Tr√¢m ·ªü ƒê·ªìng Th√°p&lt;/a&gt;, v·ª• &lt;a href=&#34;http://www.tuoitre.com.vn/Tianyon/Index.aspx?ArticleID=197104&amp;amp;ChannelID=13&#34;&gt;n√†y&lt;/a&gt;, v·ª• &lt;a href=&#34;http://www.tuoitre.com.vn/Tianyon/Index.aspx?ArticleID=229076&amp;amp;ChannelID=89&#34;&gt;em Hi·ªÅn ·ªü bu√¥n ƒê√¥n&lt;/a&gt;. R·∫•t nhi·ªÅu √Ω ki·∫øn b·ª©c x√∫c, r·∫•t nhi·ªÅu s·ª± &amp;ldquo;b·ª©c x√∫c&amp;rdquo; c·ªßa quan ch·ª©c c√°c ng√†nh, b·ªô, th·∫≠m ch√≠ c·∫£ nh·ªØng ƒëau l√≤ng v√† bƒÉn khoƒÉn c·ªßa nh·ªØng ng∆∞·ªùi c√≥ ch·ª©c c√≥ quy·ªÅn (kh√¥ng th·ªÉ lo·∫°i tr·ª´ ki·ªÉu ƒëau l√≤ng &amp;ldquo;ch√≠nh tr·ªã&amp;rdquo;). Nh∆∞ng nh·ªØng s·ª± vi·ªác nh∆∞ th·∫ø n√†y kh√¥ng c√≥ d·∫•u hi·ªáu ƒë∆∞·ª£c c·∫£i thi·ªán m√† c√≥ xu h∆∞·ªõng ng√†y c√†ng t·ªá ƒëi. Nh·ªØng nguy√™n nh√¢n nh∆∞ c√°ch x·ª≠ l√Ω ƒë·ªëi t∆∞·ª£ng vi ph·∫°m (v√≠ d·ª• nh∆∞ &amp;ldquo;t·∫°m ƒë√¨nh ch·ªâ c√°c d√¢n qu√¢n&amp;rdquo; ·ªü v·ª• ƒë√°nh h·ªçc sinh l·ªõp 9 ·ªü Saigon)&amp;hellip; c≈©ng ch·ªâ l√† c√°i ng·ªçn, c≈©ng gi·ªëng nh∆∞ ki·ªÉu gi·∫£m tai n·∫°n giao th√¥ng b·∫±ng chi·∫øn d·ªãch m≈© b·∫£o hi·ªÉm ho·∫∑c l√† b·∫Øt bu·ªôc c√≥ k√≠nh chi·∫øu h·∫≠u.&lt;/p&gt; &lt;p&gt;C√°i c√°ch ƒë·ªëi x·ª≠ kh√¥ng hay (ho·∫∑c n√≥i n·∫∑ng l√† ki·ªÉu l√≠nh t·∫©y, ki·ªÉu quan nha) nh∆∞ th·∫ø n√†y v·ªõi th·∫ø h·ªá t∆∞∆°ng lai c·ªßa ƒë·∫•t n∆∞·ªõc v·∫´n c√≤n, th√¨ &amp;ldquo;ng∆∞·ªùi l·ªõn&amp;rdquo; c≈©ng n√™n t·ª± x·∫•u h·ªï v√† th√¥i ƒë·ª´ng phi·ªÅn tr√°ch v√¨ sao th·∫ø h·ªá tr·∫ª ng√†y nay th·∫ø n√†y th·∫ø kh√°c. Ng∆∞·ªùi l·ªõn ƒë·ªëi x·ª≠ hi·ªÅn h√≤a, ƒë·ªô l∆∞·ª£ng v√† t·ª≠ t·∫ø v·ªõi th·∫ø h·ªá tr·∫ª th√¨ c√≥ l·∫Ω th·∫ø h·ªá tr·∫ª s·∫Ω t·ª≠ t·∫ø h∆°n, ƒë√†ng ho√†ng h∆°n v√† s·∫Ω t·∫°o ra m·ªôt th·∫ø h·ªá con c√°i c·ªßa h·ªç c≈©ng t·ª≠ t·∫ø nh∆∞ th·∫ø.&lt;/p&gt; &lt;p&gt;Ng∆∞·ªùi l·ªõn v∆∞·ª£t ƒë√®n ƒë·ªè &amp;ldquo;l√†m g∆∞∆°ng&amp;rdquo; th√¨ kh√≥ m√† b·∫£o con c√°i h·ªç ch·ªù ƒë√®n xanh, ng∆∞·ªùi l·ªõn ƒë·ª•ng chuy·ªán l√† h√πng h√πng h·ªï h·ªï ƒë√≤i ƒÉn t∆∞∆°i nu·ªët s·ªëng ng∆∞·ªùi ta th√¨ kh√≥ m√† d·∫°y con c√°i ch·ªãu l√©p khi g·∫∑p chuy·ªán t∆∞∆°ng t·ª±? ng∆∞·ªùi l·ªõn th·∫£n nhi√™n ƒÉn h·ªëi l·ªô, nh·∫≠n phong b√¨, v∆° v√©t c·ªßa c√¥ng th√¨ l√†m sao d·∫°y con c√°i thanh li√™m, li√™m khi·∫øt (t·ªá h∆°n n·ªØa, c√≥ khi c√≤n d·∫°y con c√°i l√† n·∫øu m√¨nh kh√¥ng ƒÉn ng∆∞·ªùi kh√°c ƒÉn, ƒë·∫°i lo·∫°i th·∫ø)? ng∆∞·ªùi l·ªõn v·∫´n mu·ªën l√†m ƒÉn m·ªôt c√°ch ƒë·∫£o ƒëi√™n, ƒëi√™u ngoa, gian d·ªëi, h√†ng gi·∫£, h√†ng nh√°i th√¨ l√†m sao d·∫°y con c√°i thi·ªán t√¢m, trung th·ª±c? ng∆∞·ªùi l·ªõn v√¨ l·ª£i ri√™ng m√† b·∫•t ch·∫•p, ƒëang tay ƒë·∫ßu ƒë·ªôc n∆∞·ªõc, ƒë·∫ßu ƒë·ªôc ƒë·∫•t, ƒë·∫ßu ƒë·ªôc kh√¥ng kh√≠,&amp;hellip; th√¨ l√†m sao d·∫°y con c√°i b·∫£o v·ªá r·ª´ng, b·∫£o v·ªá ƒë·∫•t, b·∫£o v·ªá m√†u xanh? Ng∆∞·ªùi l·ªõn ƒëi ra n∆∞·ªõc ngo√†i ƒÉn c·∫Øp ·ªü si√™u th·ªã, ƒëi t√†u tr·ªën v√©, s·ªëng b·∫•t h·ª£p ph√°p, l√†m ƒÉn phi ph√°p, r∆∞·ªõc l·∫•y qu·ªëc nh·ª•c,&amp;hellip; th√¨ th·ª≠ h·ªèi l√†m sao d·∫°y con c√°i gi·ªØ danh d·ª±, th·ªÉ di·ªán qu·ªëc gia, qu·ªëc th·ªÉ, qu·ªëc th·ªëng?&lt;/p&gt; &lt;p&gt;T∆∞∆°ng lai ƒë·∫•t n∆∞·ªõc l√† c·ªßa nh·ªØng th·∫ø h·ªá tr·∫ª ti·∫øp n·ªëi cha anh. ƒê·∫ßu t∆∞ cho th·∫ø h·ªá tr·∫ª l√† ƒë·∫ßu t∆∞ cho th·ªãnh v∆∞·ª£ng v√† ph√°t tri·ªÉn l√¢u d√†i. Ng∆∞·ªùi l·ªõn, h√£y ƒë·ª´ng n√≥i ngo√†i mi·ªáng l√† y√™u n∆∞·ªõc, l√† th∆∞∆°ng n√≤i, l√† mong mu·ªën ƒë∆∞a n∆∞·ªõc ta ngang h√†ng v·ªõi nƒÉm ch√¢u b·ªën b·ªÉ, m√† h√†nh ƒë·ªông th√¨ l·∫°i ƒëang g√≥p ph·∫ßn n√†o l√†m suy hao, h∆∞ h·ªèng th·∫ø h·ªá tr·∫ª. H√£y ƒë·ªëi x·ª≠ t·ª≠ t·∫ø h∆°n v·ªõi th·∫ø h·ªá tr·∫ª th√¨ t∆∞∆°ng lai ƒë·∫•t n∆∞·ªõc m·ªõi mong ƒë∆∞·ª£c s√°ng s·ªßa.&lt;/p&gt;</description></item><item><title>Du h·ªçc sinh - chuy·ªán n√™n vui hay bu·ªìn</title><link>https://htr3n.github.io/2008/12/du-hoc-sinh/<pubdate>Sat, 27 Dec 2008 00:00:00 +0000</pubdate><guid>3e0cce6d6dc32a792070bacc035d62e8</guid><description>&lt;p&gt;H√¥m nay qua mailling list nh·∫≠n ƒë∆∞·ª£c link v·ªÅ b√†i b√°o &lt;a href=&#34;http://vietnamnet.vn/giaoduc/duhoc/2006/12/642385/&#34;&gt;n√†y&lt;/a&gt;, ƒë·ªÅ ng√†y 09/12/06, nh∆∞ng t√¥i nh·ªõ l√† c√≥ m·ªôt b√†i b√°o t∆∞∆°ng t·ª± tr√™n b√°o Thanh ni√™n m√πa Noel nƒÉm ngo√°i. B√†i b√°o tr√™n b√°o Thanh ni√™n ƒë√£ bi·∫øn m·∫•t (c√≥ l·∫Ω v√¨ v·∫•p ph·∫£i s·ª± ph·∫£n ƒë·ªëi t·ª´ c√°c du h·ªçc sinh v√† c·∫£ ƒë·ªçc gi·∫£ trong n∆∞·ªõc), gi·ªù l·∫°i xu·∫•t hi·ªán ·ªü Vietnamnet, v·ªõi ch√∫ th√≠ch l√† &amp;ldquo;Theo Th√¥ng tin th∆∞∆°ng m·∫°i&amp;rdquo;, t·ª©c l√† t·ª´ m·ªôt ngu·ªìn kh√°c n·ªØa. Xin tr√≠ch l·∫°i nh·ªØng ƒëo·∫°n g√¢y n√≥ng (m·∫∑t) nh·∫•t:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;chuy√™n gia du l·ªãch b·ª•i c√°c x·ª© Ch√¢u √Çu l√† Tr·∫ßn Long - du h·ªçc sinh Ph√°p √°p d·ª•ng tri·ªát ƒë·ªÉ nh·ªØng &amp;ldquo;m√°nh‚Äù m√† sinh vi√™n n∆∞·ªõc n√†o c√πng d√πng ƒë·ªÉ gi·∫£m thi·ªÉu chi ph√≠ cho nh·ªØng chuy·∫øn ƒëi: ‚Äú&lt;em&gt;N·∫øu nh∆∞ ƒëi nhi·ªÅu, b·∫°n s·∫Ω ph√°t hi·ªán th·∫•y l√† c√≥ nh·ªØng chuy·∫øn t√†u h·ªç kh√¥ng h·ªÅ ki·ªÉm tra v√©. V√≠ d·ª• tuy·∫øn ƒëi t·ª´ Monaco v·ªÅ Nice (Ph√°p) ch·∫≥ng h·∫°n, nh∆∞ng c√°i n√†y ai li·ªÅu l·∫Øm m·ªõi √°p d·ª•ng. Ho·∫∑c ·ªü ƒê·ª©c, c√≥ lo·∫°i v√© cu·ªëi tu·∫ßn WE gi√° 28 euro cho 5 ng∆∞·ªùi. M√¨nh c·ª© l√™n t√†u, ƒëi quanh qu·∫©n, th·∫ø n√†o ch·∫≥ng c√≥ m·ªôt c·ª• √¥ng c·ª• b√† ƒëi m·ªôt m√¨nh, ho·∫∑c m·ªôt nh√≥m khuy·∫øt 5 n√†o ƒë√≥ cho m√¨nh ƒëi k√©. N·∫øu h·ªç xu·ªëng ga tr∆∞·ªõc m√¨nh, m√¨nh xin l·∫°i v√© v√† ƒëi ti·∫øp&lt;/em&gt;&amp;hellip;&amp;rdquo;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;T√¥i kh√¥ng hi·ªÉu t√°c gi·∫£ b√†i b√°o nghƒ© th·∫ø n√†o m√† c·ªï x√∫y v√† ph·ªï bi·∫øn nh·ªØng t∆∞ t∆∞·ªüng nguy hi·ªÉm ki·ªÉu &amp;ldquo;&lt;em&gt;ƒëi t√†u chui&lt;/em&gt;&amp;rdquo; tr√™n m·∫∑t b√°o (b√°o Thanh ni√™n v√† vnN). V√† c≈©ng kh√¥ng hi·ªÉu, c√°c nh√¢n v·∫≠t ch√≠nh c·ªßa b√†i b√°o nghƒ© g√¨ m√† l·∫°i c√≥ th·ªÉ ph√°t bi·ªÉu v√† h√†nh ƒë·ªông nh∆∞ th·∫ø. T∆∞∆°ng lai c·ªßa ƒë·∫•t n∆∞·ªõc s·∫Ω ra sao n·∫øu (l·ª°) ƒë·∫∑t v√†o tay nh·ªØng ng∆∞·ªùi nh∆∞ h·ªç? D∆∞·ªùng nh∆∞ v·∫´n c√≤n ƒÉn s√¢u ƒë√¢u ƒë√≥ c√°i t∆∞ duy vƒÉn minh l√∫a n∆∞·ªõc thi·ªÉn c·∫≠n, ch·ªâ c√≥ bi·∫øt ƒë·∫øn b·∫£n th√¢n v√† ch√∫t l·ª£i √≠ch nh·ªè. Ch∆∞a c·∫ßn n√≥i to t√°t ƒë·∫øn vi·ªác l√†m x·∫•u ƒëi h√¨nh ·∫£nh ng∆∞·ªùi Vi·ªát trong m·∫Øt th·∫ø gi·ªõi b√™n ngo√†i, m√† h√£y n√≥i ƒë·∫øn l√≤ng t·ª± tr·ªçng c·ªßa b·∫£n th√¢n anh ta. Suy nghƒ© th·∫ø, h√†nh ƒë·ªông th·∫ø, ƒë·ªÉ r·ªìi ph√†n n√†n t·∫°i sao ·ªü n∆∞·ªõc s·ªü t·∫°i, ng∆∞·ªùi ta x√©t visa, gi·∫•y t·ªù gh√™ qu√° (v√¨ kh√¥ng tin t∆∞·ªüng); t·∫°i sao ng∆∞·ªùi Vi·ªát (v√† China n·ªØa) ƒëi CH Czech ch∆°i th√¨ &amp;ldquo;d√π c√≥ m·ªôt ng√†y c≈©ng ph·∫£i xin visa&amp;rdquo; trong khi c√¥ng d√¢n Sing, Th√°i, Nh·∫≠t th√¨ tho·∫£i m√°i. N·∫øu l·∫•y l√Ω do &amp;ldquo;v√¨ ngh√®o&amp;rdquo; l√† x·∫£o bi·ªán. ƒê·ªìng √Ω l√† ph·∫£i ti·∫øt ki·ªám, nh∆∞ng ƒë·ªÉ ti·∫øt ki·ªám v√†i ch·ª•c Euro m√† v·ª©t c·∫£ l√≤ng t·ª± tr·ªçng v√† danh d·ª± v√†o s·ªçt r√°c th√¨ c√≥ n√™n kh√¥ng?&lt;/p&gt; &lt;p&gt;Nh√¢n chuy·ªán n√†y, t√¥i nh·ªõ l·∫°i d·ªãp t√¢m s·ª± v·ªõi m·ªôt b√°c l√°i xe. L√∫c ·∫•y b√°c b·∫£o t√¥i nh√¨n v·ªÅ ph√≠a l·ªÅ ƒë∆∞·ªùng ƒëang ƒë∆∞·ª£c tu s·ª≠a d·ªü dang c√≥ m·∫•y ƒë·ªëng c√°t ƒë√°. M·ªôt ng∆∞·ªùi d√¢n k√©o chi·∫øc xe k√∫t k√≠t x√∫c ƒë·∫ßy c√°t ƒë√° r·ªìi th·∫£n nhi√™n k√©o v·ªÅ nh√† m√¨nh. B√°c n√≥i v·ªõi v·∫ª kh√¥ng vui: Th·∫ø th√¨ bao gi·ªù vn m√¨nh gi√†u l√™n ƒë∆∞·ª£c !?&lt;/p&gt; &lt;p&gt;P.S.: C√≥ l·∫Ω ƒë·ªçc b√†i n√†y th√¨ s·∫Ω c√≥ b·∫°n b·∫£o t√¥i r·∫±ng sao y·∫øm th·∫ø v√† bi quan, ch·ªâ to√†n nh√¨n th·∫•y c√°i kh√¥ng t·ªët. Nh·∫≠n ra c√°i t·ªët l√† m·ªôt ƒëi·ªÅu hay (nh∆∞ng ph·∫£i ch√∫ √Ω ƒë·ª´ng c√≥ ƒÉn b√°nh v·∫Ω), nh∆∞ng bu·ªìn v√† suy ng·∫´m v·ªÅ nh·ªØng ƒëi·ªÅu ch∆∞a t·ªët c≈©ng kh√¥ng ph·∫£i d·ªü. V√¨ t√¥i nh·∫≠n ra m·ªôt ƒëi·ªÅu r·∫±ng, khi bu·ªìn ng∆∞·ªùi ta th·∫•m th√≠a v√† ng·ªô ra nhi·ªÅu ƒëi·ªÅu h∆°n l√† khi vui. Bu·ªìn kh√¥ng ƒë·ªìng nghƒ©a v·ªõi bi quan v√† ch·∫Øc h·∫≥n t·ªët h∆°n nhi·ªÅu v·ªõi l·∫°c quan t·∫øu v√† AQ.&lt;/p&gt;</description></item><item><title>Qui lu·∫≠t ti·∫øn h√≥a c·ªßa t·ª± nhi√™n</title><link>https://htr3n.github.io/2008/12/quy-luat-tien-hoa/<pubdate>Sat, 27 Dec 2008 00:00:00 +0000</pubdate><guid>cec6a413b4b2aed64a18e37e00603c4c</guid><description>&lt;p&gt;T√¥i tr·ªü th√†nh nh√† sinh v·∫≠t h·ªçc t·ª´ l√∫c n√†o nh·ªâ? Kh√¥ng ƒë√¢u. T·ª± nhi√™n t√¥i th·∫•y nh·ªõ Darwin v√† qui lu·∫≠t ti·∫øn h√≥a c·ªßa t·ª± nhi√™n m√† √¥ng ta ph√°t bi·ªÉu. T·∫•t c·∫£ l√† v√¨ nh∆∞ th·∫ø n√†y: Th·ªùi gian r·ªìi ch√∫i m√∫i v√†o c√¥ng vi·ªác n√™n l∆° ƒë·ªÖnh z·ª• c·∫≠p nh·∫≠t tin t·ª©c vn (ch·ªß y·∫øu c·∫≠p nh·∫≠t b·∫±ng &amp;ldquo;k√™nh&amp;rdquo; ƒë·∫∑c bi·ªát ;). H√¥m nay l√≤ d√≤ l√™n Tu·ªïi tr·∫ª ƒë·ªÉ refresh th√¨ b·∫Øt g·∫∑p ngay c√°i tin n√≥ng h·ªïi &amp;ldquo;&lt;a href=&#34;http://www.tuoitre.com.vn/Tianyon/Index.aspx?ArticleID=168243&amp;amp;ChannelID=6&#34;&gt;Qu·ªëc h·ªôi th·∫£o lu·∫≠n d·ª± √°n Lu·∫≠t c∆∞ tr√∫: S·ªï h·ªô kh·∫©u hay th·∫ª c∆∞ tr√∫?&lt;/a&gt;&amp;rdquo;. HƒÉm h·ªü ƒë·ªçc (m·ªôt ph·∫ßn v√¨ n√≥ c≈©ng li√™n quan ƒë·∫øn cu·ªôc s·ªëng &amp;hellip; sau n√†y c·ªßa m√¨nh, m·ªôt ph·∫ßn v√¨ quan t√¢m ƒë·∫øn c√°c √¥ng b√† ngh·ªã sƒ© ƒëang ƒë·∫°i di·ªán cho m√¨nh ·ªü c∆° quan &amp;ldquo;quy·ªÅn l·ª±c nh·∫•t n∆∞·ªõc&amp;rdquo;). Th√¥ng tin thu l∆∞·ª£m ƒë∆∞·ª£c ƒë√£ l√†m t·∫Øt ƒëi m·ªôt ph·∫ßn n√†o c√°i ph·∫•n kh√≠ch ban ƒë·∫ßu ·∫•y. ƒê·∫øn l√∫c n√†y, l√∫c m√† kinh t·∫ø vn, theo c√°ch n√≥i c·ªßa c√°c nh√† l·∫°c quan trong n∆∞·ªõc, l√† ƒëang chuy·ªÉn m√¨nh m·∫°nh m·∫Ω; l√∫c m√† ch·ªâ c√≤n bao l√¢u n·ªØa vn s·∫Ω l√† th√†nh vi√™n c·ªßa WTO m√† th√°ch th·ª©c nhi·ªÅu h∆°n c∆° h·ªôi; m√† c√°c √¥ng b√† ngh·ªã sƒ© c√≤n ng·ªìi b√†n b·∫°c v·ªõi nhau l√† gi·ªØ s·ªï h·ªô kh·∫©u hay chuy·ªÉn sang h√¨nh th·ª©c th·∫ª c∆∞ tr√∫ (hi·ªán ƒë·∫°i h∆°n?). Xem ra, l√†n s√≥ng tr√≠ th·ª©c tr·∫ª v√† hi·ªán ƒë·∫°i m·ªõi ch·ªâ l√† kh·∫©u hi·ªáu ƒë·∫ßu m√¥i, ho·∫∑c ch·ªâ l√† m·ªõi m·∫•p m√© ·ªü c·ª≠a ra v√†o Qu·ªëc h·ªôi ch·ª© ch∆∞a th·ªÉ hi·ªán ƒë∆∞·ª£c g√¨. ƒê·ªÉ b√†n b·∫°c kƒ© h∆°n th√¨ ch·∫Øc ph·∫£i l·∫≠t l·∫°i xem s·ªï h·ªô kh·∫©u l√† c√°i g√¨ v√† t·∫°i sao c·∫ßn n√≥?&lt;/p&gt; &lt;p&gt;S·ªï h·ªô kh·∫©u (SHK) c√≥ xu·∫•t x·ª© t·ª´ ƒë√¢u th√¨ c≈©ng kh√¥ng nhi·ªÅu ng∆∞·ªùi am t∆∞·ªùng (nh·∫•t l√† th·∫ø h·ªá tr·∫ª nh∆∞ m√¨nh :D), nh∆∞ng n√≥ c√≥ c√¥ng d·ª•ng g√¨ th√¨ h·∫ßu nh∆∞ ai c≈©ng bi·∫øt qua? SHK l√† m·ªôt trong nh·ªØng v·∫≠t ch·ª©ng ph√°p l√Ω ghi nh·∫≠n s·ª± &amp;ldquo;t·ªìn t·∫°i&amp;rdquo; c·ªßa m·ªôt ho·∫∑c nhi·ªÅu c√¥ng d√¢n t·∫°i m·ªôt ƒë·ªãa ph∆∞∆°ng n√†o ƒë√≥ (ngo√†i SHK c√≤n c√≥ nh·ªØng lo·∫°i kh√°c nh∆∞ t·∫°m tr√∫ ng·∫Øn h·∫°n, d√†i h·∫°n, etc.). S·ª± t·ªìn t·∫°i ƒë∆∞·ª£c ƒë·ªÉ trong d·∫•u nh√°y k√©p b·ªüi v√¨ √Ω nghƒ©a c·ªßa SHK ƒë·ªëi v·ªõi s·ª± t·ªìn t·∫°i, hi·ªán di·ªán c·ªßa m·ªôt c√¥ng d√¢n n√†o ƒë√≥ v·∫´n kh√¥ng r√µ r√†ng r√†nh m·∫°ch l·∫Øm. Nh∆∞ng c√¥ng d·ª•ng c·ªßa n√≥ th√¨ c·ª±c k·ª≥ quan tr·ªçng: m·ªôt c√¥ng d√¢n kh√¥ng th·ªÉ l√†m ch·ª©ng minh nh√¢n d√¢n n·∫øu kh√¥ng c√≥ h·ªô kh·∫©u, m·ªôt ƒë·ª©a tr·∫ª kh√¥ng th·ªÉ ƒë·∫øn tr∆∞·ªùng t·∫°i n∆°i n√≥ ƒëang c∆∞ tr√∫ (h·ª£p ph√°p) v·ªõi b·ªë m·∫π n·∫øu kh√¥ng c√≥ h·ªô kh·∫©u (ho·∫∑c t·∫°m tr√∫ d√†i h·∫°n xem nh∆∞ ngang b·∫±ng v·ªõi h·ªô kh·∫©u), tr∆∞·ªõc ƒë√¢y c√≥ th·ªùi gian, c√¥ng d√¢n kh√¥ng th·ªÉ ƒë·ª©ng t√™n nh√† n·∫øu kh√¥ng c√≥ h·ªô kh·∫©u, &amp;hellip; C√≤n r·∫•t r·∫•t nhi·ªÅu c√¥ng vi·ªác quan tr·ªçng m√† n·∫øu kh√¥ng c√≥ h·ªô kh·∫©u th√¨ ch·∫Øc ch·∫Øn kh√¥ng th·ªÉ n√†o x√∫c ti·∫øn ƒë∆∞·ª£c (n·∫øu kh√¥ng c√≥ nh·ªØng-ng∆∞·ªùi-m√†-ai-c≈©ng-bi·∫øt-l√†-ai !!!).&lt;/p&gt; &lt;p&gt;Ch√≠nh quy·ªÅn ƒë·ªãa ph∆∞∆°ng qu·∫£n l√Ω ng∆∞·ªùi d√¢n theo nh·ªØng h·ªô gia ƒë√¨nh. M·ªói h·ªô gia ƒë√¨nh s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n b·∫±ng m·ªôt SHK ri√™ng, do m·ªôt ng∆∞·ªùi l√†m ch·ªß h·ªô ƒë·ª©ng t√™n ch·ªãu tr√°ch nhi·ªám. Kh√°i ni·ªám h·ªô gia ƒë√¨nh kh√° r·ªông, ƒë√≥ c√≥ th·ªÉ l√† c·∫∑p v·ª£ ch·ªìng son, ho·∫∑c m·ªôt gia ƒë√¨nh hai th·∫ø h·ªá, ho·∫∑c c√≥ th·ªÉ l√† c·∫£ m·ªôt gia ƒë√¨nh t·ª© ƒë·∫°i ƒë·ªìng ƒë∆∞·ªùng. Khi c√≥ m·ªôt th√†nh vi√™n m·ªõi ch√†o ƒë·ªùi, ch·ªß h·ªô s·∫Ω s·∫Ω ti·∫øn h√†nh l√†m th·ªß t·ª•c khai b√°o v√† ƒë·ªãa ph∆∞∆°ng s·∫Ω ghi nh·∫≠n th√†nh vi√™n m·ªõi b·∫±ng m·ªôt m·ª•c m·ªõi trong SHK. Khi m·ªôt th√†nh vi√™n chuy·ªÉn ƒëi n∆°i kh√°c, ra n∆∞·ªõc ngo√†i, ho·∫∑c m·∫•t ƒëi, ƒë·ªãa ph∆∞∆°ng s·∫Ω ghi nh·∫≠n b·∫±ng c√°ch b·ªè ƒëi m·ª•c t∆∞∆°ng ·ª©ng trong SHK. Khi c√≥ th√†nh vi√™n l·∫≠p gia ƒë√¨nh kh√¥ng s·ªëng chung v·ªõi b·ªë m·∫π th√¨ ph·∫£i ƒëƒÉng k√Ω th√†nh m·ªôt h·ªô gia ƒë√¨nh m·ªõi. Nh∆∞ v·∫≠y, SHK l√† ph∆∞∆°ng ti·ªán ƒë·ªÉ qu·∫£n l√Ω c√¥ng d√¢n c·ªßa ch√≠nh quy·ªÅn. Nh∆∞ng n·∫øu nh∆∞ m·ªçi th·ª© tu·∫ßn t·ª± nhi ti·∫øn nh∆∞ th·∫ø th√¨ ch·∫Øc ch·∫Øn c√°c √¥ng b√† ngh·ªã nh√† ta kh√¥ng b·ªè th·ªùi gian qu√≠ b√°u ra b√†n b·∫°c nhi·ªÅu v·∫≠y. S·ª± th·∫≠t l√† c√≥ qu√° nhi·ªÅu v·∫•n ƒë·ªÅ ph√°t sinh t·ª´ c√°i SHK. V·ªõi v·ªën th√¥ng tin h·∫°n h·∫πp, t√¥i ch·ªâ xin ƒë∆°n c·ª≠ m·ªôt v√†i v√≠ d·ª•. ƒê√≥ l√† c√°i v√≤ng l·∫©n qu·∫©n &amp;ldquo;h·ªô kh·∫©u-nh√†&amp;rdquo; ·ªü Saigon. Gi·∫£ s·ª≠ anh A l√† m·ªôt anh gi√°o qu√®n t·ª´ t·ªânh xa v√†o Saigon l·∫≠p nghi·ªáp. Anh c√≥ v·ª£ v√† con. Con c·ªßa anh s·∫Ω ph·∫£i ƒëi h·ªçc m·ªôt tr∆∞·ªùng ph·ªï th√¥ng nh∆∞ng th·ªß t·ª•c nh·∫≠p tr∆∞·ªùng ƒë√≤i h·ªèi h·ªô kh·∫©u th√†nh ph·ªë! V√† ƒë·ªÉ c√≥ h·ªô kh·∫©u th√†nh ph·ªë th√¨ anh ph·∫£i ch·ª©ng minh ƒëi·ªÅu ki·ªán ti√™n quy·∫øt l√† c√¥ng vi·ªác l√†m ·ªïn ƒë·ªãnh v√† m·ªôt c√°i nh√† do anh l√† s·ªü h·ªØu ch·ªß (nh·ªØng ƒëi·ªÅu ki·ªán &amp;ldquo;h·∫≠u quy·∫øt&amp;rdquo; th√¨ ngo√†i t·∫ßm b√†i n√†y n√™n kh√¥ng b√†n kƒ©). Sau th·ªùi gian d√†nh d·ª•m, anh ta mua m·ªôt ng√¥i nh√† v√† xin ƒë·ª©ng t√™n s·ªü h·ªØu ch·ªß. O√°i ƒÉm m·ªôt c√°i, h·ªô kh·∫©u g·ªëc c·ªßa anh A v·∫´n ·ªü t·ªânh, th·∫ø n√™n ·ªü Saigon ng∆∞·ªùi ta t·ª´ ch·ªëi quy·ªÅn ƒë·ª©ng t√™n s·ªü h·ªØu nh√† c·ªßa anh. T√¨nh th·∫ø l·∫©n qu·∫©n v√† b·∫ø t·∫Øc n√†y xu·∫•t hi·ªán r·∫•t ph·ªï bi·∫øn! V√≠ d·ª• nh·ªè th·ª© hai l√†, gi·∫£ s·ª≠ anh A ƒë∆∞·ª£c ch·∫•p nh·∫≠n h·ªô kh·∫©u TP b·∫±ng c√°ch n√†o ƒë√≥ (m√†-c√≥-th·ªÉ-ai-c≈©ng-bi·∫øt) th√¨ ph·∫£i l√†m l·∫°i th·∫ª c√¥ng d√¢n v·ªõi m√£ s·ªë m·ªõi, k√©o theo m·ªôt lo·∫°t c√°c ƒëi·ªÅu ch·ªânh th√¥ng tin l·∫±ng nh·∫±ng v√¨ nh·ªØng th·ª© gi·∫•y t·ªù d·ª±a tr√™n th·∫ª c√¥ng d√¢n.&lt;/p&gt; &lt;p&gt;B√¢y gi·ªù, n·∫øu b√†n v·ªÅ vi·ªác gi·∫£i quy·∫øt nh·ªØng v·∫•n ƒë·ªÅ ph√°t sinh (m√† c√°c √¥ng b√† ngh·ªã g·ªçi l√† qui ƒë·ªãnh &amp;ldquo;ƒÉn theo&amp;rdquo;, kho·∫£ng 420 vƒÉn b·∫£n theo th·ªëng k√™ c·ªßa B·ªô CA!) th√¨ s·∫Ω l·∫°i gi·ªëng c√°c √¥ng b√† ·∫•y, m√† theo t√¥i nghƒ©, l√† ƒëang t√¨m c√°ch t·ªâa c√°c c√†nh l√πm x√πm c·ªßa m·ªôt c√°i c√¢y ƒÉn h·∫°i. Sao c√°c √¥ng b√† ngh·ªã kh√¥ng ƒë·∫∑t v·∫•n ƒë·ªÅ th·∫≥ng ra gi·ªëng nh∆∞ ti√™u ƒë·ªÅ b√†i b√°o: kh√¥ng d√πng SHK m√† nghƒ© ƒë·∫øn h√¨nh th·ª©c kh√°c thu·∫≠n ti·ªán v√† khoa h·ªçc h∆°n, th√¨ s·∫Ω ch·∫∑t b·ªè m·ªôt c√¢y ƒÉn h·∫°i v√† tr·ªìng m·ªôt c√¢y ƒÉn qu·∫£? T√¥i ch∆∞a hi·ªÉu r√µ ƒë·ªãnh nghƒ©a th·∫ª c∆∞ tr√∫ trong √Ω nghƒ© c·ªßa c√°c √¥ng b√† ngh·ªã, n√™n kh√¥ng d√°m l·∫°m b√†n v·ªÅ n√≥. Nh∆∞ng t√¥i thi·∫øt nghƒ© l√† kh√¥ng c·∫ßn th√™m m·ªôt th·ª© th·∫ª g√¨ h·∫øt ngo√†i th·∫ª c√¥ng d√¢n (ƒë∆∞·ª£c g·ªçi l√† CMND), c√≤n vi·ªác d√πng th·∫ª ƒëi·ªán t·ª≠ hay gi·∫•y, polyme th√¨ t√πy ƒëi·ªÅu ki·ªán m√† tri·ªÉn khai. Th·ª≠ h·ªèi m·ªôt c√¥ng d√¢n ƒëang c·∫ßn ti·∫øn h√†nh m·ªôt th·ªß t·ª•c h√†nh ch√≠nh xem ng∆∞·ªùi ƒë√≥ ph·∫£i chu·∫©n b·ªã bao nhi√™u th·ª© gi·∫•y t·ªù: CMND, SHK,&amp;hellip;? V√† th·ª≠ ƒë·ªëi chi·∫øu xem th√¥ng tin tr√™n CMND v√† SHK th√¨ c√≥ th·ª´a thi·∫øu c√°i g√¨ c·∫ßn b·ªï sung nhau kh√¥ng? V·∫≠y, nguy√™n nh√¢n s√¢u xa c·ªßa vi·ªác duy tr√¨ h·ªá th·ªëng qu·∫£n l√Ω nh√¢n kh·∫©u SHK l√† g√¨? T·∫°i sao h·ªá th·ªëng v·ªõi nhi·ªÅu b·∫•t c·∫≠p ƒë√≥ t·ªìn t·∫°i qu√° l√¢u nh∆∞ v·∫≠y? Kh√¥ng c√≥ SHK th√¨ s·∫Ω c√≥ l·ª£i g√¨, v√† l·ª±c l∆∞·ª£ng n√†o c·ªßa x√£ h·ªôi b·ªã ·∫£nh h∆∞·ªüng v√† ·∫£nh h∆∞·ªüng nh∆∞ th·∫ø n√†o? V√† cu·ªëi c√πng l√† n√™n c·∫£i ti·∫øn h·ªá th·ªëng ƒë√≥ theo h∆∞·ªõng n√†o? T√¥i xin n√™u ra nh·ªØng √Ω ki·∫øn mang m√†u s·∫Øc ch·ªß quan (v√† c√≥ ph·∫ßn phi·∫øn di·ªán v√¨ b·∫£n th√¢n t√¥i l√† c√¥ng d√¢n b√¨nh th∆∞·ªùng n√™n g√≥c nh√¨n t·ª´ ph√≠a ng∆∞·ªùi s·ª≠ d·ª•ng c·ªßa h·ªá th·ªëng)&lt;/p&gt; &lt;p&gt;Th·∫ª c√¥ng d√¢n c√≥ th·ªÉ thay th·∫ø ho√†n to√†n SHK n·∫øu b·ªï sung th√™m th√¥ng tin v√† c·∫£i bi·∫øn h√¨nh th·ª©c ƒëƒÉng k√≠ c∆∞ tr√∫. Th·∫ª c√¥ng d√¢n ƒë√£ c√≥ th√¥ng tin c∆° b·∫£n v·ªÅ m·ªôt c√° nh√¢n n√†o ƒë√≥. Vi·ªác s·ª≠ d·ª•ng SHK ch·ªâ c√≥ t√°c d·ª•ng l√† qu·∫£n l√Ω c√°c h·ªô gia ƒë√¨nh (v√† th·ªëng k√™ d√¢n s·ªë?) v√† th·ª±c s·ª± kh√¥ng c·∫ßn thi·∫øt. C·∫£i bi·∫øn h√¨nh th·ª©c ƒëƒÉng k√≠ c∆∞ tr√∫ b·∫±ng c√°ch cho ph√©p m·ªôt c√° nh√¢n t·∫°m tr√∫ b·∫•t k√¨ n∆°i ƒë√¢u trong n∆∞·ªõc, nh∆∞ng h·ªç ph·∫£i ƒëƒÉng k√≠ v·ªõi c∆° quan qu·∫£n l√Ω n∆°i h·ªç c∆∞ tr√∫ trong v√≤ng v√†i ng√†y sau khi ƒë·∫øn ho·∫∑c ƒëi. ƒêi·ªÅu ki·ªán ƒë·ªÉ ƒëƒÉng k√≠ c∆∞ tr√∫ l√† c√≥ nh√† ·ªü (thu√™ ho·∫∑c mua) v√† c√≥ s·ª± ch·∫•p thu·∫≠n c·ªßa ch·ªß nh√† th·ªÉ hi·ªán tr√™n gi·∫•y ƒëƒÉng k√≠ c∆∞ tr√∫ b·∫±ng ch·ªØ k√≠. N·∫øu l√† h·ªô gia ƒë√¨nh th√¨ con c√°i c√≥ th·ªÉ ƒëƒÉng k√≠ c∆∞ tr√∫ v·ªõi s·ª± b·∫£o l√£nh c·ªßa b·ªë ho·∫∑c m·∫π. H·ªá th·ªëng n√†y lo·∫°i b·ªè s·ª± t·ªìn t·∫°i v·ªõi nhi·ªÅu b·∫•t c·∫≠p c·ªßa SHK v√† mang l·∫°i s·ª± t·ª± do trong c∆∞ tr√∫ v√† ƒëi l·∫°i cho c√¥ng d√¢n (theo Hi·∫øn ph√°p r√µ r√†ng). C√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ ƒë·∫∑t ra l√†: n·∫øu ng∆∞·ªùi ta kh√¥ng ƒëƒÉng k√≠ th√¨ sao? Th√¨ ƒë√≥ ch√≠nh l√† c∆∞ tr√∫ b·∫•t h·ª£p ph√°p. Ng∆∞·ªùi c∆∞ tr√∫ b·∫•t h·ª£p ph√°p s·∫Ω kh√¥ng ƒë∆∞·ª£c h∆∞·ªüng nh·ªØng quy·ªÅn l·ª£i m√† ng∆∞·ªùi c∆∞ tr√∫ h·ª£p ph√°p c√≥, nh∆∞ s·ª± b·∫£o v·ªá c·ªßa ph√°p lu·∫≠t khi c·∫ßn thi·∫øt, quy·ªÅn ƒë∆∞·ª£c ƒëi l√†m (li√™n quan t·ªõi gi·∫•y ph√©p ƒëi l√†m v√† gi·∫•y x√°c nh·∫≠n c∆∞ tr√∫). Nh∆∞ v·∫≠y, n√≥ khuy·∫øn kh√≠ch s·ª± t·ª± gi√°c c·ªßa c√° nh√¢n v√† cho h·ªç c√≥ quy·ªÅn l·ª±a ch·ªçn c·ªßa ri√™ng h·ªç. ƒêa s·ªë c√°c h·ªá th·ªëng ·ªü c√°c n∆∞·ªõc ti√™n ti·∫øn ƒë·ªÅu √°p d·ª•ng h√¨nh th·ª©c n√†y, kh√¥ng hi·ªÉu v√¨ l√≠ do g√¨ ·ªü vn v·∫´n ch∆∞a c√≥ (ho·∫∑c ch∆∞a th·ªÉ hi·ªán l√† b·∫Øt ƒë·∫ßu nghƒ© ƒë·∫øn n√≥ v√† tri·ªÉn khai). Vi·ªác tri·ªÉn khai ban ƒë·∫ßu c√≥ th·ªÉ t·ªën k√©m nhi·ªÅu t√†i ch√≠nh v√† nh√¢n l·ª±c, nh∆∞ng n√≥ th·ª±c s·ª± l√† m·ªôt trong c√°c gi·∫£i ph√°p k·∫øt h·ª£p ƒë·ªÉ c·∫£i c√°ch b·ªô m√°y h√†nh ch√≠nh qu√° √¨ ·∫°ch c·ªßa vn ƒë·ªÉ v·∫≠n ƒë·ªông k·ªãp v·ªõi c√°c n∆∞·ªõc kh√°c. C√°i l·ª£i c·ªßa h·ªá th·ªëng &amp;ldquo;th·∫ª c√¥ng d√¢n + ƒëƒÉng k√≠ c∆∞ tr√∫&amp;rdquo; l√† gi·∫£m b·ªõt s·ª± ph·ª©c t·∫°p v√† r·∫Øc r·ªëi trong th·ªß t·ª•c h√†nh ch√≠nh, gi·∫£m b·ªõt th·ªùi gian v√† ti·ªÅn b·∫°c m√† ng∆∞·ªùi d√¢n ƒë√£ ph·∫£i ti√™u t·ªën b·ªüi s·ª± ph·ª©c t·∫°p ƒë√≥. Kh√¥ng n√™n ƒë·ªÉ quy·ªÅn l·ª£i v√† s·ª± t·ª± ch·ªß c·ªßa m·ªôt c√¥ng d√¢n b·ªã ho·∫°nh h·ªçe v√† g√¢y phi·ªÅn h√† b·ªüi c√°c c√¥ng d√¢n (nh√¢n-vi√™n-h√†nh-ch√≠nh) kh√°c. Ngo√†i ra, n√≥ mang l·∫°i m·ªôt h·ªá th·ªëng th√¥ng tin qu·∫£n l√Ω th√¥ng su·ªët trong c·∫£ n∆∞·ªõc ch·ª© kh√¥ng theo ki·ªÉu v√πng mi·ªÅn nh∆∞ hi·ªán t·∫°i. H·ªá th·ªëng v·ªõi nhi·ªÅu ti·ªán l·ª£i nh∆∞ v·∫≠y m√† ch∆∞a tri·ªÉn khai th√¨ ch·ªâ c√≥ th·ªÉ bi·ªán minh b·∫±ng l√≠ do h·∫øt s·ª©c ti√™u c·ª±c l√† h·ªá th·ªëng n√†y s·∫Ω mang ƒë·∫øn h·∫≠u qu·∫£ kh√≥ khƒÉn khi lo·∫°i ra nh·ªØng nh√¢n c√¥ng th·ª´a trong b·ªô m√°y h√†nh ch√≠nh (m√† nh·ªØng ng∆∞·ªùi ƒë√≥ th∆∞·ªùng l·∫°i c√≥ quan h·ªá d√¢y m∆° r·ªÖ m√† v√† kh√¥ng-minh-b·∫°ch trong su·ªët h·ªá th·ªëng), ho·∫∑c n√≥ s·∫Ω mang l·∫°i kh√≥ khƒÉn kh√¥ng-th·ªÉ-n√≥i-ra cho c√°c l·ª±c l∆∞·ª£ng an ninh.&lt;/p&gt; &lt;p&gt;S·ª± vi·ªác khi·∫øn t√¥i nh·ªõ Darwin b·ªüi v√¨ n·∫øu √¥ng ·∫•y c√≤n s·ªëng th√¨ quan ƒëi·ªÉm c·ªßa √¥ng v·ªÅ qui lu·∫≠t ti·∫øn h√≥a c·ªßa t·ª± nhi√™n r·∫•t c√≥ th·ªÉ s·∫Ω kh√¥ng nh∆∞ √¥ng ƒë√£ n√≥i v√¨ n√≥ kh√¥ng ƒë√∫ng khi √°p d·ª•ng trong tr∆∞·ªùng h·ª£p n√†y. Nh∆∞ng t·∫≠n ƒë√°y l√≤ng, t√¥i v·∫´n h·∫±ng tin l√† Darwin kh√¥ng thay ƒë·ªïi quan ƒëi·ªÉm.&lt;/p&gt;</description></item><item><title>Quy·ªÅn v√† nghƒ©a v·ª• im l·∫∑ng</title><link>https://htr3n.github.io/2008/12/quyen-va-nghia-vu-im-lang/<pubdate>Sat, 27 Dec 2008 00:00:00 +0000</pubdate><guid>5497751c45eb170296894c66d6e013b7</guid><description>&lt;p&gt;ƒê·∫∑t g·∫°ch l√¢u r·ªìi, m√† b·ªã deadline c·ªßa m·∫•y b√†i b√°o &amp;ldquo;d√≠&amp;rdquo;&amp;rdquo; ch√°y m√¥ng n√™n gi·ªù m·ªõi vi·∫øt ƒë∆∞·ª£c m·∫•y d√≤ng chia s·∫ª v√†i suy nghƒ© c√° nh√¢n v·ªÅ s·ª± ki·ªán &amp;ldquo;quy·ªÅn im l·∫∑ng&amp;rdquo; (sau ƒë√¢y l√† QIM ;) ƒëang g√¢y tranh lu·∫≠n trong v√† ngo√†i c√°i &amp;ldquo;ph√≤ng ng·ªß l·ªõn nh·∫•t vn&amp;rdquo; (c√≥ kh·∫£ nƒÉng &amp;ldquo;l·ªõn nh·∫•t th·∫ø gi·ªõi&amp;rdquo;, sau ƒë√¢y g·ªçi tƒÉt l√† QH). C√≥ r·∫•t nhi·ªÅu ƒëi·ªÉm ƒë√°ng b√†n v·ªÅ s·ª± ki·ªán ƒë√≥, trong ƒë√≥ m√¨nh th·∫•y m·ªôt t√≠n hi·ªáu r·∫•t ƒë√°ng m·ª´ng l√† m·ªëi quan t√¢m ƒë·∫øn ch√≠nh tr·ªã ƒëang l·ªõn d·∫ßn v√† r√µ r√†ng h∆°n. C≈©ng c√≥ nghƒ©a l√† c√≥ nhi·ªÅu ng∆∞·ªùi ƒë√£ v√† ƒëang t·ª´ ch·ªëi &amp;ldquo;nghƒ©a v·ª• im l·∫∑ng&amp;rdquo; (hay ƒëi k√®m v·ªõi &amp;ldquo;t·ª± ki·ªÉm duy·ªát&amp;rdquo;) ƒë·ªÉ b√†y t·ªè √Ω ki·∫øn c·ªßa m√¨nh.&lt;/p&gt; &lt;p&gt;Quay l·∫°i v·ªõi s·ª± ki·ªán n√≥i tr√™n. T√≥m t·∫Øt l·∫°i, trong tranh lu·∫≠n t·∫°i QH lu·ªìng √Ω ki·∫øn &amp;ldquo;ch·ªëng&amp;rdquo; th√¨ ch·ªß y·∫øu cho r·∫±ng lu·∫≠t im l·∫∑ng &amp;ldquo;g√¢y kh√≥ khƒÉn&amp;rdquo; cho c∆° quan ƒëi·ªÅu tra (h√†m √Ω &amp;ldquo;gi√°n ti·∫øp g√¢y h·∫°i cho x√£ h·ªôi&amp;rdquo; &amp;ndash; v√¨ cho r·∫±ng s·∫Ω c·∫£n tr·ªü vi·ªác truy &amp;ldquo;t·ªôi ph·∫°m&amp;rdquo; (!?)) &amp;ndash; b·ªè qua c√°c √Ω ki·∫øn linh tinh c·ªßa √¥ng ngh·ªã &amp;ldquo;rau mu·ªëng&amp;rdquo;. Xem c√°c √Ω ki·∫øn ·ªßng h·ªô quan ƒëi·ªÉm n√†y ƒë·∫°i kh√°i nh∆∞ ko mu·ªën c√≥ QIM ƒë·ªÉ ƒë·ªëi ph√≥ v·ªõi kh·ªßng b·ªë ho·∫∑c t·ªôi ph·∫°m nguy hi·ªÉm. V√†i ng√†y qua c√≥ r·∫•t nhi·ªÅu ph√¢n t√≠ch r·∫•t s·∫Øc s·∫£o ƒë·ªÉ ph·∫£n b√°c l·∫°i lu·∫≠n ƒëi·ªÉm nguy hi·ªÉm ƒë√≥. M·ªôt s·ªë v√≠ d·ª• ·ªü ƒë√¢y nh∆∞ status c·ªßa nh√† b√°o Huy ƒê·ª©c (Tr∆∞∆°ng Huy San tr√™n FB), ho·∫∑c b√†i vi·∫øt &amp;ldquo;Quy·ªÅn im l·∫∑ng&amp;rdquo; c·ªßa LS Th√°i B·∫£o Anh tr√™n vnExpress. M√¨nh t·ª± nh·∫≠n kh√¥ng th·ªÉ vi·∫øt c√°i g√¨ hay h∆°n nh·ªØng √Ω ki·∫øn ƒë√≥, v√¨ ch√∫ng ƒë√£ h√†m ch·ª©a h·∫øt nh·ªØng c√°i cƒÉn b·∫£n c·ªßa QIM v√† l√Ω gi·∫£i thuy·∫øt ph·ª•c t·∫°i sao nh·∫•t thi·∫øt ph·∫£i c√≥ QIM, cho d√π v·ªõi ho√†n c·∫£nh hi·ªán t·∫°i ·ªü vn. ·ªû ƒë√¢y m√¨nh chia s·∫ª m·ªôt v√†i g√≥c nh√¨n kh√°c, v√† mu·ªën bi·∫øt th√™m nhi·ªÅu √Ω ki·∫øn kh√°c.&lt;/p&gt; &lt;p&gt;V·ªõi m√¨nh, lu·∫≠t √°p d·ª•ng cho ƒë·∫°i ch√∫ng ƒë·ªÉ duy tr√¨ tr·∫≠t t·ª± v√† c√¥ng b·∫±ng x√£ h·ªôi. Nh·ªØng tr∆∞·ªùng h·ª£p nh∆∞ ch·ªëng kh·ªßng b·ªë hay t·ªôi ph·∫°m l√† c√° bi·ªát, kh√¥ng ti√™u bi·ªÉu cho t√¨nh h√¨nh to√†n x√£ h·ªôi (m√† khi c·∫ßn th√¨ ph·∫£i ra d·ª± lu·∫≠t ƒë·∫∑c bi·ªát, v√≠ d·ª• nh∆∞ Patriot Act c·ªßa M·ªπ, ho·∫∑c ki·ªÉu gi·ªõi nghi√™m th·ªùi chi·∫øn lo·∫°n). Do ƒë√≥, kh√¥ng ai l·∫•y m·ªôt v√†i tr∆∞·ªùng h·ª£p c√° bi·ªát ƒë·ªÉ l√†m ƒë·∫°i di·ªán cho to√†n th·ªÉ c·∫£. V·ªÅ m·∫∑t duy tr√¨ c√¥ng b·∫±ng x√£ h·ªôi, ng∆∞·ªùi &amp;ldquo;y·∫øu th·∫ø&amp;rdquo; m·ªõi ph·∫£i c·∫ßn ƒë∆∞·ª£c b·∫£o v·ªá. N·∫øu hi·ªÉu &amp;ldquo;y·∫øu th·∫ø&amp;rdquo;&amp;rdquo; theo nghƒ©a r·ªông, v√≠ d·ª• nh∆∞ kh√¥ng ƒë·ªß ki·∫øn th·ª©c lu·∫≠t ph√°p l√† ƒëa s·ªë d√¢n ƒëen tr·ª´ lu·∫≠t s∆∞ (c√≥ b·∫°n v√† t√¥i n·ªØa) r∆°i v√†o di·ªán ƒë√≥. C√≥ v√≠ d·ª• hay l√† ng∆∞·ªùi d√¢n th∆∞·ªùng ƒëa ph·∫ßn &amp;ldquo;y·∫øu th·∫ø&amp;rdquo; h∆°n so v·ªõi nh√¢n vi√™n h√†nh ph√°p (c√¥ng an, ƒëi·ªÅu tra vi√™n, ki·ªÉm so√°t vi√™n, etc.). Th·∫ø n√™n QIM l√† m·ªôt trong c√°c c√°ch ƒë·ªÉ b·∫£o v·ªá ng∆∞·ªùi d√¢n h·ªØu hi·ªáu. C√≥ √Ω ki·∫øn cho r·∫±ng d√¢n tr√≠ th·∫•p kh√¥ng c·∫ßn QIM. ƒêi·ªÅu ƒë√≥ kh√¥ng ƒë√∫ng, m√† ng∆∞·ª£c l·∫°i, QIM r·∫•t c·∫ßn thi·∫øt v√† ph·∫£i ƒë∆∞·ª£c thi h√†nh ch·∫∑t ch·∫Ω nh·∫•t l√† khi &amp;ldquo;d√¢n tr√≠ th·∫•p&amp;rdquo; (th·ª±c ra n√™n lo cho &amp;ldquo;quan tr√≠&amp;rdquo; d∆∞·ªõi trung b√¨nh th√¨ h∆°n ;).&lt;/p&gt; &lt;p&gt;S·ª± ki·ªán QIM (v√† nhi·ªÅu s·ª± ki·ªán li√™n quan), m·ªôt l·∫ßn n·ªØa, cho th·∫•y r√µ, thay v√¨ ƒë·∫°i di·ªán cho d√¢n v√† quy·ªÅn l·ª£i c·ªßa d√¢n th√¨ c√°c √¥ng/b√† ngh·ªã nh∆∞ √¥ng ƒê∆∞∆°ng, t∆∞·ªõng Xuy√™n (v√† nh·ªØng √Ω ki·∫øn ·ªßng h·ªô) l·∫°i ƒë·ªÅ nghi t∆∞·ªõc b·ªè quy·ªÅn cƒÉn b·∫£n c·ªßa d√¢n. V√¨ sao l·∫°i ra n√¥ng n·ªói ƒë√≥? B√™n c·∫°nh vi·ªác ƒë·ªï l·ªói cho c∆° ch·∫ø, th·ªÉ ch·∫ø, c√°i &amp;ldquo;nghƒ©a v·ª• im l·∫∑ng&amp;rdquo; m√† m·ªói ng∆∞·ªùi ƒëang &amp;ldquo;chƒÉm ch·ªâ th·ª±c hi·ªán&amp;rdquo; l√† t√°c nh√¢n kh√¥ng nh·ªè. Ch·ªçn c√°ch im l·∫∑ng tr∆∞·ªõc c√°c vi·ªác l√†m, √Ω ki·∫øn, s·ª± ki·ªán &amp;ldquo;ch√≠nh tr·ªã&amp;rdquo; nh∆∞ th·∫ø ch√≠nh l√† t·ª± b√°n r·∫ª quy·ªÅn c·ªßa m·ªôt con ng∆∞·ªùi t·ª± do. N·∫øu b·∫°n nghƒ© l√† kh√¥ng ƒë·ª•ng t·ªõi ch√≠nh tr·ªã th√¨ b·∫°n s·∫Ω y√™n th√¢n, nh∆∞ng kh·ªï n·ªói ch√≠nh tr·ªã hi·ªán di·ªán v√† ·∫£nh h∆∞·ªüng ƒë·∫øn m·ªçi th·ª© xung quanh b·∫°n, tr·ª±c ti·∫øp hay gi√°n ti·∫øp, nh∆∞ s·ª± ki·ªán QIM n√†y ch·∫≥ng h·∫°n. C√≥ th·ªÉ b·∫°n ƒë√∫ng, nh∆∞ng ƒëi·ªÅu ƒë√≥ ch·ªâ mang t√≠nh t·∫°m th·ªùi. Th·ª≠ ƒë·∫∑t v√†o tr∆∞·ªùng h·ª£p b·∫°n nh∆∞ √¥ng Ch·∫•n (10 nƒÉm t√π oan), em h·ªçc sinh Thi·ªán (52 ng√†y t√π v√¨ gi√∫p ng∆∞·ªùi b·ªã tai n·∫°n) v√† nhi·ªÅu c·∫£nh ƒë·ªùi t∆∞∆°ng t·ª± ƒë·ªÉ suy nghƒ©, ch√≠nh b·∫°n s·∫Ω bi·∫øt r√µ c√¢u tr·∫£ l·ªùi h∆°n ai h·∫øt, c√≥ n√™n tu√¢n th·ªß &amp;ldquo;nghƒ©a v·ª• im l·∫∑ng&amp;rdquo; n·ªØa hay kh√¥ng.&lt;/p&gt;</description></item><item><title>T·ª´ ni·ªÅm tin tuy·ªát ƒë·ªëi ƒë·∫øn critical thinking</title><link>https://htr3n.github.io/2008/12/critical-thinking/<pubdate>Sat, 27 Dec 2008 00:00:00 +0000</pubdate><guid>54192f4fecafa4c300930c600892e603</guid><description>&lt;p&gt;Tr√™n Tu·ªïi tr·∫ª Online, t√¥i ƒë·ªçc &lt;a href=&#34;http://www.tuoitre.com.vn/Tianyon/Index.aspx?ArticleID=179846&amp;amp;ChannelID=13&#34;&gt;b√†i b√°o n√†y&lt;/a&gt; c·ªßa m·ªôt du h·ªçc sinh, trong ƒë√≥ cung c·∫•p cho ta g√≥c nh√¨n v·ªÅ gi√°o d·ª•c ƒë·∫°i h·ªçc ·ªü M·ªπ. √ù ki·∫øn m√† t√¥i r·∫•t ƒë·ªìng √Ω l√†:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Kh√°c bi·ªát l·ªõn nh·∫•t l√† sinh vi√™n ƒë∆∞·ª£c quy·ªÅn ch·∫•t v·∫•n gi√°o s∆∞. Sinh vi√™n kh√¥ng b·ªã b·∫Øt bu·ªôc ph·∫£i theo √Ω ki·∫øn c·ªßa b·∫•t c·ª© ai, c√≥ th·ªÉ c√≥ lu·∫≠n ƒëi·ªÉm c·ªßa ri√™ng m√¨nh ch·ª´ng n√†o anh b·∫£o v·ªá ƒë∆∞·ª£c lu·∫≠n ƒëi·ªÉm ·∫•y&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;ƒê√∫ng l√† ph·∫£i nh∆∞ th·∫ø. ·ªû c·∫•p ƒë·∫°i h·ªçc, m·ªôt sinh vi√™n n√™n t·∫≠p luy·ªán cho m√¨nh th√≥i quen ƒë·ª´ng qu√° tin t∆∞·ªüng tuy·ªát ƒë·ªëi v√†o s√°ch v·ªü ho·∫∑c l·ªùi th·∫ßy gi√°o. ƒêi·ªÅu ƒë√≥ c√≥ nghƒ©a l√† v·ªõi m·ªôt lu·∫≠n ƒëi·ªÉm n√†o ƒë√≥ c≈©ng n√™n ti·∫øp t·ª•c ƒë·∫∑t nh·ªØng c√¢u h·ªèi ƒë·ªÉ xem x√©t m·ªçi kh√≠a c·∫°nh, e.g.: li·ªáu lu·∫≠n ƒëi·ªÉm n√†y c√≥ c√≤n ƒë√∫ng khi thay ƒë·ªïi ng·ªØ c·∫£nh, v.v. Nh·ªØng c√¢u h·ªèi n√†y c√≥ th·ªÉ t·ª± bi·ªán gi·∫£i b·∫±ng hi·ªÉu bi·∫øt c·ªßa m√¨nh ho·∫∑c th·∫£o lu·∫≠n v·ªõi b·∫°n b√®, gi√°o s∆∞. Vi·ªác b·∫•t ƒë·ªìng quan ƒëi·ªÉm l√† chuy·ªán b√¨nh th∆∞·ªùng v√† m·ªói ng∆∞·ªùi c√≥ th·ªÉ ƒë·∫∑t lu·∫≠n ƒëi·ªÉm ri√™ng v√†o c√°c cu·ªôc tranh lu·∫≠n.&lt;/p&gt; &lt;p&gt;Th·∫ø gi·ªõi thay ƒë·ªïi h·∫±ng ng√†y, m·ªôt lu·∫≠n ƒëi·ªÉm h√¥m nay ƒë√∫ng nh∆∞ng ng√†y mai c√≥ th·ªÉ kh√¥ng c√≤n ph√π h·ª£p. ƒê·ªÉ b·∫Øt k·ªãp v·ªõi nh·ªØng thay ƒë·ªïi ƒë√≥ th√¨ c√°ch gi·∫£ng d·∫°y nh∆∞ tr√™n th·∫≠t kh√¥ng t·ªá.&lt;/p&gt;</description></item></channel></rss>