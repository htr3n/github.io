<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>
      htr3n&#39;s
      </title>
    <link>https://blog.test:8443/</link>
    <description>
      Recent content on htr3n&#39;s
    </description>
    <generator>Hugo -- gohugo.io</generator>
    
      <language>en</language>
    
    
    
    
    
      <lastBuildDate>Thu, 01 Jan 2099 00:00:00 +0000</lastBuildDate>
    
    
	    <atom:link href="https://blog.test:8443/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>Notes to Self: Web Fonts and Typography</title>
        <link>https://blog.test:8443/2099/01/notes-to-self-web-fonts-and-typography/</link>
        <pubDate>Thu, 01 Jan 2099 00:00:00 +0000</pubDate>
        
        <guid>876b1f96f848395442e8c59d9b570579</guid>
        <description>&lt;p&gt;abcde­fghijklmnopqrstu­vwxyz­abcde­fghijklmnopqrstu­vwxyz­abcde­fgh&lt;/p&gt;
&lt;p&gt;= 2.31 alphabets&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://practicaltypography.com/line-length.html&#34;&gt;https://practicaltypography.com/line-length.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;web-fonts&#34;&gt;Web Fonts&lt;/h2&gt;
&lt;p&gt;Some of my selection criteria&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Not too narrow&lt;/em&gt;: a too narrow font creates too much density and often makes my eyes quickly tired (e.g. &lt;a href=&#34;https://fonts.google.com/specimen/Roboto+Condensed&#34;&gt;Roboto Condensed&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Oswald&#34;&gt;Oswald&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Open+Sans+Condensed&#34;&gt;Open Sans Condensed&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/PT+Sans+Narrow&#34;&gt;PT Sans Narrow&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Fjalla+One&#34;&gt;Fjalla One&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Not too wide&lt;/em&gt;: I don&amp;rsquo;t feel comfortable reading a sentence looked like being stretched (e.g. &lt;a href=&#34;https://fonts.google.com/specimen/Montserrat&#34;&gt;Montserrat&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Libre+Franklin/&#34;&gt;Libre Franklin&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sans-serif-fonts&#34;&gt;Sans-serif fonts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/IBM+Plex+Sans&#34;&gt;IBM Plex Sans&lt;/a&gt; and &lt;a href=&#34;https://fonts.google.com/specimen/PT+Sans&#34;&gt;PT Sans&lt;/a&gt; look modern and truly impressive. These are among my favourite fonts. Apple default system font for macOS and iOS &lt;em&gt;San Francisco&lt;/em&gt; also generate modern and thin, round text shapes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Noto+Sans&#34;&gt;Noto Sans&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Lato&#34;&gt;Lato&lt;/a&gt;, and &lt;a href=&#34;https://fonts.google.com/specimen/Karla&#34;&gt;Karla&lt;/a&gt; are quite alike with reasonably thick near-square letter shapes. &lt;a href=&#34;https://fonts.google.com/specimen/Fira+Sans/&#34;&gt;Fira Sans&lt;/a&gt; produces character shapes a tad bolder and tighter than Karla.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some other nice fonts like &lt;a href=&#34;https://fonts.google.com/specimen/Raleway&#34;&gt;Raleway&lt;/a&gt; renders thin and wide text that might look very nice at larger scales rather than typical body font size.  Open Sans](&lt;a href=&#34;https://fonts.google.com/specimen/Open+Sans&#34;&gt;https://fonts.google.com/specimen/Open+Sans&lt;/a&gt;) looks nice but a bit wide/stretched. &lt;a href=&#34;https://fonts.google.com/specimen/Roboto&#34;&gt;Roboto&lt;/a&gt; produces round shape, moderate thickness. &lt;a href=&#34;https://fonts.google.com/specimen/Nunito/&#34;&gt;Nunito&lt;/a&gt; renders elegant and thin sans-serif text. Both &lt;a href=&#34;https://fonts.google.com/specimen/Alegreya+Sans&#34;&gt;Alegreya Sans&lt;/a&gt; and &lt;a href=&#34;https://fonts.google.com/specimen/Source+Sans+Pro&#34;&gt;Source Sans Pro&lt;/a&gt; look nice and remind me of &lt;a href=&#34;https://typekit.com/fonts/myriad&#34;&gt;Myriad Pro&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;serif-fonts&#34;&gt;Serif fonts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Eczar&#34;&gt;Eczar&lt;/a&gt; - nice and very impressive serif font&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Merriweather&#34;&gt;Merriweather&lt;/a&gt; - at the same font size, it looks a bit bolder and larger than other serif fonts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Neuton&#34;&gt;Neuton&lt;/a&gt; - looks smaller for the same font size&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/PT+Serif&#34;&gt;PT Serif&lt;/a&gt; - nice looking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Slabo+27px/&#34;&gt;Slabo 27px&lt;/a&gt; &amp;ndash; looks modern, narrow than others&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Lora&#34;&gt;Lora&lt;/a&gt; and &lt;a href=&#34;https://fonts.google.com/specimen/Source+Serif+Pro&#34;&gt;Source Serif Pro&lt;/a&gt; render not bad and quite modern&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Cormorant&#34;&gt;Cormorant&lt;/a&gt; - looks thin and similar to Garamond. &lt;a href=&#34;https://fonts.google.com/specimen/Cardo&#34;&gt;Cardo&lt;/a&gt; and &lt;a href=&#34;https://fonts.google.com/specimen/Crimson+Text&#34;&gt;Crimson Text&lt;/a&gt; look similar to the oldie Times and Times New Roman.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;monospace&#34;&gt;Monospace&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Roboto Mono&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inconsolata&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Source+Code+Pro&#34;&gt;Source Code Pro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Chromium and macOS Environment Variables</title>
        <link>https://blog.test:8443/2019/07/chromium-macos-environment/</link>
        <pubDate>Fri, 05 Jul 2019 12:33:36 +1000</pubDate>
        
        <guid>7b0d82ade24c7cda342d040f0f49cb09</guid>
        <description>&lt;p&gt;Trying Chromium in macOS Mojave (10.14), I confronted with the popular issue regarding &lt;a href=&#34;https://www.google.com/search?q=chromium+google+api+key+missing&#34;&gt;Google API key missing&lt;/a&gt;. After obtaining an API key along with client ID and secret, I put it on some shell startup scripts as following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;export GOOGLE_API_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_google_api_key&amp;#34;&lt;/span&gt;
export GOOGLE_DEFAULT_CLIENT_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_client_id&amp;#34;&lt;/span&gt;
export GOOGLE_DEFAULT_CLIENT_SECRET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_client_secret&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even more careful, I also use &lt;code&gt;launchctl setenv&lt;/code&gt; to ensure these variables are available for macOS GUI applications (usually launched via Finder, Dock, Spotlight or so).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -x /bin/launchctl &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; /bin/launchctl setenv GOOGLE_API_KEY $GOOGLE_API_KEY
&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -x /bin/launchctl &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; /bin/launchctl setenv GOOGLE_DEFAULT_CLIENT_ID $GOOGLE_DEFAULT_CLIENT_ID
&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -x /bin/launchctl &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; /bin/launchctl setenv GOOGLE_DEFAULT_CLIENT_SECRET $GOOGLE_DEFAULT_CLIENT_SECRET
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sadly, it didn&amp;rsquo;t work under Mojave. When launching Chrome from Finder or Dock, the warning is still there. It seems Apple has silently altered macOS a lot and many existing work-arounds stop working under Mojave.&lt;/p&gt;
&lt;p&gt;There are also some working methods involving renaming the original executable binary &lt;code&gt;/Applications/Chromium.app/Contents/MacOS/Chromium&lt;/code&gt;, creating a new script to launch Chrome in which the aforementioned variables are set properly (even leading to automated scripts like &lt;a href=&#34;https://github.com/ezeeyahoo/ChromiumSyncEnabler&#34;&gt;this&lt;/a&gt;). Personally, I don&amp;rsquo;t like these ways as they are rather intrusive and therefore less upgrade-proof (I guess future updates of Chromium will override these launching scripts and you must circumvent that) and only consider them last resort.&lt;/p&gt;
&lt;p&gt;Fortunately, I have found an &lt;a href=&#34;https://stackoverflow.com/q/25385934&#34;&gt;old StackOverflow&amp;rsquo;s topic&lt;/a&gt; with two methods that work perfectly fine for macOS Mojave and systems before that as you can see in that SO&amp;rsquo;s topic. Better then, they are much less intrusive and upgrade-friendly.&lt;/p&gt;
&lt;h2 id=&#34;method-1-using-login-items&#34;&gt;Method 1: Using Login Items&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Open the built-in app &amp;ldquo;Script Editor&amp;rdquo; in &lt;code&gt;/Applications/Utilities/&lt;/code&gt;, enter the following content&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-applescript&#34; data-lang=&#34;applescript&#34;&gt;do shell script &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/launchctl setenv GOOGLE_API_KEY your_google_api_key&amp;#34;&lt;/span&gt;
do shell script &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/launchctl setenv GOOGLE_DEFAULT_CLIENT_ID your_client_id&amp;#34;&lt;/span&gt;
do shell script &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/launchctl setenv GOOGLE_DEFAULT_CLIENT_SECRET your_client_secret&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then save (&lt;!-- raw HTML omitted --&gt;⌘&lt;!-- raw HTML omitted --&gt; + &lt;!-- raw HTML omitted --&gt;s&lt;!-- raw HTML omitted --&gt;) under the format &amp;ldquo;&lt;strong&gt;Application&lt;/strong&gt;&amp;quot;. Behind the scene, it will create a new macOS application and wraps the script content inside.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Go to &amp;ldquo;Settings&amp;rdquo;  &amp;ndash;&amp;gt; &amp;ldquo;Users and Groups&amp;rdquo; &amp;ndash;&amp;gt; choose the tab &amp;ldquo;Login Items&amp;rdquo;, click &lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt; and either point to the newly created application or simply drag and drop it to the box above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Log out and log in again. Chromium should see the variables and shows no warning.&lt;/p&gt;
&lt;h2 id=&#34;method-2-via-launchagents&#34;&gt;Method 2: Via LaunchAgents&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Create a file &lt;code&gt;environments.plist&lt;/code&gt; inside the folder &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plist&#34; data-lang=&#34;plist&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
  &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
  &amp;lt;string&amp;gt;gui-environments&amp;lt;/string&amp;gt;
  &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
  &amp;lt;array&amp;gt;
    &amp;lt;string&amp;gt;sh&amp;lt;/string&amp;gt;
    &amp;lt;string&amp;gt;-c&amp;lt;/string&amp;gt;
    &amp;lt;string&amp;gt;
    /bin/launchctl setenv GOOGLE_API_KEY your_google_api_key
    /bin/launchctl setenv GOOGLE_DEFAULT_CLIENT_ID your_client_id
    /bin/launchctl setenv GOOGLE_DEFAULT_CLIENT_SECRET your_client_secret
    &amp;lt;/string&amp;gt;
  &amp;lt;/array&amp;gt;
  &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
  &amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Enable it with &lt;code&gt;launchctl&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;launchctl load ~/Library/LaunchAgents/environments.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: There is no step 3, just launch &lt;code&gt;Chromium&lt;/code&gt; and see that it should work without warning ;)&lt;/p&gt;
&lt;p&gt;In this method, you don&amp;rsquo;t even need to log out or reboot. The variables are made available to &lt;code&gt;launchctl&lt;/code&gt; after Step 2.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The aforementioned methods work flawlessly under macOS Mojave (10.14) and less intrusive with respect to the target applications. As a result, we can upgrade or change the applications without concerning about re-creating, updating or changing the launching scripts. The only caveat is that, the environment variables will be exposed to all applications, and hence, could lead to some security concerns (e.g. regarding Google keys and secrets).&lt;/p&gt;
&lt;p&gt;In that same SO&amp;rsquo;s topic, there is also &lt;a href=&#34;https://stackoverflow.com/a/26477515&#34;&gt;a slightly different way&lt;/a&gt; to elevate a bit more to make it work for the whole system instead of only the particular user. It involves in putting the main script where environment vars are set in &lt;code&gt;/etc/environment&lt;/code&gt; and creating a launching agent in &lt;code&gt;/Library/LaunchAgents/&lt;/code&gt; along with another daemon service in &lt;code&gt;/Library/LaunchDaemons/&lt;/code&gt; to monitor the content of &lt;code&gt;/etc/environment&lt;/code&gt;.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Managing UEFI based Multi-System Boot</title>
        <link>https://blog.test:8443/2019/06/managing-uefi-based-multi-system-boot/</link>
        <pubDate>Fri, 28 Jun 2019 13:28:34 +1000</pubDate>
        
        <guid>e9eb142b5c62d0f72b700723d79eb5f9</guid>
        <description>&lt;p&gt;My Lenovo T430s originally support both &lt;a href=&#34;https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface#CSM_booting&#34;&gt;UEFI&lt;/a&gt; mode and backward compatibility with legacy &lt;a href=&#34;https://en.wikipedia.org/wiki/BIOS&#34;&gt;BIOS&lt;/a&gt; mode. Planning to install multiple OSs for experimenting purposes, I have messed up these modes and hard drive partitions so many times leading to re-installing the whole system. Eventually, I have figured out a potential solution to make multiple systems including Windows 10 and few Linux distros live together peacefully and manageably ;)&lt;/p&gt;
&lt;h2 id=&#34;general-strategy&#34;&gt;General Strategy&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s assume we want to install Windows 10 alongside some representatives Linux systems such as &lt;a href=&#34;https://ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&#34;https://fedoraproject.org/&#34;&gt;Fedora&lt;/a&gt;, &lt;a href=&#34;https://www.opensuse.org&#34;&gt;OpenSUSE&lt;/a&gt;, and &lt;a href=&#34;https://www.archlinux.org&#34;&gt;Arch Linux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My hard-learned strategy is quite simple and working wonder so far.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Windows 10 first and let it automatically partition the whole hard drive&lt;/li&gt;
&lt;li&gt;Then, either (1) boot straight into Windows and shrink the partitions there or (2) just start any Linux live and use &lt;a href=&#34;https://gparted.org&#34;&gt;GParted&lt;/a&gt; to create and manage the partitions. Method (2) would be more efficient as we will mostly deal with Linux after Windows has been installed.&lt;/li&gt;
&lt;li&gt;Install each Linux respectively on the dedicated partition&lt;/li&gt;
&lt;li&gt;Manage or fix the boot system (UEFI, GRUB, etc.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is an alternative:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of installing Windows 10 first, you can use any disk partitioning tools such as &lt;a href=&#34;https://gparted.org&#34;&gt;GParted&lt;/a&gt;, &lt;a href=&#34;https://www.gnu.org/software/parted/&#34;&gt;GNU parted&lt;/a&gt;, &lt;a href=&#34;http://www.rodsbooks.com/gdisk/&#34;&gt;gdisk&lt;/a&gt;, etc. beforehand. Eventually, your system MUST HAVE an &lt;a href=&#34;https://en.wikipedia.org/wiki/EFI_system_partition&#34;&gt;EFI system partition&lt;/a&gt; (ESP). I chose to let Windows handle the partitioning because most of PC vendors support well Windows and in turn, Windows treats them quite nicely, especially when dealing with various kinds UEFI firmware as well as creating necessary partitions for system recovery. The only caveat is that, the ESP created by Windows 10 will be about 100MB large and sometimes considered too small by some Linux installers (e.g. OpenSUSE) but eventually they accept it and proceed without issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTES&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When relying on Windows 10 installer to create an ESP, we MUST leave it alone and &lt;strong&gt;MUSN&amp;rsquo;T create any additional ESP&lt;/strong&gt; when installing Linux unless you want to start everything over.&lt;/li&gt;
&lt;li&gt;Most of Linux installers will accept and play nicely with an existing ESP, we only need to &lt;strong&gt;mount the ESP at  the convention folder &lt;code&gt;/boot/efi&lt;/code&gt;&lt;/strong&gt; (or &lt;code&gt;/efi&lt;/code&gt; but not in all distros) whenever dealing with disk partitioning or creating file systems for installing a new Linux system.&lt;/li&gt;
&lt;li&gt;The ESP will be recognized by Linux under many terms e.g. &amp;ldquo;EFI system&amp;rdquo; or just EFI. In case you want to be sure, some special signs would be file system &lt;strong&gt;FAT32&lt;/strong&gt; with partition ID &lt;code&gt;EF&lt;/code&gt; (MBR disk) or partition type GUID &lt;code&gt;C12A7328-F81F-11D2-BA4B-00A0C93EC93B&lt;/code&gt; (GPT disk) per UEFI specs.&lt;/li&gt;
&lt;li&gt;Before tinkering with any new installation, it&amp;rsquo;s always wise to make a back up of the ESP. In Windows, this task is doable but quite difficult as involving some serious &lt;a href=&#34;https://superuser.com/questions/965751/how-to-access-efi-partition-on-windows-10&#34;&gt;command line skill&lt;/a&gt; and/or &lt;a href=&#34;https://support.microsoft.com/help/315943/you-cannot-access-an-efi-system-partition-with-the-mountvol-utility-in&#34;&gt;diskpart tool&lt;/a&gt; to gain access to the system, hidden ESP. It would be efficient to use any Linux live with CD or USB that treats the ESP as normal FAT32 partition, then copy the whole file system content to a safe place (USB or network shares).&lt;/li&gt;
&lt;li&gt;The Linux distro installed later will take over and arrange the system booting. Normally, it will create a new boot entry and set that entry first in the boot order. The boot entry of a Linux system often starts &lt;a href=&#34;https://www.gnu.org/software/grub/&#34;&gt;GNU GRUB&lt;/a&gt; boot loader that presents a boot menu. One good take-away here is whatever Linux distros that you are familiar with or used to, install it last. Then work on it to control the rest of the system. Nonetheless, there are also some good choices regarding system boot management that we will discuss later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;fedora&#34;&gt;Fedora&lt;/h3&gt;
&lt;p&gt;The installer of Fedora does most of the job well. Like other distros, the ESP partition existed and only needs to be mounted on &lt;code&gt;/boot/efi&lt;/code&gt;. When the installation finishes, Fedora will set up the UEFI boot order and take over to show its own GRUB menu.&lt;/p&gt;
&lt;h3 id=&#34;opensuse&#34;&gt;OpenSUSE&lt;/h3&gt;
&lt;h3 id=&#34;arch-linux&#34;&gt;Arch Linux&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pacman -Syu
&lt;span style=&#34;color:#75715e&#34;&gt;# install necessary packages&lt;/span&gt;
pacman -S grub efibootmgr dosfstools os-prober mtools
mkdir -p /boot/efi
&lt;span style=&#34;color:#75715e&#34;&gt;# mount the EFI partition to /boot/efi&lt;/span&gt;
mount /dev/XXX /boot/efi
&lt;span style=&#34;color:#75715e&#34;&gt;# install UEFI GRUB with the ID &amp;#34;arch&amp;#34; corresponding to the folder &amp;#34;&amp;#34;/boot/efi/EFI/arch&amp;#34;&lt;/span&gt;
grub-install --target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x86_64-efi --bootloader-id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arch --recheck
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For beginners who are not used to working in terminal mode with lots of command lines, it would be wise to install GNOME or similar graphical user interfaces like KDE, Xfce, etc. before finishing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After finishing installing Arch Linux and rebooting, I have experienced a black screen following the booting logo. I was not able to figure it out but the system starts normally when turning off and on again showing Arch&amp;rsquo;s GRUB menu.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.happyassassin.net/2014/01/25/uefi-boot-how-does-that-actually-work-then&#34;&gt;https://www.happyassassin.net/2014/01/25/uefi-boot-how-does-that-actually-work-then&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jdebp.eu/FGA/efi-boot-process.html&#34;&gt;https://jdebp.eu/FGA/efi-boot-process.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ximalas.info/2015/03/19/uefi-gpt-windows-10-freebsd-10-and-refind&#34;&gt;http://ximalas.info/2015/03/19/uefi-gpt-windows-10-freebsd-10-and-refind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rodsbooks.com/linux-uefi&#34;&gt;http://rodsbooks.com/linux-uefi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface&#34;&gt;https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.debian.org/UEFI&#34;&gt;https://wiki.debian.org/UEFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.ubuntu.com/community/UEFI&#34;&gt;https://help.ubuntu.com/community/UEFI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fedoraproject.org/wiki/Unified_Extensible_Firmware_Interface&#34;&gt;https://fedoraproject.org/wiki/Unified_Extensible_Firmware_Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/bringup/boot-and-uefi&#34;&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/bringup/boot-and-uefi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-installing-using-the-mbr-or-gpt-partition-style&#34;&gt;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-installing-using-the-mbr-or-gpt-partition-style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions&#34;&gt;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/1247300/how-to-make-uefi-bios-start-grub-not-windows&#34;&gt;https://superuser.com/questions/1247300/how-to-make-uefi-bios-start-grub-not-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://askubuntu.com/questions/831216/how-can-i-reinstall-grub-to-the-efi-partition&#34;&gt;https://askubuntu.com/questions/831216/how-can-i-reinstall-grub-to-the-efi-partition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Lenovo Thinkpad T430s Supervisor Password Removal</title>
        <link>https://blog.test:8443/2019/06/t430s-supervisor-password-removal/</link>
        <pubDate>Mon, 24 Jun 2019 10:50:24 +1000</pubDate>
        
        <guid>065fbee3fa9e5d629405d8b14c22147e</guid>
        <description>&lt;p&gt;After a while merely working with macOS and Linux, I have recently decided to have an additional Windows box for some Windows-specific tools and development. I could be able to secure a second-hand &lt;a href=&#34;https://www.lenovo.com/us/en/laptops/thinkpad/t-series/t430s/&#34;&gt;Lenovo Thinkpad T430s&lt;/a&gt; on eBay for around 130 AUD, which is quite a decent price with CPU i5-3320M (2.6GHz), 4GB RAM, 14in 1600x900 LCD and its battery could last about two hours.&lt;/p&gt;
&lt;p&gt;I was away when the seller delivered the laptop and thus unable to check anything right after receiving. It turns out the seller (or his seller before that, as he claimed) had lost or could not retrieve the BIOS &lt;a href=&#34;https://support.lenovo.com/au/en/solutions/ht036206&#34;&gt;supervisor password&lt;/a&gt;. I only noticed this issue when I tried unsuccessfully to alter the BIOS to UEFI mode in order to install and dual boot Windows and Ubuntu in UEFI. Without the correct supervisor password, I am not allowed to make any meaningful changes in the BIOS.&lt;/p&gt;
&lt;p&gt;You got supervisor password locked when you see this after pressing &lt;!-- raw HTML omitted --&gt;F1&lt;!-- raw HTML omitted --&gt; to enter the BIOS at boot time.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;You may just &lt;!-- raw HTML omitted --&gt;Enter&lt;!-- raw HTML omitted --&gt; with blank and can still get into BIOS but most of the options are grayed out to your dismay.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Searching around on the Internet, most of Lenovo forum experts will tell you that the only way is to get Lenovo replacing the mainboard due to security setting. Some will point to &lt;a href=&#34;http://www.ja.axxs.net&#34;&gt;Joe&amp;rsquo;s KeyMaker kit&lt;/a&gt; that costs at least 113 USD (98 plus 15 USD for shipping and handling).&lt;/p&gt;
&lt;p&gt;Fortunately, there are some workarounds like this &lt;a href=&#34;https://www.reddit.com/r/thinkpad/comments/4z9czz/resetting_the_eepromlost_supervisor_password_on/&#34;&gt;Reddit thread&lt;/a&gt;, David Zou&amp;rsquo;s &lt;a href=&#34;https://davidzou.com/articles/bios-password-bypass&#34;&gt;post&lt;/a&gt;, this SuperUser&amp;rsquo;s &lt;a href=&#34;https://superuser.com/questions/393922/how-to-remove-the-supervisor-bios-password-for-an-ibm-thinkpad&#34;&gt;thread&lt;/a&gt;, or this &lt;a href=&#34;https://www.facts-are-stubborn.com/reset-bios-password-on-lenovo-thinkpad/&#34;&gt;post&lt;/a&gt;, and many YouTube&amp;rsquo;s video like &lt;a href=&#34;https://www.youtube.com/watch?v=ANZjUPUYE7s&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://www.youtube.com/watch?v=FW-RLkzjAS8&#34;&gt;there&lt;/a&gt;. After few trials, I could successfully reset the supervisor password in my T430s. Here I will summarize some basic and working steps with some important notes that might save you some money, time, and effort.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IMPORTANT&lt;/p&gt;
&lt;p&gt;The following procedure involves some risky short-circuit of a mainboard&amp;rsquo;s component. I will bear no responsibility when you damage your own computers using these guidance. Proceed at your own risk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main idea is to locate and short-circuit the pins SDA and SCL of the EEPROM during the process of supervisor password checking.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disassemble T430s to expose the EEPROM&lt;/li&gt;
&lt;li&gt;Clear supervisor password by short-circuiting the EEPROM&amp;rsquo;s pins
&lt;ul&gt;
&lt;li&gt;Turn on and keep short-circuiting the pins &lt;code&gt;SDA&lt;/code&gt; and &lt;code&gt;SCL&lt;/code&gt; of the EEPROM when entering the BIOS (pressing &lt;!-- raw HTML omitted --&gt;F1&lt;!-- raw HTML omitted --&gt;) and the BIOS is checking the password&lt;/li&gt;
&lt;li&gt;Enter the BIOS, change the supervisor password, and then save the changes (&lt;!-- raw HTML omitted --&gt;F10&lt;!-- raw HTML omitted --&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;disassemble-t430s&#34;&gt;Disassemble T430s&lt;/h2&gt;
&lt;p&gt;The EEPROM is on the mainboard under the keyboard. Hence, we must remove the keyboard to expose it. Unless you are too familiar with opening a T430s, you should refer to the Hardware Maintenance Manual (either &lt;a href=&#34;https://download.lenovo.com/ibmdl/pub/pc/pccbbs/mobiles_pdf/t430s_t430si_hmm_en_0b48538_01.pdf&#34;&gt;pdf&lt;/a&gt; or &lt;a href=&#34;https://support.lenovo.com/solutions/pd023494&#34;&gt;online&lt;/a&gt; version).&lt;/p&gt;
&lt;p&gt;Using the instructions for &lt;a href=&#34;https://support.lenovo.com/solutions/pd023557&#34;&gt;&amp;ldquo;Removing and Installing the Keyboard - ThinkPad T430s, T430si&amp;rdquo;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove the &lt;a href=&#34;https://support.lenovo.com/documents/pd023501&#34;&gt;battery pack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Remove the &lt;a href=&#34;https://support.lenovo.com/au/en/solutions/pd023551&#34;&gt;memory cover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Locate and remove the two keyboard screws marked with red color.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Turn to the upper side, slightly press or push the keyboard a little towards the direction of the display to unlatch it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You better use a small flat screwdriver to gently push and lift up the keyboard&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull the keyboard out gently to avoid breaking the thin keyboard cable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now we need to locate the EEPROM. As the chip is very small, it will take a little effort. It would be faster with a good loupe or similar. In my T430s, the chip is south of the CPU and hidden under the black sticky isolation tape.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;According to the &lt;a href=&#34;https://davidzou.com/user/pages/03.articles/bios-password-bypass/8pinEEPROM.png&#34;&gt;layout diagram&lt;/a&gt; shown by David Zou, the pins SCL and SDA are on the lower opposite side of the dot. The EEPROM in my laptop got some sticky from the isolation tape on the surface and therefore difficult to see the dot. In this case, you can use a pointy driver to gently scan all over the chip&amp;rsquo;s surface like I did.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The &lt;code&gt;SDA&lt;/code&gt; and &lt;code&gt;SCL&lt;/code&gt; pins are identified with two blue arrows. Note that the space between them is tiny, so make sure you are using appropriate tool to only short these pins and don&amp;rsquo;t touch anything else. In my case, I found it very precise and comfortable with a pointy driver from a cheap screwdriver set.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;clear-supervisor-password&#34;&gt;Clear Supervisor Password&lt;/h2&gt;
&lt;p&gt;After successfully locating the EEPROM and identifying the two pins, as David Zou wrote &lt;a href=&#34;https://davidzou.com/articles/bios-password-bypass&#34;&gt;here&lt;/a&gt;, the steps and responses for BIOS and UEFI based computers are slightly different, please refer to his information in your particular case. As my T430s is UEFI based, the process is following.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turn on the computer / laptop&lt;/li&gt;
&lt;li&gt;Short-circuit the two pins &lt;code&gt;SDA&lt;/code&gt; and &lt;code&gt;SCL&lt;/code&gt; and keep them shorted while pressing &lt;!-- raw HTML omitted --&gt;F1&lt;!-- raw HTML omitted --&gt; to enter BIOS setup. I was taken directly to the BIOS without any prompt or asking.&lt;/li&gt;
&lt;li&gt;Stop short-circuiting after successfully entering the BIOS (otherwise, start over from Step 1)&lt;/li&gt;
&lt;li&gt;Navigate to the menu &lt;!-- raw HTML omitted --&gt;Security&lt;!-- raw HTML omitted --&gt; &amp;gt; &lt;!-- raw HTML omitted --&gt;Password&lt;!-- raw HTML omitted --&gt; &amp;gt; &lt;!-- raw HTML omitted --&gt;Supervisor Password&lt;!-- raw HTML omitted --&gt; to change the supervisor password (&lt;em&gt;&lt;strong&gt;please read the following note&lt;/strong&gt;&lt;/em&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;An important lesson I learned at this point (in a hard way) is that, you &lt;strong&gt;should change the supervisor password to something not blank&lt;/strong&gt;. After clearing the supervisor password as above, I tested few times and put back every thing just to realize that the old or locked supervisor password kicked back in. That means I got locked out as before and must re-open the keyboard to start over the short-circuit.&lt;/p&gt;
&lt;p&gt;The issue was somehow noticed by &lt;a href=&#34;https://www.reddit.com/user/clocow/&#34;&gt;clocow&lt;/a&gt; in &lt;a href=&#34;https://www.reddit.com/r/thinkpad/comments/4z9czz/resetting_the_eepromlost_supervisor_password_on/&#34;&gt;this Reddit thread&lt;/a&gt; and his suspect is due to the backup battery (the yellow one in the mainboard). He suggested to leave the battery disconnected for 3 hours and retried.&lt;/p&gt;
&lt;p&gt;Nonetheless, I have just changed the supervisor password and experienced no kick back or reset so far. My suspect is that the reverting of old/locked supervisor password happens when the supervisor password is blank after the hiccup (i.e. the attempt to clear password via short-circuiting). That&amp;rsquo;s why I got the aforementioned simple solution.&lt;/p&gt;
&lt;p&gt;Eventually, I am truly happy to gain control of my laptop without spending extra money and learn few more thing on the way.&lt;/p&gt;
&lt;p&gt;Happy hacking (aka short-circuiting), mates !!!&lt;/p&gt;
&lt;h3 id=&#34;ps&#34;&gt;P.S.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For other models, you should research carefully whether the supervisor password can be cleared using this method. In some models, the places to store passwords are totally different and you can risk burning or bricking a working laptop.&lt;/li&gt;
&lt;li&gt;Information about the location of EEPROM and two pins of other Lenovo models can be found &lt;a href=&#34;http://www.ja.axxs.net/eeprom_location.htm&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://www.allservice.ro/forum/viewtopic.php?t=52&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.lenovo.com/au/en/solutions/ht036206&#34;&gt;Lenovo Support: Types of password for ThinkPad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://davidzou.com/articles/bios-password-bypass&#34;&gt;https://davidzou.com/articles/bios-password-bypass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/thinkpad/comments/4z9czz/resetting_the_eepromlost_supervisor_password_on&#34;&gt;https://www.reddit.com/r/thinkpad/comments/4z9czz/resetting_the_eepromlost_supervisor_password_on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Chuyện lái xe và giao thông: Phần 2</title>
        <link>https://blog.test:8443/2019/03/lai-xe-chau-au/</link>
        <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>1f741995c5657af446d7367e266df1e9</guid>
        <description>&lt;p&gt;Được đi du học ở CH Áo từ 2005, tôi không hề có một ý niệm về học và lấy BLX vì hệ thống giao thông công cộng quá tốt. Chi phí và thời gian bỏ ra cho việc sở hữu một chiếc ô tô vào lúc đó không thoả đáng cho mấy so với ngân sách không mấy rộng rãi của gia đình. Thế nên, mãi đến đầu năm 2013 tôi mới chính thức sở hữu BLX ô tô đầu tiên do Áo cấp. BLX này có giá trị trên toàn châu Âu và cả một số nước có kí kết với liên hiệp châu Âu. Chính vì thế quá trình học và thi BLX cực kì nghiêm túc và gắt gao. Quá trình đó thực sự đã thay đổi bản thân tôi rất nhiều ở kiến thức cũng như nhận thức về văn hoá giao thông.&lt;/p&gt;
&lt;p&gt;Học thi BLX (Führerschein) ở Áo, bạn có thể đến một trong các  trường dạy lái xe (Fahrschule) và chọn một trong các chương trình khác nhau. Đừng lo lắng, tất cả chương trình đó đều phải dựa trên khung cốt lõi chia thành các giai đoạn khác nhau và chi phí cũng dao động từ 2000 đến 3000 euros tuỳ theo.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Giai đoạn chuẩn bị&lt;/em&gt; trong đó học viên điền thông tin vào mẫu, mang theo giấy tờ cá nhân có dán ảnh (Lichtbildausweis) như passport, và khám sức khoẻ. Bác sĩ khám rất kĩ về mắt, khả năng nhận thức, tâm lý, và vận động cơ bản. Tôi vốn bị cận nhẹ và muốn đeo kính sát tròng khi lái xe. Do đó, khi đi khám, tôi phải mang đủ cả kính thường và kính sát tròng vì bác sĩ sẽ kiểm tra tất và những thông tin đó sẽ được chuyển qua cảnh sát để ghi trực tiếp lên BLX. Bác sĩ sẽ hỏi một vài câu đơn giản, kiểm tra vận động tay chân đứng ngồi xem có gì bất bình thường. Giai đoạn tuy nghiêm túc và chặt chẽ nhưng chỉ để cung cấp đủ thông tin cần thiết cho việc học lái xe và ghi lên BLX.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Giai đoạn học hành&lt;/em&gt; bao gồm tối thiểu khoảng 32 buổi học lý thuyết và 10-13 giờ lái thực hành, kèm theo một lớp sơ cứu khẩn cấp (First-Aid, Erste-Hilfe-Kurs). Phần thi lý thuyết có thể chọn thi tiếng Anh hoặc Đức, khoảng chục câu chọn ngẫu nhiên từ &amp;ldquo;bộ đề chuẩn&amp;rdquo; khoảng 2000+ câu hỏi. Vì vốn liếng tiếng Đức không xịn lắm nên tôi hầu như tham gia các buổi lý thuyết bằng tiếng Anh. Thầy cô giáo trên lớp sẽ giải thích các luật quan trọng và sau đó sẽ dùng các câu hỏi trong &amp;ldquo;bộ đề&amp;rdquo; để minh hoạ. Trung tâm thường cung cấp máy để bạn học và thi thử miễn phí. Bạn cũng có thể mua CD/DVD có chứa phần mềm để học ở nhà.&lt;/p&gt;
&lt;p&gt;Sau khi học trên lớp và bộ đề 2000+ câu thì tôi hiểu rất nhiều về luật giao thông Áo.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Chuyện lái xe và giao thông: Phần 1</title>
        <link>https://blog.test:8443/2019/03/lai-xe-viet-nam/</link>
        <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
        
        <guid>adb6ac6483358cdb59989b9b656e322d</guid>
        <description>&lt;h2 id=&#34;chuyện-học-và-lái-xe-ở-việt-nam&#34;&gt;Chuyện học và lái xe ở Việt Nam&lt;/h2&gt;
&lt;p&gt;Nhân đọc bài &lt;a href=&#34;https://vnexpress.net/du-lich/chong-viet-cay-200-trang-luat-australia-de-dua-vo-di-du-lich-3892791.html&#34;&gt;anh kỹ sư cày 200 trang luật&lt;/a&gt; để chuẩn bị du lịch và lái xe ở Úc, tôi nghĩ đến việc chia sẻ kinh nghiệm có thể giúp ích cho người Việt khi bắt đầu lái xe ở nước ngoài. Thực ra ý định này đã nhen nhóm từ lâu, khi mà tôi lần đầu tiên cầm lái ô tô chạy ở Saigon hay vài cung đường lân cận. Từ sau tay lái, tôi đối mặt với cảnh tượng giao thông dường như không theo luật lệ nào nhưng hết sức &amp;ldquo;thần kì&amp;rdquo; là vẫn hầu như thông suốt (ngoại trừ giờ cao điểm hay thời tiết mưa lụt).&lt;/p&gt;
&lt;p&gt;Kinh nghiệm lái xe của tôi bắt đầu ở Việt Nam với chiếc xe Cub của ông anh vào những năm học cấp 3. Sau đó những năm cuối đại học là kỉ niệm cùng đứa bạn làm chung luận văn tốt nghiệp rủ nhau đi học và thi lấy bằng lái xe A1 (mặc dù chưa đứa nào có xe máy cả, vẫn hằng ngày &amp;ldquo;xe đạp ơi&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Hai đứa thuộc loại &lt;em&gt;ngây thơ&lt;/em&gt;, &lt;em&gt;nghiêm túc&lt;/em&gt;, và &lt;em&gt;cứng đầu&lt;/em&gt;, nên không chịu &amp;ldquo;&lt;em&gt;lễ&lt;/em&gt;&amp;rdquo;&amp;rdquo; cho thầy và trung tâm sát hạch như đa số những học viên chung lớp. Thay vào đó, đứa nào cũng chăm chỉ đến lớp đúng giờ, ngồi nghe dạy và giảng luật đi đường, về nhà ôn tập theo &amp;ldquo;bộ đề&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Buổi cuối cùng trước khi đi thi, hai đứa vô cùng ngỡ ngàng khi thầy dành trọn thời gian để chỉ điểm cho cả lớp các &amp;ldquo;chiêu thức&amp;rdquo; để làm bài thi, chẳng hạn như các dấu hiệu nào thì đánh câu này câu kia, hoặc khoảng cách nào, đại khái vậy. Ra khỏi lớp hai thằng nhìn nhau tủm tỉm cười.&lt;/p&gt;
&lt;p&gt;Đến buổi thi, mọi thủ tục tiến hành như bình thường cho tất cả học viên. Khoảng một nửa, trong đó có hai trò ngoan, cắm cúi làm bài còn một nửa kia xem ra ung dung &amp;hellip; chờ đợi một điều gì đó. Đến gần cuối buổi thi, sau khi khoảng hơn một nửa lớp nộp bài thì các thầy giám thị mới &amp;ldquo;ra tay&amp;rdquo;, chỉ điểm nhanh như điện cho một số &amp;ldquo;học viên chọn lọc&amp;rdquo; đánh vào các câu trả lời rồi sau đó tỉnh bơ quay về chỗ ngồi trên bục giảng. Hai chàng học trò ngoan, lúc đó đang kiểm tra lần chót theo như kinh nghiệm thi trắc nghiệm bao năm ở đại học, mắt tròn mắt dẹt ;) Lần đầu tiên trong đời được trực tiếp chứng kiến và &amp;ldquo;mở mắt&amp;rdquo; với chuyện học và thi bằng lái ở VN. Ngoài buổi thi đó là hàng triệu buổi thi khác, thậm chí có người chả cần học thi gì mà cũng có BLX.&lt;/p&gt;
&lt;p&gt;Đó chỉ là một phần rất rất nhỏ ở đỉnh của &amp;ldquo;tảng băng giao thông&amp;rdquo; ở VN dẫn đến tình trạng giao thông rối ren và tai nạn giao thông luôn thường trực mọi nơi. Chạy vượt đèn đỏ, quá tốc độ, tranh đường bất chấp quyền ưu tiên, chạy ngược chiều (ngay cả trên cao tốc), đi đâu cũng bắt gặp. Mặt trái đồng xu phải nói đến chuyện cảnh sát giao thông &amp;ldquo;ăn bánh mì&amp;rdquo;, &amp;ldquo;phát tờ rơi&amp;rdquo; hoặc xua chim mồi gài người đi đường phạm luật, có &amp;ldquo;quần chúng bức xúc&amp;rdquo; giúp &amp;ldquo;làm luật&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Những điều đó theo thời gian đã hình thành thói quen và văn hoá giao thông xấu ở đa số người Việt. Nói thẳng ra vậy không phải để chê bai mà để tự thân mỗi chúng ta nên nhận thức đúng và công bằng về những bất cập trong văn hoá và thói quen giao thông rồi từ đó học hỏi thêm và khắc phục cho bản thân mình và giúp mọi người xung quanh.&lt;/p&gt;
&lt;p&gt;Nhân đây, có một vài kinh nghiệm tôi đúc rút từ lúc lái xế không nổ cho đến xế hai và bốn bánh:&lt;/p&gt;
&lt;h3 id=&#34;đi-xe-máy&#34;&gt;Đi xe máy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Giảm tốc độ ở góc cua khuất hoặc đường cong bị hạn chế tầm nhìn&lt;/strong&gt;*: luôn giả định tình huống xấu nhất có xe dừng hoặc phóng ra mà không ai kịp quan sát hay phản ứng. Ngược lại, **không nên dừng hoặc đậu xe gần hoặc ngay góc khuất và cua**, cực kì nguy hiểm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Đi với tốc độ thấp hơn bình thường khi trời mưa hoặc đường trơn&lt;/strong&gt;: độ bám đường kém sẽ làm xe trượt thêm một đoạn trước khi dừng hẳn khi được phanh; ngoài ra, nước đọng dưới mặt đường sẽ tạo thành lớp đệm khi xe đi tốc độ cao và giảm hoặc mất hẳn độ bám đường.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Không cắt đầu xe ô tô, đặc biệt là xe tải hoặc container&lt;/strong&gt;: xe ô tô càng cồng kềnh thì quán tính lớn, cho dù phản ứng cực nhanh cũng không thể dừng ngay và luôn, xác suất tai nạn rất cao; ví dụ sau khi phanh gấp, khoảng cách trôi đi trước khi dừng hẳn đối với ô tô nhỏ chạy 30km/h là 12m, ở 50km/h là 23m, tốc độ càng cao hoặc xe càng nặng thì khoảng cách đó càng tăng lên; nếu có trời mưa hoặc đường trơn thì &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Không cặp sát hông hoặc sát đuôi xe ô tô / tải / container&lt;/strong&gt;*: xe ô tô có những &amp;ldquo;điểm mù&amp;rdquo; (blind spots) mà tài xế non kinh nghiệm sẽ không thấy hết qua kính chiếu hậu. Xe tải và container cồng kềnh sẽ không thể thấy rõ bên hông xe, mép đầu xe, đuôi xe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nhìn ngang hông và phía sau (qua kính hậu) trước khi rẽ trái hay phải&lt;/strong&gt;: rẽ đột ngột không ra hiệu và không nhìn là con đường ngắn nhất đến bệnh viện vì dễ bị đâm ngang sườn rất nguy hiểm. Khi rẽ trái thì nên từ từ quan sát và đi lấn sát mép giữa đường để hạn chế xe bên tay trái vượt lên; nhưng trước khi quyết định rẽ thì nên quan sát một lần cuối vì có nhiều người đi ẩu sẽ bất chấp tín hiệu xe xin rẽ trái mà phóng ào lên tranh đường.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Đi thành đường chéo khi muốn cắt ngang luồn giao thông&lt;/strong&gt;: điều này xảy ra khi ở gần mé lề phải và muốn qua mé lề trái&amp;mdash;cách tốt nhất là đi theo đường chéo và quan sát cẩn thận bên hông cũng như xe phóng nhanh từ phía sau; đi theo đường thẳng vuông góc thì nhanh qua đường hơn nhưng cũng có thể nhanh qua &amp;hellip; đời khi xe từ sau phóng lên quá nhanh không kịp né vì xe mình đang đi ngang như cua.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Không giảm tốc độ hoặc rẽ quá đột ngột&lt;/strong&gt;*: cái này hiển nhiên nhưng nhiều người coi nhẹ, nhất là khi đi lố địa điểm. Nên nhớ người đi sau không phải ai cũng lái giỏi và né nhanh; thà rằng quay xe dắt bộ vài chục mét còn đỡ hơn răng môi lẫn lộn.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Khi giảm tốc độ thì phanh đều cả hai bánh trước sau&lt;/strong&gt;: với xe thắng tay thì bóp đều cả hai phanh còn xe thắng chân thì vừa đạp thắng vừa bóp thắng nếu có thể; chỉ cần một bánh bị dừng còn bánh kia vẫn chạy thì ngã lăn quay, lúc đó thì chỉ còn cầu nguyện không có xe nào từ sau lao tới :(.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Giữ khoảng cách theo hàng ngang nếu có thể với xe đạp&lt;/strong&gt;: điều này tôi rút ra từ quá trình học lái ô tô ở Áo trong đó bắt buộc giữ khoảng cách ít nhất 1.5m đối với người đi xe đạp, xe máy đề phòng người đó bị ngã thì mình còn đủ không gian để tránh né.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bật đèn khi trời sẩm tối hoặc trời mưa&lt;/strong&gt;: kể cả khi có đèn đường vì mục đích chính có thể chưa phải là soi đường đi mà là để người khác nhìn thấy mình trước khi &amp;hellip; quá muộn màng ;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Enabling Autowired for Apache CXF with Spring Boot</title>
        <link>https://blog.test:8443/2019/01/enabling-autowired-for-apache-cxf-with-spring-boot/</link>
        <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
        
        <guid>ec13a25436cfe730695b751a068948f9</guid>
        <description>&lt;h2 id=&#34;bean-injection-problem&#34;&gt;Bean Injection Problem&lt;/h2&gt;
&lt;h2 id=&#34;spring-context-hierarchy&#34;&gt;Spring Context Hierarchy&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.blackpepper.co.uk/blog/a-modular-architecture-with-spring-boot&#34;&gt;https://www.blackpepper.co.uk/blog/a-modular-architecture-with-spring-boot&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;database&#34;&gt;Database&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.java-config&#34;&gt;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.java-config&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-data/data-jpa/docs/2.1.3.RELEASE/api/org/springframework/data/jpa/repository/config/EnableJpaRepositories.html&#34;&gt;@EnableJpaRepositories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://springbootdev.com/2017/11/13/what-are-the-uses-of-entityscan-and-enablejparepositories-annotations/&#34;&gt;https://springbootdev.com/2017/11/13/what-are-the-uses-of-entityscan-and-enablejparepositories-annotations/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/8134&#34;&gt;https://github.com/spring-projects/spring-boot/issues/8134&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;@EntityScan&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://raymondhlee.wordpress.com/tag/enablejparepositories&#34;&gt;https://raymondhlee.wordpress.com/tag/enablejparepositories&lt;/a&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Making JSP work with Spring Boot 2</title>
        <link>https://blog.test:8443/2018/12/jsp-spring-boot/</link>
        <pubDate>Mon, 24 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>39cccca2fe019ed6f375b9c5c3da24e8</guid>
        <description>&lt;p&gt;One of my past projects relied heavily on XML based configurations and JSP technologies dated back to Spring Framework 3.x. It is still working fine after upgrading to Spring 5 and corresponding dependent libraries such as &lt;a href=&#34;https://hibernate.org/orm/&#34;&gt;Hibernate&lt;/a&gt; 5, &lt;a href=&#34;https://brettwooldridge.github.io/HikariCP/&#34;&gt;HikariCP&lt;/a&gt; 3 and &lt;a href=&#34;https://cxf.apache.org/&#34;&gt;Apache CXF&lt;/a&gt; 3.3.&lt;/p&gt;
&lt;p&gt;Exploring further into Spring ecosystem, I decided to give a shot on migrating to Spring Boot 2 whilst keeping most of the existing MVC (e.g. controllers, validations, JSP views) working. Most of the significant information are scattered throughout the Internet and most of the useful tutorials are sort of &amp;ldquo;&lt;em&gt;just-follow-these-steps-and-it-will-guarantee-to-work-but-nothing-will-be-explained&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;It took me much unexpected effort and trial-and-error to get things right not to mention numerous do&amp;rsquo;s and don&amp;rsquo;ts got undocumented or lost among a bunch of documentations. This post merely focuses some  on major aspects on bringing Spring Boot 2 and &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html&#34;&gt;Spring Web&lt;/a&gt; with JSP together. The versions that I consider here are &lt;a href=&#34;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes&#34;&gt;Spring Boot 2.1&lt;/a&gt; and respectively &lt;a href=&#34;https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-Spring-Framework-5.x#What&#39;s-New-in-Version-5.1&#34;&gt;Spring 5.1&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-spring-boot-project&#34;&gt;Creating a Spring Boot Project&lt;/h2&gt;
&lt;p&gt;We can quickly create a new Spring Boot project using &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; web site or via &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#cli&#34;&gt;command line&lt;/a&gt; or IDE (e.g. Eclipse, IntelliJ IDEA). For less verbose build configuration, I will opt for &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt; build instead of Maven.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;For instance, with the &amp;ldquo;&lt;em&gt;New Project&lt;/em&gt;&amp;rdquo; wizard with Spring Initialzr in Intellij IDEA, I picked &amp;ldquo;&lt;em&gt;War&lt;/em&gt;&amp;rdquo; for &amp;ldquo;&lt;em&gt;Packaging&lt;/em&gt;&amp;quot;. The other non-default option is &amp;ldquo;&lt;em&gt;Gradle Config&lt;/em&gt;&amp;quot;, as mentioned above.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;project-configurations&#34;&gt;Project Configurations&lt;/h2&gt;
&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;Spring Boot 2 comes with &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#using-boot-starter&#34;&gt;a number of starters&lt;/a&gt; (conventionally named as &lt;code&gt;spring-boot-starter-*&lt;/code&gt;) to help us integrating appropriate dependencies in our Spring projects. I pick the module &amp;ldquo;&lt;code&gt;spring-boot-starter-web&lt;/code&gt;&amp;rdquo; that adds an embedded &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt; servlet container and Spring MVC.&lt;/p&gt;
&lt;p&gt;Note that the embedded Tomcat package does not include JSP by default, we must add the module &amp;ldquo;&lt;code&gt;org.apache.tomcat.embed:tomcat-embed-jasper&lt;/code&gt;&amp;rdquo; as well.  In case you need JavaServer Pages Standard Tag Library (JSTL), just add  &amp;ldquo;&lt;code&gt;javax.servlet:jstl&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Apart from those, I also consider to use &lt;a href=&#34;https://www.webjars.org/&#34;&gt;WebJars&lt;/a&gt; as it provides client-side web libraries in terms of JAR files. Thus, It&amp;rsquo;s truly convenient for Java based web projects to bundle popular front-end libraries such as jQuery, Bootstrap, Font-Awesome, to name but a few. I will illustrate the use of WebJars Bootstrap 4 module to our demo project.&lt;/p&gt;
&lt;p&gt;Eventually, our main build configuration &lt;code&gt;build.gradle&lt;/code&gt; should look like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;buildscript &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  ext &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    springBootVersion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.1.1.RELEASE&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  repositories &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    mavenCentral&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    classpath&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot&amp;#39;&lt;/span&gt;
apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;io.spring.dependency-management&amp;#39;&lt;/span&gt;
apply plugin: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;war&amp;#39;&lt;/span&gt;

group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;io.github.htr3n&amp;#39;&lt;/span&gt;
version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.0.1-SNAPSHOT&amp;#39;&lt;/span&gt;
sourceCompatibility &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.8&amp;#39;&lt;/span&gt;

repositories &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  mavenCentral&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&lt;/span&gt;
  implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.webjars:bootstrap:4.1.3&amp;#39;&lt;/span&gt;
  providedRuntime &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;javax.servlet:jstl:1.2&amp;#39;&lt;/span&gt;
  providedRuntime &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.apache.tomcat.embed:tomcat-embed-jasper:9.0.14&amp;#39;&lt;/span&gt;
  testImplementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might notice that some Spring Boot modules such as &lt;code&gt;spring-boot-starter-*&lt;/code&gt; do not have their version numbers. The plugin &lt;a href=&#34;https://github.com/spring-gradle-plugins/dependency-management-plugin&#34;&gt;&lt;code&gt;io.spring.dependency-management&lt;/code&gt;&lt;/a&gt; will automatically &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#reacting-to-other-plugins-dependency-management&#34;&gt;imports the &lt;code&gt;spring-boot-dependencies&lt;/code&gt; bom&lt;/a&gt; with adequate versions for Spring Boot&amp;rsquo;s dependencies.&lt;/p&gt;
&lt;h3 id=&#34;auto-configurations&#34;&gt;Auto-configurations&lt;/h3&gt;
&lt;p&gt;The aforementioned wizard created a &lt;code&gt;DemoApplication&lt;/code&gt; class annotated with &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/autoconfigure/SpringBootApplication.html&#34;&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;&lt;/a&gt; to start our Spring Boot application. The &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation includes three other annotations that perform several configuration tasks automatically, which are,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/SpringBootConfiguration.html&#34;&gt;&lt;code&gt;@SpringBootConfiguration&lt;/code&gt;&lt;/a&gt; embraces &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html?is-external=true&#34;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt; (i.e. the annotated application class also provides Spring configurations)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/autoconfigure/EnableAutoConfiguration.html&#34;&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;&lt;/a&gt; will trigger Spring Boot &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/html/using-boot-auto-configuration.html&#34;&gt;auto-configuration mechanism&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html&#34;&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;&lt;/a&gt; will enable the scanning for Spring components annotated with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/stereotype/Component.html&#34;&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/a&gt; or its sub-types on the package of the main application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s convenient but not mandatory to use &lt;code&gt;@SpringBootApplication&lt;/code&gt;. For advanced configuring or fine-tuning, one can surely pick apart individual annotations and add/customise them to particular needs.&lt;/p&gt;
&lt;p&gt;In order to create &lt;em&gt;a deployable WAR&lt;/em&gt; file, Spring Boot team &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/html/howto-traditional-deployment.html&#34;&gt;recommends to subclass &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; and override its &lt;code&gt;configure()&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; io.github.htr3n&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.SpringBootApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.builder.SpringApplicationBuilder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.web.servlet.support.SpringBootServletInitializer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemoApplication&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; SpringBootServletInitializer &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DemoApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; SpringApplicationBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;configure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SpringApplicationBuilder application&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; application&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sources&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DemoApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;view-resolvers&#34;&gt;View Resolvers&lt;/h3&gt;
&lt;p&gt;In Spring Web MVC, the return value of a &lt;code&gt;@Controller&lt;/code&gt;, if not a valid &lt;code&gt;View&lt;/code&gt; object, should be resolved by a &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.2.RELEASE/javadoc-api/org/springframework/web/servlet/ViewResolver.html&#34;&gt;&lt;code&gt;ViewResolver&lt;/code&gt;&lt;/a&gt; . Spring Boot 2, by default, will load &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/servlet/view/InternalResourceViewResolver.html&#34;&gt;&lt;code&gt;InternalResourceViewResolver&lt;/code&gt;&lt;/a&gt; that combines with &lt;a href=&#34;https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/servlet/view/InternalResourceView.html&#34;&gt;&lt;code&gt;InternalResourceView&lt;/code&gt;&lt;/a&gt; for handling JSP based views. As such, a controller&amp;rsquo;s return values will be mapped to a JSP resource.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InternalResourceViewResolver&lt;/code&gt;, which is based on &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/servlet/view/UrlBasedViewResolver.html&#34;&gt;&lt;code&gt;UrlBasedViewResolver&lt;/code&gt;&lt;/a&gt;, will use the following rule &amp;ldquo;&lt;code&gt;prefix + view_name + suffix&lt;/code&gt;&amp;rdquo; for view resolution. For instance, if a view&amp;rsquo;s logical name is &amp;ldquo;&lt;code&gt;index&lt;/code&gt;&amp;rdquo;, prefix = &amp;ldquo;&lt;code&gt;/WEB-INF/jsp/&lt;/code&gt;&amp;rdquo; and suffix = &amp;ldquo;&lt;code&gt;.jsp&lt;/code&gt;&amp;rdquo; then the resulting view will be  &amp;ldquo;&lt;code&gt;/WEB-INF/jsp/index.jsp&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Therefore, we need to configure the &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;suffix&lt;/code&gt;. This can be done quite easily in Spring Boot , either using &lt;code&gt;application.properties&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or an equivalent but longer Java based configuration&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebConfig&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; WebMvcConfigurer &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ViewResolver &lt;span style=&#34;color:#a6e22e&#34;&gt;jspViewResolver&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    InternalResourceViewResolver viewResolver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InternalResourceViewResolver&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    viewResolver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setPrefix&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/WEB-INF/jsp/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    viewResolver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setSuffix&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.jsp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; viewResolver&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that Spring Boot will map a logical view onto a JSP file inside the folder &amp;ldquo;&lt;code&gt;src/main/webapp/WEB-INF/jsp/&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;Many developers, especially who have a lot of experience with Spring Web MVC, tend to annotate the &lt;code&gt;@Configuration&lt;/code&gt; class with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/servlet/config/annotation/EnableWebMvc.html&#34;&gt;&lt;code&gt;@EnableWebMvc&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s crucial to notice that &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/servlet/config/annotation/EnableWebMvc.html&#34;&gt;&lt;code&gt;@EnableWebMvc&lt;/code&gt;&lt;/a&gt; will &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#howto-switch-off-default-mvc-configuration&#34;&gt;switch off all default Spring Boot auto-configuration&lt;/a&gt; for Spring Web MVC. That means, JSP files and other resources might not be served correctly without extra configurations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;embedded-servlet-container&#34;&gt;Embedded Servlet Container&lt;/h3&gt;
&lt;p&gt;By default, Spring Boot package &lt;code&gt;spring-boot-starter-web&lt;/code&gt; includes Tomcat server via &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; which is rather sufficient. As we adopt Spring Boot&amp;rsquo;s convention for the embedded Tomcat, it will be later accessible at the default address &amp;ldquo;&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&amp;rdquo;. In case you want to fine tune Tomcat, please reference to the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html&#34;&gt;full documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;spring-boot--jsp-login-page&#34;&gt;Spring Boot + JSP Login Page&lt;/h2&gt;
&lt;h3 id=&#34;login-view&#34;&gt;Login View&lt;/h3&gt;
&lt;p&gt;To illustrate how Spring Boot works with JSP technologies, I will use a simple login page that asks for an email and password, conducts some trivial validations, and then informs whether it&amp;rsquo;s successful or failed.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s create a simple JSP file &amp;ldquo;&lt;code&gt;webapp/WEB-INF/jsp/login.jsp&lt;/code&gt;&amp;rdquo; as the login view.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-jsp&#34; data-lang=&#34;jsp&#34;&gt;&amp;lt;%@ taglib prefix=&amp;quot;form&amp;quot; uri=&amp;quot;http://www.springframework.org/tags/form&amp;quot; %&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;link href=&amp;quot;webjars/bootstrap/4.1.3/css/bootstrap.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Login&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;jumbotron&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Spring Boot 2 + JSP Demo&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;form:form method=&amp;quot;POST&amp;quot; modelAttribute=&amp;quot;loginForm&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;email&amp;quot;&amp;gt;E-Mail&amp;lt;/label&amp;gt;
        &amp;lt;form:input path=&amp;quot;email&amp;quot; cssClass=&amp;quot;form-control&amp;quot;/&amp;gt;
        &amp;lt;form:errors path=&amp;quot;email&amp;quot; cssStyle=&amp;quot;color: red&amp;quot;/&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;password&amp;quot;&amp;gt;Password&amp;lt;/label&amp;gt;
        &amp;lt;form:password path=&amp;quot;password&amp;quot; cssClass=&amp;quot;form-control&amp;quot;/&amp;gt;
        &amp;lt;form:errors path=&amp;quot;password&amp;quot; cssStyle=&amp;quot;color: red&amp;quot;/&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;form:button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Log in&amp;lt;/form:button&amp;gt;
    &amp;lt;/form:form&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!--- check login status and display message --&amp;gt;
  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;% Object status = session.getAttribute(&amp;quot;loginStatus&amp;quot;);
      if (&amp;quot;OK&amp;quot;.equals(status)) { %&amp;gt;
    &amp;lt;div class=&amp;quot;alert alert-success&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt;
      Congratulations! Login successfully.
    &amp;lt;/div&amp;gt;
    &amp;lt;% }
      if (&amp;quot;FAILED&amp;quot;.equals(status)) { %&amp;gt;
    &amp;lt;div class=&amp;quot;alert alert-danger&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt;
      Login failed. Please try again!!!
    &amp;lt;/div&amp;gt;
    &amp;lt;% } %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;quot;webjars/bootstrap/4.1.3/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nothing is spectacular here. I will use some tags from &lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/spring-form-tld.html&#34;&gt;Spring form library&lt;/a&gt; to conveniently define and bind HTML form elements with the back-end controllers and model. The major elements are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form:form method=&amp;quot;POST&amp;quot; modelAttribute=&amp;quot;loginForm&amp;quot;&amp;gt;&lt;/code&gt;&amp;mdash;indicates the HTTP method POST as well as a model attribute namely &lt;code&gt;loginForm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form:input path=&amp;quot;email&amp;quot;&amp;gt;&lt;/code&gt; &amp;mdash; the input element for email&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form:input path=&amp;quot;password&amp;quot;&amp;gt;&lt;/code&gt;&amp;mdash;the input element for password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;form:errors .../&amp;gt;&lt;/code&gt; are placeholders for Spring&amp;rsquo;s validation errors (if any)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The later part of &lt;code&gt;login.jsp&lt;/code&gt; is to check whether the login process succeeded or failed and display a corresponding message via access to a session attribute &lt;code&gt;loginStatus&lt;/code&gt; . The actual value of &lt;code&gt;loginStatus&lt;/code&gt; will be updated by the business logic of the controller. Other than that, the JSP view includes Bootstrap 4&amp;rsquo;s stylesheet and JavaScript as provided by WebJars and use Bootstrap 4 CSS classes for styling.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;...
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;webjars/bootstrap/4.1.3/css/bootstrap.min.css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;&amp;gt;
...
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;webjars/bootstrap/4.1.3/js/bootstrap.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;login-controller&#34;&gt;Login Controller&lt;/h3&gt;
&lt;p&gt;First of all, we will need a data object to transfer the login input data in the JSP view (e.g. email and password) with the controllers and models. Here comes the &lt;code&gt;LoginForm&lt;/code&gt; class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoginForm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String password&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoginForm&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getPassword&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; password&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setPassword&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String password&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; password&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No worries about the annotations &lt;code&gt;@NotBlank&lt;/code&gt;, &lt;code&gt;@Email&lt;/code&gt; for now as they are part of &lt;a href=&#34;#data-validation&#34;&gt;data validation&lt;/a&gt;. Apart from those, &lt;code&gt;LoginForm&lt;/code&gt; is just a normal bean with a no-arg constructor and the getters / setters.&lt;/p&gt;
&lt;p&gt;Now, we create a &lt;code&gt;LoginHandler&lt;/code&gt; class to coordinate and handle the whole login process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Controller&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoginHandler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String LOGIN_VIEW &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String LOGOUT_VIEW &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// controller body  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;LoginHandler&lt;/code&gt; class is annotated with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/stereotype/Controller.html&#34;&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/a&gt; to indicate it is a web controller that will be automatically detected by Spring Boot. In the &lt;code&gt;LoginHandler&lt;/code&gt; class, let&amp;rsquo;s define some handler methods.&lt;/p&gt;
&lt;h4 id=&#34;handling-get-requests&#34;&gt;Handling GET Requests&lt;/h4&gt;
&lt;p&gt;We create a &lt;code&gt;showLoginView()&lt;/code&gt; method annotated with &lt;code&gt;@GetMapping&lt;/code&gt; for handling GET requests, i.e. when a client opens the corresponding URL &amp;ldquo;&lt;a href=&#34;http://localhost:8080/login&#34;&gt;http://localhost:8080/login&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;showLoginView&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Model model&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAttribute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginForm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LoginForm&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LOGIN_VIEW&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method simply adds a new model attribute &lt;code&gt;loginForm&lt;/code&gt; (explained later in &lt;a href=&#34;#data-binding&#34;&gt;Data Binding&lt;/a&gt;) and returns a logical login view name &amp;ldquo;&lt;code&gt;login&lt;/code&gt;&amp;rdquo; (which will be resolved to &amp;ldquo;&lt;code&gt;login.jsp&lt;/code&gt;&amp;rdquo;).&lt;/p&gt;
&lt;h4 id=&#34;handling-post-requests&#34;&gt;Handling POST Requests&lt;/h4&gt;
&lt;p&gt;For processing POST requests (i.e. when the client enters some input data and submits the form), we define a &lt;code&gt;login()&lt;/code&gt; method annotated with &lt;code&gt;@PostMapping&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@PostMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Valid&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@ModelAttribute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginForm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; LoginForm form&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                    BindingResult bindingResult&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                    HttpSession session&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;bindingResult&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasErrors&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; authenticated &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc@test.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;form&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String loginStatus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; authenticated &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FAILED&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAttribute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginStatus&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; loginStatus&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LOGIN_VIEW&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The input data of the submitted form will be explicitly mapped to the method parameter &lt;code&gt;form&lt;/code&gt; via the annotation &lt;code&gt;@ModelAttribute&lt;/code&gt;. The &lt;code&gt;@Valid&lt;/code&gt; annotation and the parameter &lt;code&gt;bindingResult&lt;/code&gt; are for &lt;a href=&#34;#data-validation&#34;&gt;data validation&lt;/a&gt;, and the &lt;code&gt;session&lt;/code&gt; is for storing session data indicating a valid authentication.&lt;/p&gt;
&lt;p&gt;The actual authentication business logic has been simplified so that an input email &amp;ldquo;&lt;code&gt;abc@test.com&lt;/code&gt;&amp;rdquo; will pass. Of course, it should be revised with proper data and authentication process in real apps.&lt;/p&gt;
&lt;h4 id=&#34;handling-log-out&#34;&gt;Handling Log-Out&lt;/h4&gt;
&lt;p&gt;For the sake of completeness, we should also add a handler method for logging out in which we remove the session attribute &lt;code&gt;loginStatus&lt;/code&gt; added in the POST method &lt;code&gt;login()&lt;/code&gt; and redirect to a &amp;ldquo;&lt;code&gt;logout.jsp&lt;/code&gt;&amp;rdquo; page.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/logout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;logout&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HttpSession session&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;removeAttribute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginStatus&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; LOGOUT_VIEW&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;data-binding-a-namedata-bindinga&#34;&gt;Data Binding &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h4&gt;
&lt;p&gt;We need to connect the HTML login form to a data transfer object (also known as &lt;em&gt;command object&lt;/em&gt;, &lt;em&gt;form object&lt;/em&gt;,  &lt;em&gt;form-backing object&lt;/em&gt;) of type &lt;code&gt;LoginForm&lt;/code&gt;. Otherwise, Spring MVC will raise the infamous error &amp;ldquo;&lt;em&gt;Caused by: java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name &amp;lsquo;loginForm&amp;rsquo; available as request attribute&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;There are more than one way to do that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Declare a new method that returns a &lt;code&gt;LoginForm&lt;/code&gt; object and is annotated with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ModelAttribute.html&#34;&gt;&lt;code&gt;@ModelAttribute(&amp;quot;loginForm&amp;quot;)&lt;/code&gt;&lt;/a&gt;. Note that all &lt;code&gt;@ModelAttribute&lt;/code&gt; annotated methods will be invoked before any handler methods. Thus, &lt;code&gt;LoginForm&lt;/code&gt; objects can be fed with some initial data, for instance, from a database.&lt;/li&gt;
&lt;li&gt;For the GET method &lt;code&gt;showLoginView()&lt;/code&gt;, create a parameter of type &lt;code&gt;LoginForm&lt;/code&gt; and annotate it with &lt;code&gt;@ModelAttribute(&amp;quot;loginForm&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Do the same as (2) but omit &lt;code&gt;@ModelAttribute&lt;/code&gt;  for the method parameter because according to &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments&#34;&gt;Spring Web documentation&lt;/a&gt;, it will be resolved as &lt;code&gt;@ModelAttribute&lt;/code&gt; implicitly&lt;/li&gt;
&lt;li&gt;Create a parameter of type &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/ui/Model.html&#34;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; for the GET method &lt;code&gt;showLoginView()&lt;/code&gt; and then invoke &lt;code&gt;Model.addAttribute(&amp;quot;loginForm&amp;quot;, new LoginForm())&lt;/code&gt; to add a model attribute &lt;code&gt;loginForm&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even though I can just go with (3) for its simplicity, I always prefer the other three as they advocate explicit declaration. It might make the code a bit verbose but would be easy to understand and maintain later on. I exemplify (4) and implement in &lt;code&gt;showLoginView()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;data-validationa-namedata-validationa&#34;&gt;Data Validation&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/h4&gt;
&lt;p&gt;In my previous Spring 3 projects, I used to create validators that implement the &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/validation/Validator.html&#34;&gt;&lt;code&gt;Validator&lt;/code&gt;&lt;/a&gt; interface and utilise &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/validation/ValidationUtils.html&#34;&gt;ValidationUtils&lt;/a&gt; helper methods to check the input data. These validator beans will be injected into Spring controllers to validate the input before handing over to the actual business logics.&lt;/p&gt;
&lt;p&gt;Nevertheless, we can also leverage &lt;a href=&#34;https://beanvalidation.org/1.0/&#34;&gt;Bean Validation 1.0&lt;/a&gt; (JSR-303) and &lt;a href=&#34;https://beanvalidation.org/1.1/&#34;&gt;1.1&lt;/a&gt; (JSR-349) supported since Spring 4 and &lt;a href=&#34;https://beanvalidation.org/2.0/&#34;&gt;Bean Validation 2.0&lt;/a&gt; (JSR-380) supported since Spring 5 via &lt;a href=&#34;http://hibernate.org/validator/&#34;&gt;Hibernate Validator&lt;/a&gt;. These modules are already included with &lt;code&gt;spring-boot-starter-web&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, we annotate &lt;code&gt;LoginForm&lt;/code&gt;&#39;s fields with some Bean Validation constraints and corresponding messages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoginForm&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@NotBlank&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E-Mail must not be empty.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Email&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please enter a valid e-mail address.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@NotBlank&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password must not be empty.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String password&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we need to update &lt;code&gt;LoginHandler&lt;/code&gt; with respect to validation logics but mostly with the POST handler &lt;code&gt;login()&lt;/code&gt;.  The simplest way is to add a &lt;code&gt;@Valid&lt;/code&gt; annotation to the parameter &lt;code&gt;form&lt;/code&gt;. It indicates that Spring should pass &lt;code&gt;form&lt;/code&gt; to a &lt;code&gt;Validator&lt;/code&gt; beforehand. To get access to validation errors, we have to declare a parameter &lt;code&gt;bindingResult&lt;/code&gt; of type &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/validation/BindingResult.html&#34;&gt;&lt;code&gt;BindingResult&lt;/code&gt;&lt;/a&gt; and place it immediately next to &lt;code&gt;form&lt;/code&gt;. Inside &lt;code&gt;login()&lt;/code&gt;, we can invoke the method &lt;code&gt;BindingResult#hasErrors()&lt;/code&gt; to see whether there are some validation errors and act accordingly. In this case, the login process won&amp;rsquo;t proceed until no validation error occurs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Valid&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@ModelAttribute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;loginForm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; LoginForm form&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                    BindingResult bindingResult&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                    HttpSession session&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;bindingResult&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasErrors&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thanks to Spring tag &amp;ldquo;&lt;code&gt;&amp;lt;form:errors .../&amp;gt;&lt;/code&gt;&amp;rdquo;, any validation errors will be displayed on the JSP login view. For instance, when I left both email and password empty, I got the following messages.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;If the &lt;code&gt;BindingResult&lt;/code&gt; parameter &lt;em&gt;is not placed immediately next to&lt;/em&gt; the corresponding model attribute &lt;code&gt;loginForm&lt;/code&gt;, Spring Boot will throw a &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/validation/BindException.html&#34;&gt;&lt;code&gt;BindException&lt;/code&gt;&lt;/a&gt; that will be resolved via &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.html&#34;&gt;&lt;code&gt;DefaultHandlerExceptionResolver&lt;/code&gt;&lt;/a&gt; as an error HTTP 404 - Bad Request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;building-and-executing&#34;&gt;Building and Executing&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;build.gradle&lt;/code&gt; created previously is mainly based on the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/&#34;&gt;Spring Boot Gradle plugin&lt;/a&gt; for dependency and task management.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When visiting &lt;a href=&#34;http://localhost:8080/login&#34;&gt;http://localhost:8080/login&lt;/a&gt;, you can see the login page.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;To build a WAR package that is executable and deployable&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;./gradlew bootWar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The resulting WAR file is &amp;ldquo;&lt;code&gt;./build/libs/spring-boot-jsp-demo-0.0.1-SNAPSHOT.war&lt;/code&gt;&amp;rdquo;.  It&amp;rsquo;s interesting that you can deploy the WAR file to a standalone Tomcat server as well as directly execute it with &amp;ldquo;&lt;code&gt;java -jar&lt;/code&gt;&amp;rdquo; .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;java -jar ./build/libs/spring-boot-jsp-demo-0.0.1-SNAPSHOT.war
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you want to change the WAR file name, Spring Boot Gradle plugin inherits from, and therefore, offers similar options as, the &lt;a href=&#34;https://docs.gradle.org/current/userguide/war_plugin.html&#34;&gt;official Gradle War plugin&lt;/a&gt;. For instance, I can get rid of the version and use the build project&amp;rsquo;s name to form the WAR file name by customise the task &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/gradle-plugin/api/org/springframework/boot/gradle/tasks/bundling/BootWar.html&#34;&gt;&lt;code&gt;BootWar&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;bootWar &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	archiveName &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${project.name}.war&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also note that, when applying together with Gradle war plugin, Spring Boot Gradle plugin &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#reacting-to-other-plugins-war&#34;&gt;will disable the task &lt;code&gt;war&lt;/code&gt;&lt;/a&gt;. Should you want to use &lt;code&gt;war&lt;/code&gt; alongside &lt;code&gt;bootWar&lt;/code&gt;, just simply enable it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;war &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	enabled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/guides/gs/serving-web-content/&#34;&gt;https://spring.io/guides/gs/serving-web-content/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/46391915/how-to-render-jsp-using-spring-boot-application/46399638#46399638&#34;&gt;https://stackoverflow.com/questions/46391915/how-to-render-jsp-using-spring-boot-application/46399638#46399638&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45533908/unable-to-render-the-jsp-using-spring-boot/45543355#45543355&#34;&gt;https://stackoverflow.com/questions/45533908/unable-to-render-the-jsp-using-spring-boot/45543355#45543355&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/24661289/spring-boot-not-serving-static-content&#34;&gt;https://stackoverflow.com/questions/24661289/spring-boot-not-serving-static-content&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Event Driven and Reactive</title>
        <link>https://blog.test:8443/2018/12/event-driven-and-reactive/</link>
        <pubDate>Wed, 12 Dec 2018 08:03:41 +1100</pubDate>
        
        <guid>472d25f77a0179fca8a11a2519da3f1f</guid>
        <description>&lt;p&gt;&lt;strong&gt;Insert Lead paragraph here.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A augue nunc lacus auctor efficitur tempor placerat, dictum volutpat mi vitae viverra porta non sem, himenaeos senectus vivamus potenti cubilia sollicitudin. Curae cursus inceptos tincidunt magna mi nibh ad enim etiam, molestie eu quis primis hendrerit taciti phasellus. Feugiat ultricies dictumst iaculis potenti odio laoreet urna at, ultrices curae leo accumsan proin sem lobortis.&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;Sollicitudin ornare odio blandit aenean enim lacus accumsan elementum vestibulum porta mauris lorem, ullamcorper class fermentum sem hendrerit ante augue penatibus scelerisque felis leo proin,ad nascetur venenatis sodales dignissim viverra suspendisse turpis convallis condimentum sapien.&lt;/p&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;Heading 3&lt;/h3&gt;
&lt;p&gt;At quisque litora ullamcorper maecenas ultricies ut dignissim luctus curabitur, cras congue eget primis aliquam fringilla nulla dictum posuere, vestibulum sit magnis nisl praesent eros ipsum nunc. Ligula lacus ipsum orci aenean integer pharetra habitasse interdum, porttitor etiam hac feugiat placerat morbi posuere turpis leo, quam at amet gravida commodo fringilla erat.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Business Process Management</title>
        <link>https://blog.test:8443/2018/12/business-process-management/</link>
        <pubDate>Wed, 12 Dec 2018 08:02:54 +1100</pubDate>
        
        <guid>472d25f77a0179fca8a11a2519da3f1f</guid>
        <description>&lt;p&gt;&lt;strong&gt;Insert Lead paragraph here.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A augue nunc lacus auctor efficitur tempor placerat, dictum volutpat mi vitae viverra porta non sem, himenaeos senectus vivamus potenti cubilia sollicitudin. Curae cursus inceptos tincidunt magna mi nibh ad enim etiam, molestie eu quis primis hendrerit taciti phasellus. Feugiat ultricies dictumst iaculis potenti odio laoreet urna at, ultrices curae leo accumsan proin sem lobortis.&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;Sollicitudin ornare odio blandit aenean enim lacus accumsan elementum vestibulum porta mauris lorem, ullamcorper class fermentum sem hendrerit ante augue penatibus scelerisque felis leo proin,ad nascetur venenatis sodales dignissim viverra suspendisse turpis convallis condimentum sapien.&lt;/p&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;Heading 3&lt;/h3&gt;
&lt;p&gt;At quisque litora ullamcorper maecenas ultricies ut dignissim luctus curabitur, cras congue eget primis aliquam fringilla nulla dictum posuere, vestibulum sit magnis nisl praesent eros ipsum nunc. Ligula lacus ipsum orci aenean integer pharetra habitasse interdum, porttitor etiam hac feugiat placerat morbi posuere turpis leo, quam at amet gravida commodo fringilla erat.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Service Oriented Architectures</title>
        <link>https://blog.test:8443/2018/12/service-oriented-architectures/</link>
        <pubDate>Wed, 12 Dec 2018 08:02:18 +1100</pubDate>
        
        <guid>472d25f77a0179fca8a11a2519da3f1f</guid>
        <description>&lt;p&gt;&lt;strong&gt;Insert Lead paragraph here.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A augue nunc lacus auctor efficitur tempor placerat, dictum volutpat mi vitae viverra porta non sem, himenaeos senectus vivamus potenti cubilia sollicitudin. Curae cursus inceptos tincidunt magna mi nibh ad enim etiam, molestie eu quis primis hendrerit taciti phasellus. Feugiat ultricies dictumst iaculis potenti odio laoreet urna at, ultrices curae leo accumsan proin sem lobortis.&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;Sollicitudin ornare odio blandit aenean enim lacus accumsan elementum vestibulum porta mauris lorem, ullamcorper class fermentum sem hendrerit ante augue penatibus scelerisque felis leo proin,ad nascetur venenatis sodales dignissim viverra suspendisse turpis convallis condimentum sapien.&lt;/p&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;Heading 3&lt;/h3&gt;
&lt;p&gt;At quisque litora ullamcorper maecenas ultricies ut dignissim luctus curabitur, cras congue eget primis aliquam fringilla nulla dictum posuere, vestibulum sit magnis nisl praesent eros ipsum nunc. Ligula lacus ipsum orci aenean integer pharetra habitasse interdum, porttitor etiam hac feugiat placerat morbi posuere turpis leo, quam at amet gravida commodo fringilla erat.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Patterns vs Anti Patterns</title>
        <link>https://blog.test:8443/2018/12/patterns-vs-anti-patterns/</link>
        <pubDate>Wed, 12 Dec 2018 08:02:04 +1100</pubDate>
        
        <guid>472d25f77a0179fca8a11a2519da3f1f</guid>
        <description>&lt;p&gt;&lt;strong&gt;Insert Lead paragraph here.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A augue nunc lacus auctor efficitur tempor placerat, dictum volutpat mi vitae viverra porta non sem, himenaeos senectus vivamus potenti cubilia sollicitudin. Curae cursus inceptos tincidunt magna mi nibh ad enim etiam, molestie eu quis primis hendrerit taciti phasellus. Feugiat ultricies dictumst iaculis potenti odio laoreet urna at, ultrices curae leo accumsan proin sem lobortis.&lt;/p&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;Sollicitudin ornare odio blandit aenean enim lacus accumsan elementum vestibulum porta mauris lorem, ullamcorper class fermentum sem hendrerit ante augue penatibus scelerisque felis leo proin,ad nascetur venenatis sodales dignissim viverra suspendisse turpis convallis condimentum sapien.&lt;/p&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;Heading 3&lt;/h3&gt;
&lt;p&gt;At quisque litora ullamcorper maecenas ultricies ut dignissim luctus curabitur, cras congue eget primis aliquam fringilla nulla dictum posuere, vestibulum sit magnis nisl praesent eros ipsum nunc. Ligula lacus ipsum orci aenean integer pharetra habitasse interdum, porttitor etiam hac feugiat placerat morbi posuere turpis leo, quam at amet gravida commodo fringilla erat.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Getting your hands dirty with Gulp</title>
        <link>https://blog.test:8443/2018/12/getting-your-hands-dirty-with-gulp/</link>
        <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>4bdc00f6d429beb75def4fc2f9fd7c08</guid>
        <description>&lt;p&gt;&lt;a href=&#34;https://gulpjs.com&#34;&gt;Gulp&lt;/a&gt; is a JavaScript/Node.js based tool often used for automating many development tasks such as analysing, compiling, compressing, transforming source code and application resources, to name but a few.  It is very popular alongside &lt;a href=&#34;http://gruntjs.com&#34;&gt;Grunt&lt;/a&gt;, and &lt;a href=&#34;https://webpack.js.org&#34;&gt;Webpack&lt;/a&gt;. Among those, Gulp and Grunt are referred as &lt;em&gt;task runners&lt;/em&gt; (defining based on tasks) whilst Webpack is more of a &lt;em&gt;module bundler&lt;/em&gt; (defining based on modules, inputs, outputs).&lt;/p&gt;
&lt;p&gt;Gulp leverages &lt;a href=&#34;https://nodejs.org/api/stream.html&#34;&gt;Node&amp;rsquo;s streaming API&lt;/a&gt; for establishing pipelines of input and output data. Whilst streaming can potentially reduce disk I/O cost for better performance, it also requires Gulp plugins to implement compatible streaming interfaces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gulp 4.0+ release contains some breaking changes to earlier versions. We will dig into this matter in the later part. For now, we can assume the syntax and commands of the most popular Gulp 3.x.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;getting-started-with-gulp-3&#34;&gt;Getting Started with Gulp 3&lt;/h2&gt;
&lt;p&gt;Let us take a simple &lt;code&gt;Gulpfile.js&lt;/code&gt; that compiles an SCSS file to CSS as following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp-sass&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sassSourceFile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;styles/scss/main.scss&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;watchedResources&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;styles/scss/**/*&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outputFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;themes/hyde-hyde/static/css&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scss&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sassSourceFile&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sass&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sass&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;errorLog&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;outputFolder&lt;/span&gt;));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h5 id=&#34;essential-gulp-3s-built-in-constructs&#34;&gt;Essential Gulp 3&amp;rsquo;s built-in constructs&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname-fn&#34;&gt;&lt;code&gt;gulp.task(name, fn)&lt;/code&gt;&lt;/a&gt;: used for defining tasks&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpsrcglobs-options&#34;&gt;&lt;code&gt;gulp.src(globs [, options])&lt;/code&gt;&lt;/a&gt;:  used to specify input resources&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglobs-opts-fn&#34;&gt;&lt;code&gt;gulp.watch(globs [, options] [, fn])&lt;/code&gt;&lt;/a&gt;: used to monitoring changes in application resources&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpdestpath-options&#34;&gt;&lt;code&gt;gulp.dest(path [, options])&lt;/code&gt;&lt;/a&gt;:  used to specify the output destination of the processed resources&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pipe(function)&lt;/code&gt;: used to chain plugins or applications together&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpparalleltasks&#34;&gt;&lt;code&gt;gulp.parallel(...tasks)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpseriestasks&#34;&gt;&lt;code&gt;gulp.series(...tasks)&lt;/code&gt;&lt;/a&gt;: (since 4.0)&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Hibernate: Migrating 3.x to 5.x</title>
        <link>https://blog.test:8443/2018/12/migrating-hibernate/</link>
        <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>4d0d1abde6b896141edc7d1dd22cf279</guid>
        <description>&lt;p&gt;Recently I had to upgrade a codebase using Hibernate 3.x ORM on Spring 3 to Hibernate 5 (and Spring 5, respectively). Here I note down some aspects and issues that I have to deal with during this migration.&lt;/p&gt;
&lt;p&gt;An overview of a simple data access architecture is as following. The current codebase leverages lots of Hibernate native API that are rich and optimized. I am looking forward to be less dependent on Hibernate-specific stuffs and using standards such as &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html&#34;&gt;Java Persistence API&lt;/a&gt; (JPA) and &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/jta/index.html&#34;&gt;Java Transaction API&lt;/a&gt; (JTA) as much as possible in my projects. As such, it is possible to switch the projects to another JPA provider, for instance &lt;a href=&#34;http://www.eclipse.org/eclipselink/&#34;&gt;EclipseLink&lt;/a&gt;, if needed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;data_access_layers.svg&#34; alt=&#34;Data access layer&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-legacy-hibernatedaosupporthibernatetemplate&#34;&gt;The Legacy HibernateDaoSupport/HibernateTemplate&lt;/h3&gt;
&lt;p&gt;Spring ORM 3 provides several facades to ease data access with Hibernate. Using &lt;a href=&#34;https://docs.spring.io/spring/docs/3.2.8.RELEASE/javadoc-api/org/springframework/orm/hibernate3/support/HibernateDaoSupport.html&#34;&gt;HibernateDaoSupport&lt;/a&gt; and &lt;a href=&#34;https://docs.spring.io/spring/docs/3.2.18.RELEASE/javadoc-api/org/springframework/orm/hibernate3/HibernateTemplate.html&#34;&gt;HibernateTemplate&lt;/a&gt; we can be highly productive due to their rich API and can also leverage Spring transaction management. &lt;em&gt;HibernateDaoSupport&lt;/em&gt; is indeed a wrapper of &lt;em&gt;HibernateTemplate&lt;/em&gt; that simplifies data access code than raw &lt;a href=&#34;https://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/Session.html&#34;&gt;Session API&lt;/a&gt;. In turn, &lt;em&gt;HibernateTemplate&lt;/em&gt; actualls ties to a Hibernate&amp;rsquo;s &lt;a href=&#34;https://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/SessionFactory.html&#34;&gt;SessionFactory&lt;/a&gt; behind the scene. So the basic CRUD code for accessing database is rather simple and straightforward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomerDaoImpl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; org&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;springframework&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;orm&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hibernate3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;support&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;HibernateDaoSupport&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Customer &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Customer customer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      	Customer customer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Customer&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
      	customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(...);&lt;/span&gt;
      	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
      	saveOrUpdate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customer&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;  
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Customer &lt;span style=&#34;color:#a6e22e&#34;&gt;retrieve&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String customerId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; getHibernateTemplate&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; customerId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;saveOrUpdate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Customer customer&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
      	getHibernateTemplate&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;saveOrUpdate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customer&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;    
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Customer customer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        getHibernateTemplate&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customer&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nevertheless, since Hibernate 3.0.1, we can leverage plain Hibernate &lt;a href=&#34;https://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/Session.html&#34;&gt;Session&lt;/a&gt; to develop data access objects instead of binding to any Spring-specific helpers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomerDaoImpl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; CustomerDao &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SessionFactory sessionFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setSessionFactory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SessionFactory sessionFactory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sessionFactory&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sessionFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;migrating-annotationsessionfactorybean&#34;&gt;Migrating AnnotationSessionFactoryBean&lt;/h3&gt;
&lt;p&gt;In Spring ORM 3, I have often used &lt;em&gt;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&lt;/em&gt; that subclasses &lt;em&gt;LocalSessionFactoryBean&lt;/em&gt; and supports annotation metadata for mappings. Using &lt;em&gt;AnnotationSessionFactoryBean&lt;/em&gt;, I can specify the packages wherein I put Hibernate annotated classes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sessionFactory&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scope=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;singleton&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.orm.hibernate5.LocalSessionFactoryBean&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;p:packagesToScan=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westbank.db.entity&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;p:hibernateProperties-ref=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernateProperties&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernateProperties&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.beans.factory.config.PropertiesFactoryBean&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;props&amp;gt;&lt;/span&gt;
				&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;prop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernate.connection.driver_class&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${hibernate.connection.driver_class}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
        ...
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/props&amp;gt;&lt;/span&gt;
	  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since Spring 4.3, &lt;em&gt;AnnotationSessionFactoryBean&lt;/em&gt; was deprecated in favor of Hibernate 4 and 5. Thus, &lt;em&gt;LocalSessionFactoryBean&lt;/em&gt; must be used instead. The configuration is still similar.&lt;/p&gt;
&lt;h3 id=&#34;spring-transaction-management&#34;&gt;Spring Transaction Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Spring sessionFactory requires transaction to work&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;transactionManager&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.orm.hibernate5.HibernateTransactionManager&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sessionFactory&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sessionFactory&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;creating-database-schema&#34;&gt;Creating Database Schema&lt;/h3&gt;
&lt;p&gt;In Hibernate 3, I have often used &lt;a href=&#34;https://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/tool/hbm2ddl/SchemaExport.html&#34;&gt;&lt;em&gt;SchemaExport&lt;/em&gt;&lt;/a&gt; to initialise and create the underlying database using the configuration loaded by Spring as following code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.hibernate.tool.hbm2ddl.SchemaExport&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
ApplicationContext ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getWebApplicationContext&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// inside a Servlet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;LocalSessionFactoryBean localSessionBean &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;LocalSessionFactoryBean&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ctx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;sessionFactory&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
SchemaExport schemaExport &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SchemaExport&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;localSessionBean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConfiguration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
schemaExport&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://forum.hibernate.org/viewtopic.php?f=1&amp;amp;t=1045049&#34;&gt;https://forum.hibernate.org/viewtopic.php?f=1&amp;amp;t=1045049&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.baeldung.com/simplifying-the-data-access-layer-with-spring-and-java-generics&#34;&gt;http://www.baeldung.com/simplifying-the-data-access-layer-with-spring-and-java-generics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.journaldev.com/3633/hibernate-interview-questions-and-answers#hibernatetemplate-class&#34;&gt;https://www.journaldev.com/3633/hibernate-interview-questions-and-answers#hibernatetemplate-class&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/18002768/why-hibernatetemplate-isnt-recommended&#34;&gt;https://stackoverflow.com/questions/18002768/why-hibernatetemplate-isnt-recommended&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-pooling&#34;&gt;Data Pooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.hibernate.c3p0.internal.C3P0ConnectionProvider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/26710117/339302&#34;&gt;https://stackoverflow.com/a/26710117/339302&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hibernates-sessionfactory&#34;&gt;Hibernate&amp;rsquo;s SessionFactory&lt;/h3&gt;
&lt;p&gt;The legacy Spring ORM for Hibernate 3 offers &lt;em&gt;AnnotationSessionFactoryBean&lt;/em&gt; to initialise a sessionFactory used by other data access components.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sessionFactory&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;scope=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;singleton&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;p:packagesToScan=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westbank.db.entity&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;p:hibernateProperties-ref=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernateProperties&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When upgrading to Spring 5 / Hibernate 5, the configuration must be changed accordingly, with &lt;em&gt;LocalSessionFactoryBean&lt;/em&gt; instead. And note that, there is no longer setting &lt;code&gt;scope=&amp;quot;singleton&amp;quot;&lt;/code&gt;, otherwise the application context will fail to initialise the &amp;lsquo;&lt;em&gt;sessionFactory&lt;/em&gt;&amp;rsquo; bean.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sessionFactory&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.orm.hibernate5.LocalSessionFactoryBean&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p:packagesToScan=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westbank.db.entity&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;p:hibernateProperties-ref=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernateProperties&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/18011759/hibernate-sessionfactory-vs-spring-localsessionfactorybean&#34;&gt;https://stackoverflow.com/questions/18011759/hibernate-sessionfactory-vs-spring-localsessionfactorybean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;annotation-handling&#34;&gt;Annotation Handling&lt;/h3&gt;
&lt;p&gt;Since Spring 4, &lt;em&gt;DefaultAnnotationHandlerMapping&lt;/em&gt; has been deprecated and recommended to be replaced with &lt;em&gt;RequestMappingHandlerMapping&lt;/em&gt; and &lt;em&gt;RequestMappingHandlerAdapter&lt;/em&gt;. In case of legacy configuration, instead of&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;we should use&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nevertheless, if we already use &lt;code&gt;&amp;lt;mvc:annotation-driven /&amp;gt; &lt;/code&gt;, &lt;code&gt;&amp;lt;context:component-scan base-package=&amp;quot;...&amp;quot;/&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;context:annotation-config /&amp;gt;&lt;/code&gt;, Spring will automatically scan and map the request handlers.&lt;/p&gt;
&lt;h3 id=&#34;hibernates-legacy-criteria-api&#34;&gt;Hibernate&amp;rsquo;s Legacy Criteria API&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;HHH90000022: Hibernate&#39;s legacy org.hibernate.Criteria API is deprecated; use the JPA javax.persistence.criteria.CriteriaQuery instead (SessionImpl.java:1874)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;migrating-to-jpa&#34;&gt;Migrating to JPA&lt;/h2&gt;
&lt;p&gt;On migrating to Java Persistence API (JPA), I have to review its versions and corresponding support from Hibernate to ensure I use the right version.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JPA Spec&lt;/th&gt;
&lt;th&gt;RI (EclipseLink)&lt;/th&gt;
&lt;th&gt;Hibernate/ORM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;JPA 1.0 (&lt;a href=&#34;https://jcp.org/en/jsr/detail?id=220&#34;&gt;JSR 220&lt;/a&gt;) in 2006&lt;/td&gt;
&lt;td&gt;1.0+&lt;/td&gt;
&lt;td&gt;ORM 3.2+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JPA 2.0 (&lt;a href=&#34;http://www.jcp.org/en/jsr/detail?id=317&#34;&gt;JSR 317&lt;/a&gt;, Java EE 6) approved 2009&lt;/td&gt;
&lt;td&gt;2.0+&lt;/td&gt;
&lt;td&gt;ORM 3.5+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JPA 2.1 (&lt;a href=&#34;https://www.jcp.org/en/jsr/detail?id=338&#34;&gt;JSR 338&lt;/a&gt;, Java EE 7) approved 2013&lt;/td&gt;
&lt;td&gt;2.5+&lt;/td&gt;
&lt;td&gt;ORM 4.3+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JPA 2.2 (&lt;a href=&#34;https://www.jcp.org/en/jsr/detail?id=338&#34;&gt;JSR 338&lt;/a&gt;) started/approved 2017&lt;/td&gt;
&lt;td&gt;2.6.5+&lt;/td&gt;
&lt;td&gt;ORM 5.3+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is a simple class model of Hibernate JPA.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;jpa_hibernate.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;some-typical-problems&#34;&gt;Some typical problems&lt;/h2&gt;
&lt;h4 id=&#34;lazy-fetching-of-associated-tablesobjects&#34;&gt;Lazy fetching of associated tables/objects&lt;/h4&gt;
&lt;h5 id=&#34;description&#34;&gt;Description&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;LazyInitializationException: failed to lazily initialize a collection of roles, could not initialize proxy - no Session&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;solutions&#34;&gt;Solutions&lt;/h5&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.jboss.org/wiki/Hibernate3MigrationGuides&#34;&gt;https://developer.jboss.org/wiki/Hibernate3MigrationGuides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.jboss.org/wiki/HibernateCoreMigrationGuide40&#34;&gt;https://developer.jboss.org/wiki/HibernateCoreMigrationGuide40&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hibernate/hibernate-orm/blob/5.0/migration-guide.adoc&#34;&gt;https://github.com/hibernate/hibernate-orm/blob/5.0/migration-guide.adoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://connectopensource.atlassian.net/wiki/spaces/CONNECTWIKI/pages/70909961/Hibernate+Upgrade+from+3.2.5.GA+to+5.1.0.Final&#34;&gt;Hibernate Upgrade from 3.2.5.GA to 5.1.0.Final&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.joshlandin.com/2014/05/spring-integrated-hibernate-3-to.html&#34;&gt;http://www.joshlandin.com/2014/05/spring-integrated-hibernate-3-to.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://otter606.wordpress.com/2017/02/12/migrating-a-spring-mvc-webapp-from-hibernate-3-to-hibernate-5&#34;&gt;https://otter606.wordpress.com/2017/02/12/migrating-a-spring-mvc-webapp-from-hibernate-3-to-hibernate-5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Learning to &#39;React&#39;</title>
        <link>https://blog.test:8443/2018/12/learning-to-react/</link>
        <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>d41d8cd98f00b204e9800998ecf8427e</guid>
        <description></description>
      </item>
    
      <item>
        <title>Spring Web/MVC</title>
        <link>https://blog.test:8443/2018/12/spring-web/mvc/</link>
        <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>372bad262072a3f42488b970d04fc996</guid>
        <description>&lt;h2 id=&#34;spring-web&#34;&gt;Spring Web&lt;/h2&gt;
&lt;h3 id=&#34;servlet-lifecycle&#34;&gt;Servlet Lifecycle&lt;/h3&gt;
&lt;p&gt;A Servlet lifecycle is managed by the container in which it has been deployed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javaee/6/tutorial/doc/bnafi.html&#34;&gt;https://docs.oracle.com/javaee/6/tutorial/doc/bnafi.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.jboss.org/jbossas/javadoc/7.1.2.Final/javax/servlet/Servlet.html&#34;&gt;http://docs.jboss.org/jbossas/javadoc/7.1.2.Final/javax/servlet/Servlet.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;mvc-context-hierarchy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;contextloaderlistenerhttpsdocsspringiospring-frameworkdocscurrentjavadoc-apiorgspringframeworkwebcontextcontextloaderlistenerhtml&#34;&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/ContextLoaderListener.html&#34;&gt;ContextLoaderListener&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is the bootstrap listener to manipulate the Spring&amp;rsquo;s &lt;strong&gt;root&lt;/strong&gt; &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/WebApplicationContext.html&#34;&gt;WebApplicationContext&lt;/a&gt; (being shared by all servlets within the web application). Behind the scene, it ties the lifecycle of the &lt;code&gt;ApplicationContext&lt;/code&gt; to the lifecycle of the &lt;code&gt;ServletContext&lt;/code&gt;. For normal usage scenarios, &lt;code&gt;ContextLoaderListener&lt;/code&gt; might be not necessary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;web-app&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.0&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://java.sun.com/xml/ns/javaee&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
	
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;...,...&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Since Servlet 2.4,  Servlet context listeners must execute immediately after the Servlet context for the web application is created and availalble to serve the first request. That&amp;rsquo;s why &lt;code&gt;ContextLoaderListener&lt;/code&gt; is ideal and often used to initialise Spring&amp;rsquo;s &lt;code&gt;WebApplicationContext&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When starting, &lt;code&gt;ContextLoaderListener&lt;/code&gt; will inspect the &lt;code&gt;contextConfigLocation&lt;/code&gt; parameter within &lt;strong&gt;&lt;code&gt;&amp;lt;context-param&amp;gt;...&amp;lt;/context-param&amp;gt;&lt;/code&gt;&lt;/strong&gt; to retrieve the XML configuration file. If the parameter does not exist, the listener will go for the default config file &lt;code&gt;/WEB-INF/applicationContext.xml&lt;/code&gt;. Thus, when you don&amp;rsquo;t define &lt;code&gt;contextConfigLocation&lt;/code&gt; nor don&amp;rsquo;t have &lt;code&gt;applicationContext.xml&lt;/code&gt;, Spring will raise an exception:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from ServletContext resource [/WEB-INF/applicationContext.xml]; nested exception is java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/applicationContext.xml]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;dispatcherservlethttpsdocsspringiospringdocscurrentjavadoc-apiorgspringframeworkwebservletdispatcherservlethtml&#34;&gt;&lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html&#34;&gt;DispatcherServlet&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is the main dispatcher for HTTP request handlers that dispatch a request to the corresponding registered handlers. A web application can define several DispatcherServlets each operates on its own namespace with separate context, mappings, handlers.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;DispatcherServlet&lt;/code&gt; extends &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/FrameworkServlet.html&#34;&gt;FrameworkServlet&lt;/a&gt; that inspects its &lt;code&gt;contextClass&lt;/code&gt; parameter at the servlet init-param level, falling back to the default context class, &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/support/XmlWebApplicationContext.html&#34;&gt;&lt;code&gt;XmlWebApplicationContext&lt;/code&gt;&lt;/a&gt;, if the parameter does not exist. &lt;code&gt;DispatcherServlet&lt;/code&gt; also supports a &lt;code&gt;contextConfigLocation&lt;/code&gt; parameter (inside servlet &lt;strong&gt;&lt;code&gt;&amp;lt;init-param&amp;gt;...&amp;lt;/init-param&amp;gt;&lt;/code&gt;&lt;/strong&gt;) for setting paths to the configuration files. If not specified, the default configuration location is based on the namespace of the servlet, i.e. &lt;code&gt;/WEB-INF/&amp;lt;servetname&amp;gt;-servlet.xml&lt;/code&gt; (with &lt;code&gt;XmlWebApplicationContext&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;mvc&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;/WEB-INF/my-config-servlet.xml&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyWebAppInitializer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractAnnotationConfigDispatcherServletInitializer &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; getRootConfigClasses&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; RootConfig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; getServletConfigClasses&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; App1Config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getServletMappings&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/app1/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;web-application-initialisation&#34;&gt;Web Application Initialisation&lt;/h2&gt;
&lt;h5 id=&#34;method-1-servlet-context-listener-webxml&#34;&gt;Method 1: Servlet Context Listener (web.xml)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;A web application WAR is being deployed by user.&lt;/li&gt;
&lt;li&gt;Servlet container (e.g. Tomcat, Jetty) reads &lt;code&gt;web.xml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Servlet context listener &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/ContextLoaderListener.html&#34;&gt;ContextLoaderListener&lt;/a&gt; is being instantiated (if defined as &lt;code&gt;&amp;lt;listener&amp;gt;&lt;/code&gt; inside &lt;code&gt;web.xml&lt;/code&gt;) by &lt;strong&gt;servlet container&lt;/strong&gt;.
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;ContextLoaderListener&lt;/em&gt; creates new &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/WebApplicationContext.html&#34;&gt;WebApplicationContext&lt;/a&gt; / &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/context/support/XmlWebApplicationContext.html&#34;&gt;XmlWebApplicationContext&lt;/a&gt; using XML configuration (by default via the listener&amp;rsquo;s parameter &lt;code&gt;contextConfigLocation&lt;/code&gt; , if exists, otherwise  &lt;code&gt;/WEB-INF/applicationContext.xml&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The ROOT context beans are registered and instantiated by &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html&#34;&gt;BeanFactory&lt;/a&gt; inside the application context.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html&#34;&gt;DispatcherServlet&lt;/a&gt; is being instantiated by servlet container.
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;DispatcherServlet&lt;/em&gt; creates its own &lt;em&gt;WebApplicationContext&lt;/em&gt; (&lt;code&gt;WEB-INF/{servletName}-servlet.xml&lt;/code&gt; by default) with the ROOT context as its parent.&lt;/li&gt;
&lt;li&gt;The servlet beans are registered and instantiated by &lt;em&gt;BeanFactory&lt;/em&gt; inside the application context.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DispatcherServlet&lt;/em&gt; registers some default beans in case no beans are defined.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;method-2-servlet-container-initializer-non-webxml-since-servlet-30&#34;&gt;Method 2: Servlet Container Initializer (non web.xml) (since Servlet 3.0+)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;A Web application WAR is being deployed by user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Servlet container&lt;/strong&gt; searches for classes implementing &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/servlet/ServletContainerInitializer.html&#34;&gt;ServletContainerInitializer&lt;/a&gt; via Java&amp;rsquo;s &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html&#34;&gt;ServiceLoader&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/SpringServletContainerInitializer.html&#34;&gt;SpringServletContainerInitializer&lt;/a&gt; is instantiated by the servlet container.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring&amp;rsquo;s initializer reads Web application&amp;rsquo;s class-path and searches for &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/WebApplicationInitializer.html&#34;&gt;WebApplicationInitializer&lt;/a&gt; implementations.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbstractAnnotationConfigDispatcherServletInitializer&lt;/code&gt; provides an abstract implementation of &lt;code&gt;WebApplicationInitializer&lt;/code&gt; with simpler methods for setting servlet mapping and configuration location.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An implementation of &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/WebApplicationInitializer.html&#34;&gt;WebApplicationInitializer&lt;/a&gt; is found and instantiated by &lt;em&gt;SpringServletContainerInitializer&lt;/em&gt;.
&lt;ol&gt;
&lt;li&gt;The WebApplicationInitializer creates new ROOT &lt;code&gt;WebApplicationContext&lt;/code&gt; with XML or &lt;code&gt;@Configuration&lt;/code&gt; based configuration.&lt;/li&gt;
&lt;li&gt;The WebApplicationInitializer creates new servlet &lt;code&gt;WebApplicationContext&lt;/code&gt; with XML or &lt;code&gt;@Configuration&lt;/code&gt; based configuration.&lt;/li&gt;
&lt;li&gt;The WebApplicationInitializer creates and registers new &lt;em&gt;DispatcherServlet&lt;/em&gt; with the context from previous step.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Servlet container&lt;/strong&gt; finishes the web application initialization and instantiates components which were registered by their class in previous steps.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/11708967/what-is-the-difference-between-applicationcontext-and-webapplicationcontext-in-s&#34;&gt;https://stackoverflow.com/questions/11708967/what-is-the-difference-between-applicationcontext-and-webapplicationcontext-in-s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/15818047/spring-namespace-vs-contextconfiglocation-init-parameters-in-web-xml&#34;&gt;https://stackoverflow.com/questions/15818047/spring-namespace-vs-contextconfiglocation-init-parameters-in-web-xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://javaevangelist.blogspot.com/2013/11/java-ee-7-tip-of-day-web-application.html&#34;&gt;http://javaevangelist.blogspot.com/2013/11/java-ee-7-tip-of-day-web-application.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pyrolistical.github.io/blog/2011/10/23/spring-without-xml&#34;&gt;http://pyrolistical.github.io/blog/2011/10/23/spring-without-xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://auth0.com/blog/spring-5-embedded-tomcat-8-gradle-tutorial&#34;&gt;https://auth0.com/blog/spring-5-embedded-tomcat-8-gradle-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vojtechruzicka.com/spring-get-rid-of-web-xml&#34;&gt;https://www.vojtechruzicka.com/spring-get-rid-of-web-xml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Alfred 3 workflow development</title>
        <link>https://blog.test:8443/2018/12/alfred-3-workflow-development/</link>
        <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>8cb1b004a1aeb8eeb1cd3dd84ae5d41e</guid>
        <description>&lt;p&gt;&lt;a href=&#34;https://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; is extremely popular to a lot of Mac users as a simple but powerful tool for automating tasks and many others. Since version 3, Alfred has been revamped with even cooler interfaces and features and good integrations with numerous third-party applications. The most amazing element of Alfred is &lt;em&gt;workflow&lt;/em&gt; , which is included in the paid version called &lt;a href=&#34;https://www.alfredapp.com/powerpack&#34;&gt;&lt;em&gt;Powerpack&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Simply speaking, a workflow allows one to extend Alfred with new functionality. You can find several interesting workflows in &lt;a href=&#34;http://www.packal.org&#34;&gt;Packal&lt;/a&gt;. In this post, you might find some useful information for developing a workflow for Alfred.&lt;/p&gt;
&lt;h2 id=&#34;script-filter&#34;&gt;Script Filter&lt;/h2&gt;
&lt;h3 id=&#34;input&#34;&gt;Input&lt;/h3&gt;
&lt;p&gt;Alfred supports both &lt;a href=&#34;https://www.alfredapp.com/help/workflows/inputs/script-filter/json/&#34;&gt;JSON&lt;/a&gt; and &lt;a href=&#34;https://www.alfredapp.com/help/workflows/inputs/script-filter/xml&#34;&gt;XML&lt;/a&gt; (deprecated) for input and outputs. An example of equivalent representations in two format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;items&amp;#34;&lt;/span&gt;: [
    {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;desktop&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Desktop&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;subtitle&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Desktop&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;arg&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Desktop&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;autocomplete&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Desktop&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;icon&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fileicon&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Desktop&amp;#34;&lt;/span&gt;
        }
    }
]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;items&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;item&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uid=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;desktop&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arg=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Desktop&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;valid=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YES&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;autocomplete=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Desktop&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Desktop&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;subtitle&amp;gt;&lt;/span&gt;~/Desktop&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/subtitle&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;icon&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fileicon&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;~/Desktop&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/icon&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/items&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;A Script Filter is required to return an &lt;code&gt;&amp;lt;items&amp;gt;&lt;/code&gt; list of one or more &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt;. Each &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt;describes a result row displayed in Alfred. The three obvious elements are the ones you see in an Alfred result row - &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;subtitle&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;icon&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ouput&#34;&gt;Ouput&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://alfredworkflow.readthedocs.io/en/latest&#34;&gt;http://alfredworkflow.readthedocs.io/en/latest&lt;/a&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Tour de Spring Boot: DI meets CoC</title>
        <link>https://blog.test:8443/2018/12/spring-boot-di-meets-coc/</link>
        <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>3e6865c9bc87aebc6c4a716ef32031d6</guid>
        <description>&lt;p&gt;I started using Spring framework few years back in 2009 to develop demo systems for some EU projects. These projects featured a number of Web services some of which share back-end databases and some other talk to external services or WS-BPEL business processes.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;dependency injection&lt;/a&gt; implemented in Spring works so well and on top of that, many other parts like Spring MVC,  data access, transactions messaging and even some third-party libraries such as Apache &lt;a href=&#34;http://activemq.apache.org/&#34;&gt;ActiveMQ&lt;/a&gt;, Apache &lt;a href=&#34;http://cxf.apache.org/&#34;&gt;CXF&lt;/a&gt; and JBoss (now Red Hat and likely IBM) &lt;a href=&#34;http://hibernate.org/orm/&#34;&gt;Hibernate ORM&lt;/a&gt;, and many other helper libraries all came to play nicely.&lt;/p&gt;
&lt;p&gt;One of my concerns is that configuring a complex Spring based project is truly tedious and error-prone. I have made countless trial-and errors and gone through lots of warning and errors, not to mention XML verbosity and complexity, Maven dependency hell, the conflicts or incompatibilities among numerous dependencies. Fast forward to 2018 I want to refresh my experience through existing Spring projects. I was thinking about similar rough paths when upgrading Spring and Hibernate to some prior versions until discovering &lt;a href=&#34;http://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To be precise, Spring Boot is not a magic wand that would help us to navigate through the forest of Spring framework complexity or automatically resolve certain problems. It is more or less some sort of &lt;a href=&#34;https://en.wikipedia.org/wiki/Convention_over_configuration&#34;&gt;&lt;em&gt;convention over configuration&lt;/em&gt;&lt;/a&gt; that might reduce significant effort on making Spring applications quickly up and running as well as ensure better compatibilities among integrated libraries.&lt;/p&gt;
&lt;h2 id=&#34;quickstart&#34;&gt;A Quick Start&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s consider the following Java code defining a REST controller for an endpoint &amp;ldquo;&lt;code&gt;/&lt;/code&gt;&amp;rdquo; that shall display a greeting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just with this very minimal code, we can have a working Spring application. Assume that the &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html&#34;&gt;Spring Boot CLI&lt;/a&gt; is available, start our application with the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;spring run HelloWorld.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spring Boot will launch an embedded Tomcat server and initialise a Web application to serve the endpoint at &amp;ldquo;&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&amp;rdquo;. Visiting this address will give us &amp;ldquo;&lt;em&gt;Hello World!&lt;/em&gt;&amp;quot;. What could be cooler than that !?&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s start a quick tour on some more appealing features that Spring Boot 2.1.0 offers.&lt;/p&gt;
&lt;h2 id=&#34;bootstrapping&#34;&gt;Project Bootstrapping&lt;/h2&gt;
&lt;p&gt;Using &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initializr&lt;/a&gt; directly or via IDE /CLI, we can quickly bootstrap a dead simple or full-blown Spring development project. For instance, this command will create a Spring application development project, namely, &lt;code&gt;hello-world&lt;/code&gt;, with JPA and H2 database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;spring init --dependencies&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;web,data-jpa,h2 hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After asking some questions such as the project&amp;rsquo;s and package&amp;rsquo;s names, the command line will download the core package and create a new development project that is ready to be imported to any IDE. Other than that, Eclipse or IntelliJ IDEA can just walk you through simple wizards in which you can craft your own project and choose the necessary components for the new project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;spring-boot-in-ide.png&#34; alt=&#34;Spring Boot project in Eclipse&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;dependency-management&#34;&gt;Build and Dependency Management&lt;/h2&gt;
&lt;p&gt;Spring Boot 2 works with Spring Framework 5 and requires at least Java 8. You can either choose Maven or Gradle build system when creating the project. An excerpt of Maven &lt;code&gt;pom.xml&lt;/code&gt; (stripped off few minor details) of our project is shown below.&lt;/p&gt;
&lt;div&gt;
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.github.htr3n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hello-world&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hello-world&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Demo project for Spring Boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.0.RELEASE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
    
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;java.version&amp;gt;&lt;/span&gt;1.8&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/java.version&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.h2database&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;h2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;div class=&#34;code--caption&#34;&gt;A simplified &lt;code&gt;pom.xml&lt;/code&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This POM inherits many &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-maven&#34;&gt;useful default settings and values&lt;/a&gt; from &lt;code&gt;spring-boot-starter-parent&lt;/code&gt;.  We might opt to not use &lt;code&gt;spring-boot-starter-parent&lt;/code&gt; and go old-school to set everything up on our own. I have just recalled working with Spring 3 and trying to integrate an embedded Jetty server. I really struggled with different Jetty versions as well as other libraries to make them click. When I tried to upgrade the legacy projects to newer Spring and Hibernate versions, things all turned out really messy with loads of mysterious errors.&lt;/p&gt;
&lt;p&gt;Spring Boot eases this kind of burden with some opinionated design and configuration decisions. We can truly leverage its strength and choose among a set of &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-starter&#34;&gt;starters&lt;/a&gt; (beginning with &lt;code&gt;spring-boot-starter-&lt;/code&gt;). The starters are intended for better compatiblity and smooth integration.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;hello-world&lt;/code&gt; project, we have chosen three components &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; (JPA), &lt;code&gt;spring-boot-starter-web&lt;/code&gt; (Web), &lt;code&gt;spring-boot-starter-test&lt;/code&gt; (for testing) along with &lt;code&gt;mysql-connector-java&lt;/code&gt; (MySQL).&lt;/p&gt;
&lt;h2 id=&#34;autoconfiguration&#34;&gt;Autoconfiguration&lt;/h2&gt;
&lt;p&gt;Intelligent autoconfiguration is perhaps one of the most prominent and important parts of Spring Boot. There are different levels of configuring a Spring based application. The simplest form of autoconfiguration is the &amp;ldquo;&lt;em&gt;Hello World&lt;/em&gt;&amp;rdquo; example mentioned above. The new Maven based project created via the wizard or command line consists of &lt;code&gt;pom.xml&lt;/code&gt; along with &lt;code&gt;application.properties&lt;/code&gt;, &lt;code&gt;HelloWorldApplication.java&lt;/code&gt; and &lt;code&gt;HelloWorldApplicationTest.java&lt;/code&gt; as shown in Figure 1.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; io.github.htr3n&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.autoconfigure.SpringBootApplication&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorldApplication&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HelloWorldApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;HelloWorldApplication&lt;/code&gt; class is annotated with &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/SpringBootApplication.html&#34;&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;&lt;/a&gt; which is actually an umbrella for three annotations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/EnableAutoConfiguration.html&#34;&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;&lt;/a&gt; that triggers auto-configuration of Spring application context.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.2.RELEASE/javadoc-api/org/springframework/context/annotation/ComponentScan.html?is-external=true&#34;&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;&lt;/a&gt; that enables the scanning of classes annotated with &lt;code&gt;@Component&lt;/code&gt; or its sub-types on the package where the application is located (that&amp;rsquo;s why &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-structuring-your-code.html#using-boot-locating-the-main-class&#34;&gt;it is often recommended&lt;/a&gt; to place the class annotated with &lt;code&gt;@SpringBootApplication&lt;/code&gt; at the root package above other classes)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/SpringBootConfiguration.html&#34;&gt;&lt;code&gt;@SpringBootConfiguration&lt;/code&gt;&lt;/a&gt; is an alias to &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.2.RELEASE/javadoc-api/org/springframework/context/annotation/Configuration.html?is-external=true&#34;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt; allows for registering some more beans in the context or import additional configuration classes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The aforementioned annotations are sufficient to launch not-so-complex Spring applications. In case one wants to fine-tune the application context autoloading, individual annocations mentioned above and/or customised annotations can be leveraged.&lt;/p&gt;
&lt;p&gt;Examining the Spring Boot &lt;a href=&#34;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure&#34;&gt;auto-configure project&lt;/a&gt; on Github, we can see many &lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.1.0.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories&#34;&gt;scripts&lt;/a&gt; for essential libraries. Depending on what are detected on the classpath and the application-specific configuration directives, Spring Boot will automatically include and configure the corresponding components.&lt;/p&gt;
&lt;p&gt;We can explicitly disable certain parts using &lt;code&gt;@EnableAutoConfiguration(exclude={class1, class2, ...})&lt;/code&gt; or the directive &amp;ldquo;&lt;code&gt;spring.autoconfigure.exclude=class1, class2, ...&lt;/code&gt;&amp;rdquo; in &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;app-launcher-configuration&#34;&gt;App Launcher Configuration&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/SpringApplication.html&#34;&gt;&lt;code&gt;SpringApplication&lt;/code&gt;&lt;/a&gt; class is the main launcher of a Spring application. Prior to Spring Boot, in order to start a Spring app we have to manually initialise an &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.1.2.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html?is-external=true&#34;&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/a&gt;, parse system- and application-specific properties and input arguments (if needed), load all necessary beans and/or launch an embedded Web server like &lt;a href=&#34;https://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt; or &lt;a href=&#34;https://www.eclipse.org/jetty/&#34;&gt;Jetty&lt;/a&gt;. Now, all of these tasks will be automatically done using &lt;code&gt;SpringApplication&lt;/code&gt; with &lt;code&gt;@SpringBootApplication&lt;/code&gt; (or a combination of its sub-annotations).&lt;/p&gt;
&lt;p&gt;Apart from &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-application-property-files&#34;&gt;&lt;code&gt;application.properties&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;.yml&lt;/code&gt;), we can configure and customise a Spring app using a &lt;code&gt;SpringApplication&lt;/code&gt; or &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-fluent-builder-api&#34;&gt;&lt;code&gt;SpringApplicationBuilder&lt;/code&gt;&lt;/a&gt; instance. For instance, the following code will turn off the banner when launching our Spring app&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  SpringApplication app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SpringApplication&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HelloWorldApplication&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setBannerMode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Banner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Mode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OFF&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;args&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which is equivalent to &lt;code&gt;spring.main.banner-mode=off&lt;/code&gt; in &lt;code&gt;application.properties&lt;/code&gt;. Spring Boot comes with numerous predefined properties. Indeed, almost every autoconfigured component offers some default property settings. These predefined settings will be overriden with our own settings, if exist.&lt;/p&gt;
&lt;h3 id=&#34;properties-loading&#34;&gt;Properties Loading&lt;/h3&gt;
&lt;p&gt;By default, Spring Boot will bind external properties from &lt;code&gt;application.properties&lt;/code&gt; (or &lt;code&gt;.yml&lt;/code&gt;) at runtime. That is called &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html&#34;&gt;externalized configuration&lt;/a&gt;. More details on application properties can be found &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&#34;warning&#34;&gt;
    &lt;strong&gt;Warning&lt;/strong&gt;&lt;br&gt;
    Please beware of the trailing whitespaces in Spring &lt;code&gt;.properties&lt;/code&gt; as Spring Boot &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106#issuecomment-173278825&#34;&gt;won&amp;rsquo;t trim off any of them&lt;/a&gt; and in some cases that might lead to unexpected issues or even crash the applications (see &lt;a href=&#34;https://blog.test:8443/2018/11/spring-boot-trailing-whitespaces/&#34;&gt;my other relevant post&lt;/a&gt;)
&lt;/blockquote&gt;

&lt;p&gt;Besides the default &lt;code&gt;application.properties&lt;/code&gt;, Spring allows us to activate various profiles using the naming convention &lt;code&gt;application-{profile}.properties&lt;/code&gt;. It comes very handy in case we look forward to separating testing-specific environments, for example, using &lt;code&gt;application-test.properties&lt;/code&gt;, from production environments. We can still ask to load property sources with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html&#34;&gt;&lt;code&gt;@PropertySource&lt;/code&gt;&lt;/a&gt; as usual in Spring.&lt;/p&gt;
&lt;h3 id=&#34;components-and-beans-configuration&#34;&gt;Components and Beans Configuration&lt;/h3&gt;
&lt;p&gt;Other components and bean configurations can be loaded from different sources including XML files, Java classes (with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&#34;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt;), or Groovy (also annotated with &lt;code&gt;@Configuration&lt;/code&gt; as Java or via Groovy &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/cli-groovy-beans-dsl.html&#34;&gt;Beans DSL&lt;/a&gt; &amp;ldquo;&lt;code&gt;beans {...}&lt;/code&gt;&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Note that, all components in the sub-paths under the main class annotated with &lt;code&gt;@SpringBootApplication&lt;/code&gt; will be automatically scanned and initialised. The rest of beans configuration will be handed over to Spring&amp;rsquo;s &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-spring-beans-and-dependency-injection.html&#34;&gt;&lt;em&gt;dependency injection mechanism&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;web-configuration&#34;&gt;Web Configuration&lt;/h3&gt;
&lt;p&gt;Spring Boot often &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-web-environment&#34;&gt;tries to establish&lt;/a&gt; an appropriate &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html&#34;&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/a&gt; based on classpath scanning and app-specific configurations. For instance, to enable the traditional Spring Web MVC, I simply include the component &lt;code&gt;spring-boot-starter-web&lt;/code&gt; in the POM as &lt;a href=&#34;#dependency-management&#34;&gt;shown in the previous section&lt;/a&gt;. Spring Boot will automatically adds relevant components for resolving and serving Web pages and resources.&lt;/p&gt;
&lt;p&gt;We can add extra components such as &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html&#34;&gt;WebFlux&lt;/a&gt;&amp;mdash;the reactive framework added in Spring 5+  (&lt;code&gt;spring-boot-starter-webflux&lt;/code&gt;), &lt;a href=&#34;https://www.thymeleaf.org/&#34;&gt;Thymeleaf&lt;/a&gt; template engine (&lt;code&gt;spring-boot-starter-thymeleaf&lt;/code&gt;), Spring Web services (&lt;code&gt;spring-boot-starter-web-services&lt;/code&gt;) and &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#websocket&#34;&gt;WebSocket&lt;/a&gt;  (&lt;code&gt;spring-boot-starter-websocket&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Spring &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html&#34;&gt;Web MVC&lt;/a&gt; is totally capable to handle most of HTTP requests via &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html&#34;&gt;servlets&lt;/a&gt; or &lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Controller.html&#34;&gt;controllers&lt;/a&gt; like the simple Hello World example above. Should you need more advanced control of RESTful endpoints, just add either one of &lt;a href=&#34;http://spring.io/projects/spring-hateoas&#34;&gt;Spring HATEOAS&lt;/a&gt; (&lt;code&gt;spring-boot-starter-hateoas&lt;/code&gt;), &lt;a href=&#34;https://jersey.github.io/&#34;&gt;Jersey&lt;/a&gt; (&lt;code&gt;spring-boot-starter-jersey&lt;/code&gt;) or &lt;a href=&#34;https://cxf.apache.org/&#34;&gt;Apache CXF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By default, the Web starter will use Tomcat as the underlying embedded application server. When we opt for another server, we must explicitly exclude Tomcat and add either &lt;code&gt;spring-boot-starter-jetty&lt;/code&gt; (Jetty) or &lt;code&gt;spring-boot-starter-undertow&lt;/code&gt; (Undertow) in our POM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-jetty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Many of the embedded server&amp;rsquo;s settings can be defined in &lt;code&gt;application.properties&lt;/code&gt; such as the network address, port, sessions, and so on. These settings can also be done programmatically by defining bean implementing &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/web/server/WebServerFactoryCustomizer.html&#34;&gt;&lt;code&gt;WebServerFactoryCustomizer&lt;/code&gt;&lt;/a&gt; that enables access to customise the underlying &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/web/server/WebServerFactory.html&#34;&gt;&lt;code&gt;WebServerFactory&lt;/code&gt;&lt;/a&gt;. For instance, you can refer to more fine-tuned customisations for &lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.1.0.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizer.java&#34;&gt;Jetty&lt;/a&gt;, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/blobv2.1.0.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/TomcatWebServerFactoryCustomizer.java&#34;&gt;Tomcat&lt;/a&gt;, or &lt;a href=&#34;https://github.com/spring-projects/spring-boot/blob/v2.1.0.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizer.java&#34;&gt;Undertow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following up our example on excluding Tomcat and adding Jetty, we can create a simple bean to change the Jetty server from the default port &lt;code&gt;8080&lt;/code&gt; to &lt;code&gt;9999&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; io.github.htr3n&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.web.server.ConfigurableWebServerFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.web.server.WebServerFactoryCustomizer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Component&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JettyServerCustomizer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; WebServerFactoryCustomizer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ConfigurableWebServerFactory&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;customize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ConfigurableWebServerFactory factory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setPort&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;9999&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;data-access-configuration&#34;&gt;Data Access Configuration&lt;/h3&gt;
&lt;p&gt;Going through various versions, Spring framework always provides considerable support and different abstraction levels for &lt;a href=&#34;http://spring.io/projects/spring-data&#34;&gt;database access&lt;/a&gt;. In general, it often requires some configurations for data sources and sometimes the intermediate layers such as pooling or caching.&lt;/p&gt;
&lt;p&gt;Spring Boot has taken further steps forward by auto-configuring in some popular circumstances, for instance, embedded databases, database pooling, to name but a few. What we need to do is to add appropriate dependencies. In the &lt;code&gt;hello-world&lt;/code&gt; project, &lt;a href=&#34;https://www.h2database.com/html/main.html&#34;&gt;H2 database engine&lt;/a&gt; will be auto-configured by Spring Boot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
  ...
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.h2database&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;h2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  ...
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that, including database dependencies alone won&amp;rsquo;t trigger any auto-configuration. It&amp;rsquo;s only when Spring Boot found some sort of data access components such as &lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt;, &lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt; (which transitively embraces &lt;code&gt;spring-jdbc&lt;/code&gt;) on the classpath.&lt;/p&gt;
&lt;p&gt;Atop the data connection layer, Spring Boot takes the liberty of &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-sql.html#boot-features-connect-to-production-database&#34;&gt;choosing other data access components&lt;/a&gt;. Note that the design decisions taken by Spring Boot are often based on some popular and widely-used conventions in Spring based application developments. The decisions for data access, like other components, can be overriden with our own information. For example, I can define my own H2 data source in &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;spring.datasource.url=jdbc:h2:mem:helloword_db;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=sa
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, Spring Boot will try to initialise the database. High level data access components such as &lt;a href=&#34;https://spring.io/projects/spring-data-jpa&#34;&gt;Spring Data JPA&lt;/a&gt;, &lt;a href=&#34;http://hibernate.org/orm/&#34;&gt;Hibernate&lt;/a&gt; can be customised via &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-database-initialization&#34;&gt;specific properties&lt;/a&gt;. Nonetheless, Spring Boot can look into the classpath for a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_definition_language&#34;&gt;schema definition script&lt;/a&gt;, namely, &lt;code&gt;schema.sql&lt;/code&gt;, and a &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_manipulation_language&#34;&gt;data manipulation script&lt;/a&gt;, namely, &lt;code&gt;data.sql&lt;/code&gt; and execute them if found. Here is an example of these scripts for a simple database &lt;code&gt;customer&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- schema.sql
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; customer;
&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; customer(
  id integer &lt;span style=&#34;color:#66d9ef&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; auto_increment,
  name varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
  email varchar (&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
  &lt;span style=&#34;color:#66d9ef&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt; (id)
);
&lt;span style=&#34;color:#75715e&#34;&gt;-- data.sql
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; customer(name, email) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bob@test.com&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead, you may indicate the initialising scripts for specific databases using the naming convention &lt;code&gt;schema-${platform}.sql&lt;/code&gt; and &lt;code&gt;data-${platform}.sql&lt;/code&gt; where &lt;code&gt;platform&lt;/code&gt; is taken from &lt;code&gt;spring.datasource.platform&lt;/code&gt;. This convention helps us to separate vendor-specific data creation and manipulation scripts.&lt;/p&gt;
&lt;p&gt;Last but not least, Spring Boot classpath scanning mechanism may help us to entirely skip JPA&amp;rsquo;s  &lt;code&gt;persistence.xml&lt;/code&gt; as it will try to search for all classes annotated with &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html&#34;&gt;&lt;code&gt;@Entity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html&#34;&gt;&lt;code&gt;@Embeddable&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html&#34;&gt;&lt;code&gt;@MappedSuperclass&lt;/code&gt;&lt;/a&gt; in our application&amp;rsquo;s classpath.&lt;/p&gt;
&lt;h2 id=&#34;development-support&#34;&gt;Development Support&lt;/h2&gt;
&lt;h3 id=&#34;testing&#34;&gt;Testing&lt;/h3&gt;
&lt;p&gt;Testing is always a crucial part of any development process and Spring apps are no exception. That&amp;rsquo;s why Spring Boot provides &lt;code&gt;spring-boot-starter-test&lt;/code&gt; that comprises several handy components such as &lt;a href=&#34;https://junit.org/junit4/&#34;&gt;JUnit&lt;/a&gt;, &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html&#34;&gt;Spring Tests&lt;/a&gt;, &lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt;, to name but a few.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.Test&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.runner.RunWith&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.test.context.SpringBootTest&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.test.context.junit4.SpringRunner&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SpringRunner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootTest&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;` {  &lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;contextLoads&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Consider inside the project &lt;code&gt;hello-world&lt;/code&gt;, we have a simple class &lt;code&gt;HelloWorldApplicationTests&lt;/code&gt; annotated with &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html&#34;&gt;&lt;code&gt;@SpringBootTest&lt;/code&gt;&lt;/a&gt; that detects and initialises Spring Boot&amp;rsquo;s application context and testing environment. We can fine tune the testing environment in a similar manner as production&amp;rsquo;s (i.e. with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&#34;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/ContextConfiguration.html&#34;&gt;&lt;code&gt;@ContextConfiguration&lt;/code&gt;&lt;/a&gt; along with &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/TestConfiguration.html&#34;&gt;&lt;code&gt;@TestConfiguration&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We won&amp;rsquo;t delve into evey detail of testing support but you can find &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/test-auto-configuration.html&#34;&gt;an extensive list of test auto-configurations&lt;/a&gt; for JDBC, JPA, Neo, Redis, REST, Web MVC, and WebFlux as well as a rich documentation of Spring Boot testing features &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://blog.test:8443/2018/11/test-driven-spring-jdbc/&#34;&gt;one of my previous posts&lt;/a&gt;, we can see that the annotation &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/autoconfigure/jdbc/JdbcTest.html&#34;&gt;&lt;code&gt;@JdbcTest&lt;/code&gt;&lt;/a&gt; has simplified a lot of settings needed for loading up databases, testing CRUD app with automatic transactions. As such it truly helps me better focus on the actual testing logics.&lt;/p&gt;
&lt;h3 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;In order to dig deeper or to resolve bugs for our Spring apps, we may need more detailed information on logs and traces. Just start the Spring application under analysis with the command line option&amp;quot;&lt;code&gt;--debug&lt;/code&gt;&amp;rdquo;, system property &amp;ldquo;&lt;code&gt;-Ddebug&lt;/code&gt;&amp;rdquo;,  or set &amp;ldquo;&lt;code&gt;debug=true&lt;/code&gt;&amp;rdquo; in &lt;code&gt;application.properties&lt;/code&gt;. Here is an example of enabling debugging using command line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mvn spring-boot:run --debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &amp;ldquo;&lt;code&gt;--debug&lt;/code&gt;&amp;rdquo; option will enable the &lt;code&gt;DEBUG&lt;/code&gt; logging level for &lt;em&gt;some selected core Spring components&lt;/em&gt;. Likewise, we can also enable &lt;code&gt;TRACE&lt;/code&gt; logging level with the &amp;ldquo;&lt;code&gt;--trace&amp;quot;&lt;/code&gt; or &amp;ldquo;&lt;code&gt;trace=true&lt;/code&gt;&amp;rdquo; in &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;developer-tools&#34;&gt;Developer Tools&lt;/h3&gt;
&lt;p&gt;Spring Boot equips us&amp;mdash;Spring app developers&amp;mdash;with a set of nice tools in hope that our life might become less miserable, or so they said ;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
  ...
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-devtools&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  ...
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One of my favourie features provided by &lt;code&gt;spring-boot-devtools&lt;/code&gt; is &lt;em&gt;automatic restart&lt;/em&gt;. That is, a Spring app can automatically reload whenever any changes on the classpath are detected. As &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html#using-boot-devtools-restart&#34;&gt;stated in the documentation&lt;/a&gt;, it works really well with &lt;a href=&#34;https://livereload.com/&#34;&gt;LiveReload&lt;/a&gt; to instantly refresh the corresponding Web browsers. The &lt;em&gt;automatic restart&lt;/em&gt; feature mimics &lt;a href=&#34;https://zeroturnaround.com/software/jrebel/&#34;&gt;JRebel&lt;/a&gt; but in a slower and less advanced manner using two classloaders: a &lt;em&gt;base classloader&lt;/em&gt; for unchanged resources and a &lt;em&gt;restart classloader&lt;/em&gt; for changable ones.&lt;/p&gt;
&lt;h2 id=&#34;finale&#34;&gt;Finale&lt;/h2&gt;
&lt;p&gt;Most of the decisions taken in Spring Boot are opinionated and some might like or dislike, especially hard-core experienced developers who know deeply about Spring.&lt;/p&gt;
&lt;p&gt;Fairly speaking, the way Spring Boot hides the underneath complexity turns out rather ideal for beginners. An inexperienced developer can start the journey with minimal effort and configuration to have a running application. After that, more and more advanced configurations or features can be gradually  added or customised until we no longer rely on Spring Boot. Instead of struggling with complex settings, Spring app developers can now better concentrate on the core system business logics to be designed and implemented.&lt;/p&gt;
&lt;p&gt;Having said that, a Spring lover like me would truly appreciate the ideas and massive efforts behind the Spring Boot project to achieve an integrated set of various in-house and third-party libraries working smoothly. I think Spring development teams have made some bold and good decisions. With simple starting points and open to a plethora of advanced features, configurations and customisations, even experienced teams and developers would greatly benefit from that with more focused system designs and better speed of development.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Spring Boot properties issues with trailing whitespaces</title>
        <link>https://blog.test:8443/2018/11/spring-boot-trailing-whitespaces/</link>
        <pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate>
        
        <guid>59fc0f4c4b3f963c37fd042caf05efe6</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;__TL;DR:__&lt;!-- raw HTML omitted --&gt;Spring Boot does not trim off the &lt;a href=&#34;#root-causes&#34;&gt;trailing whitespaces in &lt;code&gt;*.properties&lt;/code&gt;&lt;/a&gt; that in turn might lead to some &lt;a href=&#34;#problem&#34;&gt;unexpected errors&lt;/a&gt;. As the Spring development team decides to &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106#issuecomment-173278825&#34;&gt;not fix this issue&lt;/a&gt;, we can &lt;a href=&#34;#solutions&#34;&gt;configure code editors&lt;/a&gt; to avoid some similar problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;fun&#34;&gt;The fun &amp;hellip;&lt;/h2&gt;
&lt;p&gt;Coming back working with Spring after few years, I was thrilled trying out Spring Boot 2 with its superb cool auto-configurations and many more. It&amp;rsquo;s a lot much more fun to work with than Spring 3 used in &lt;a href=&#34;https://github.com/htr3n/loan-approval-portal&#34;&gt;some&lt;/a&gt; of my previous projects.&lt;/p&gt;
&lt;h2 id=&#34;problem&#34;&gt;, the problem &amp;hellip;&lt;/h2&gt;
&lt;p&gt;When tinkering with Spring Boot, I found a half-funny half-annoying issue that made one of my Spring apps failed to launch. As the project is rather clumpy and full of experimenting code, here I will replicate this issue in a smaller and simpler scale.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a small Spring Boot project with JPA and H2. We can either use &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initialzr&lt;/a&gt;, &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/cli-using-the-cli.html&#34;&gt;Spring Boot CLI&lt;/a&gt;, or IDE such as IntelliJ IDEA, Eclipse or NetBeans. To keep it simple, I use Spring Boot CLI that &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-installing-the-cli&#34;&gt;can be easily installed&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ spring version
Spring CLI v2.1.0.RELEASE
$ spring init --dependencies&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data-jpa,h2 spring-boot-trailing-spaces
Using service at https://start.spring.io
Project extracted to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/dev/spring-framework/spring-boot-trailing-spaces&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The newly created Spring application can be launched with Maven.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ cd spring-boot-trailing-spaces
$ mvn spring-boot:run
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There should be no problem as we have not made any changes. Now, open &amp;ldquo;&lt;code&gt;src/main/resources/application.properties&lt;/code&gt;&amp;rdquo; with an editor, then copy and paste the following code. Promise me that you don&amp;rsquo;t change the pasted code ;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver 
spring.datasource.username=sa
spring.datasource.password=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These lines are typical data source configuration of an embedded H2 database engine that you might have seen around or used many times. Unfortunately, this time they will crash the Spring application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ mvn spring-boot:run
...
2018-11-27 21:20:54.289 ERROR &lt;span style=&#34;color:#ae81ff&#34;&gt;92868&lt;/span&gt; --- &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;           main&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; o.s.boot.SpringApplication               : Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration&amp;#39;&lt;/span&gt;: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dataSource&amp;#39;&lt;/span&gt; defined in class path resource &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;com.zaxxer.hikari.HikariDataSource&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: Factory method &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dataSource&amp;#39;&lt;/span&gt; threw exception; nested exception is java.lang.IllegalStateException: Cannot load driver class: org.h2.Driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Walking across the lengthy exception stack and error messages, the main culprit seems to be &amp;ldquo;&lt;em&gt;Cannot load driver class: org.h2.Driver&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Why is that?&lt;/p&gt;
&lt;h2 id=&#34;root-causes&#34;&gt;, the root causes? &amp;hellip;&lt;/h2&gt;
&lt;p&gt;The very first thing came to my mind is to check whether H2 jar is included properly in the classpath.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ mvn dependency:tree
...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; +- com.h2database:h2:jar:1.4.197:runtime
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yup, it&amp;rsquo;s there!&lt;/p&gt;
&lt;p&gt;You can try further on, like I did, to remove &lt;code&gt;$HOME/.m2&lt;/code&gt; and re-run Maven or even restart the machine (but the app still doesn&amp;rsquo;t work!!!).&lt;/p&gt;
&lt;p&gt;I have searched around for this specific issue and found some similar or the same exception, for instance, &lt;a href=&#34;https://stackoverflow.com/a/51193609&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/q/40137347&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/q/4008011&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://stackoverflow.com/q/43616563&#34;&gt;here&lt;/a&gt;. None of the solutions there can fix it.&lt;/p&gt;
&lt;p&gt;It took me nearly half an hour to figure out the root cause. That is the single &lt;em&gt;trailing space&lt;/em&gt; at the end of &lt;code&gt;org.h2.Driver&lt;/code&gt;. Here I intentionally added in order to replicate exactly the original problem in my experimenting project. And the fault was mine who just lazily copied and pasted these few lines of Spring Boot configurations. After I removed all trailing spaces, the error disappeared.&lt;/p&gt;
&lt;p&gt;Voilà!&lt;/p&gt;
&lt;h2 id=&#34;solutions&#34;&gt;&amp;hellip; and the solutions?!&lt;/h2&gt;
&lt;p&gt;No copy &amp;amp; paste please, you might say ;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;no-copy-paste.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I would blame the Pivotal development team (just kidding ;) as they should have handled such a trivial issue better because trailing whitespaces, by default in most editors, are not always visible nor printable. Indeed, trailing whitespaces in Spring properties has driven many developers crazy &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/7251&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/7251&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/13967&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/5421&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106&#34;&gt;here&lt;/a&gt;. Note that it&amp;rsquo;s for now &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106&#34;&gt;official&lt;/a&gt; that the Spring Boot team won&amp;rsquo;t fix this because they &lt;a href=&#34;https://github.com/spring-projects/spring-boot/issues/4106#issuecomment-173278825&#34;&gt;cannot safely trim properties&lt;/a&gt;. So, it&amp;rsquo;s our responsibilities to take care of these whitespaces.&lt;/p&gt;
&lt;blockquote &gt;
    &lt;strong&gt;Sidenote:&lt;/strong&gt;&lt;br&gt;
    Whitespaces can also become &lt;a href=&#34;https://blog.codinghorror.com/whitespace-the-silent-killer/&#34;&gt;worst enemies to source code controls&lt;/a&gt; (but not all whitespaces are born equal, for instance, two continuous trailing spaces in some flavours of &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; should be persisted as they are translated into HTML line-breaks &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;).
&lt;/blockquote&gt;

&lt;p&gt;Fortunately, most of code editors somehow can help to remedy the aforementioned issue either with built-in features or extensions. There are two possible non-exclusive methods (which can be combined of course)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;M1&lt;/strong&gt;. Showing or highlighting whitespaces&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;M2&lt;/strong&gt;. (Automatically) trimming off whitespaces&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the first method, we configure the editors to force hard-to-see non-printable characters like tabs and spaces become visible. For instance, the problematic example above is shown in Visual Studio Code with the extension &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces&#34;&gt;Trailing Spaces&lt;/a&gt; helps to highlight the trailing whitespaces in red. This way might be a bit UI-intrusive as highlighted whitespaces everywhere can distract many of us. I personally don&amp;rsquo;t really like having the whitespaces and tabs messing up with my code structure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;trailing-space.png&#34; alt=&#34;Trailing spaces in code editor&#34;&gt;&lt;/p&gt;
&lt;p&gt;The second method can be automatic or manual in which the editors (maybe with support from extensions) can remove the whitespaces during saving or via some editing commands. However, beware the issues with Markdown trailing whitespaces, we should use this option per language specific settings if possible.&lt;/p&gt;
&lt;p&gt;We will examine few popular code editors (please add more of yours in the comment) regarding these two methods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Either &lt;span class=&#34;menu&#34;&gt;Preferences ▸ Show Invisibles&lt;/span&gt;
 or &lt;code&gt;config.cson&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;editor:&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;showInvisibles:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.eclipse.org/&#34;&gt;Eclipse&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) From version 3.7+:  &lt;span class=&#34;menu&#34;&gt;Preferences ▸ General ▸ Editors ▸ Text Editors &lt;/span&gt;
: Turn on &amp;ldquo;&lt;em&gt;Show whitespace characters&lt;/em&gt;&amp;rdquo; and fine-tune the option via &amp;ldquo;&lt;em&gt;configure visibility&lt;/em&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) It&amp;rsquo;s rather tedious in Eclipse as many people have already complained. It&amp;rsquo;s perhaps due to the nature of Eclipse as a platform for several editors and plugins working together. IMHO, Eclipse should offer a common option to remove trailing whitespaces for all editors in the same level and place as &amp;ldquo;&lt;em&gt;Show whitespace characters&lt;/em&gt;&amp;rdquo; above. Each kind of editor then might offer specific and optimal ways for certain file types. Unfortunately, for now we have to configure for each file type editor or formatter. For instance, Java editor &lt;span class=&#34;menu&#34;&gt;Preferences ▸ Java ▸ Editor ▸ Save Actions&lt;/span&gt;
,  check &amp;ldquo;&lt;em&gt;Additional actions&lt;/em&gt;&amp;quot;, choose &amp;ldquo;&lt;em&gt;Configure&lt;/em&gt;&amp;quot;. Next, in the &amp;ldquo;&lt;em&gt;Code Organizing&lt;/em&gt;&amp;rdquo; tab check &amp;ldquo;&lt;em&gt;Remove trailing whitespace&lt;/em&gt;&amp;quot;. Unfortunately, properties file in our example does not provide such options in Eclipse.&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) You may want to use the plugin &lt;a href=&#34;https://github.com/iloveeclipse/anyedittools&#34;&gt;AnyEdit Tools&lt;/a&gt; to clean up trailing whitespaces for all file types:  &lt;span class=&#34;menu&#34;&gt;Preferences ▸ AnyEdit Tools ▸ Auto ▸ Convert ▸ Remove trailing whitespace&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) A universal approach, also a little more difficult, is to use &amp;ldquo;&lt;em&gt;Search &amp;amp; Replace&lt;/em&gt;&amp;rdquo; to search with regular expressions for all of &lt;code&gt;&amp;quot;[\t ]+$&amp;quot;&lt;/code&gt; (i.e. more than one whitespaces and/or tabs, please note the whitespace between &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;) and replace them with&lt;code&gt; &amp;quot;&amp;quot;&lt;/code&gt; (blank/empty).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) &lt;span class=&#34;menu&#34;&gt;Preferences ▸ Editor ▸ Appearance ▸ Show whitespaces&lt;/span&gt;
 or &lt;span class=&#34;menu&#34;&gt;View ▸ Active Editor ▸ Show whitespaces&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) Since 2017.2 and later, there is an option &lt;span class=&#34;menu&#34;&gt;Preferences ▸ Editor ▸ General ▸ Strip trailing whitespaces on Save&lt;/span&gt;
 with &amp;ldquo;&lt;code&gt;All&lt;/code&gt;&amp;rdquo;, &amp;ldquo;&lt;code&gt;Modified Lines&lt;/code&gt;&amp;rdquo; or &amp;ldquo;&lt;code&gt;None&lt;/code&gt;&amp;rdquo; but the IDE does not quite behave, i.e. I chose &amp;ldquo;&lt;code&gt;All&lt;/code&gt;&amp;rdquo; but the trailing spaces are still there after saving. It&amp;rsquo;s rather lame and embarrassing for such a highly praised and expensive IDEs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) &lt;span class=&#34;menu&#34;&gt;Preferences ▸ Preferences.sublime-settings—User&lt;/span&gt;
: &lt;code&gt;&amp;quot;draw_white_space&amp;quot;: &amp;quot;all&amp;quot;&lt;/code&gt; (show all whitespaces) or &lt;code&gt;&amp;quot;draw_white_space&amp;quot;: &amp;quot;selection&amp;quot;&lt;/code&gt; (only show within the selection)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) &lt;span class=&#34;menu&#34;&gt;Preferences ▸ Preferences.sublime-settings—User&lt;/span&gt;
: &lt;code&gt;&amp;quot;trim_trailing_white_space_on_save&amp;quot;: false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) Use the plug-in &lt;a href=&#34;https://github.com/jonlabelle/Trimmer&#34;&gt;Trimmer&lt;/a&gt; for manually cleaning up whitespaces&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) Either &lt;span class=&#34;menu&#34;&gt;Preferences ▸ Settings ▸ Render Whitespace&lt;/span&gt;
 or &lt;code&gt;settings.json&lt;/code&gt; ▸ &lt;code&gt;&amp;quot;editor.renderWhitespace&amp;quot;: &amp;quot;boundary&amp;quot;&lt;/code&gt; (to render whitespaces everywhere except single space between words) or &lt;code&gt;&amp;quot;editor.renderWhitespace&amp;quot;: &amp;quot;all&amp;quot;&lt;/code&gt; (to render all whitespaces)&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) Either &lt;span class=&#34;menu&#34;&gt;Preferences ▸ Settings ▸ Render Whitespace&lt;/span&gt;
 or &lt;code&gt;settings.json&lt;/code&gt; ▸  &lt;code&gt;&amp;quot;files.trimTrailingWhitespace&amp;quot;: true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M1+2&lt;/strong&gt;) I use the extension &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces&#34;&gt;Trailing Spaces&lt;/a&gt; that even goes further with red colour highlighting of whitespaces and provides extra commands for (manually) trimming whitespaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vim.org/&#34;&gt;Vim&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can follow the tips on &lt;a href=&#34;http://vim.wikia.com/wiki/Highlight_unwanted_spaces&#34;&gt;highlighting unwanted spaces&lt;/a&gt; and &lt;a href=&#34;http://vim.wikia.com/wiki/Remove_unwanted_spaces&#34;&gt;removing unwanted spaces&lt;/a&gt;, some other &lt;a href=&#34;https://vi.stackexchange.com/a/2285&#34;&gt;advanced tips on Vi and Vim SE&lt;/a&gt;, or using a plug-in that can highlight trailing whitespaces and provide commands to strip all of them
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;M1+2&lt;/strong&gt;) &lt;a href=&#34;https://github.com/bronson/vim-trailing-whitespace&#34;&gt;vim-trailing-whitespace&lt;/a&gt; highlighting and trimming with &lt;code&gt;:FixWhitespace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M1+2&lt;/strong&gt;) &lt;a href=&#34;ntpeters/vim-better-whitespace&#34;&gt;ntpeters/vim-better-whitespace&lt;/a&gt; highlighting and trimming with &lt;code&gt;:StripWhitespace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M1&lt;/strong&gt;) &lt;a href=&#34;https://www.vim.org/scripts/script.php?script_id=3966&#34;&gt;ShowTrailingWhitespace&lt;/a&gt;: mostly trimming whitespaces&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;M2&lt;/strong&gt;) &lt;a href=&#34;https://www.vim.org/scripts/script.php?script_id=3967&#34;&gt;DeleteTrailingWhitespace&lt;/a&gt;: removing trailing whitespaces with &lt;code&gt;:DeleteTrailingWhitespace&lt;/code&gt; or automatically when the buffer is saved&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the sake of completeness, there are some editor-independent solutions too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/sed/manual/sed.html&#34;&gt;sed&amp;mdash;a stream editor&lt;/a&gt; (credits to Tim Pote&amp;rsquo;s excellent &lt;a href=&#34;https://stackoverflow.com/a/10711226/339302&#34;&gt;SO answer&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For POSIX&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -type f -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.properties&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt; -exec sed --in-place &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/[[:space:]]\+$//&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;For macOS/BSD&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;find . -iname &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*.properties&amp;#39;&lt;/span&gt; -type f &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt; -exec sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/[[:space:]]\{1,\}$//&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wow, quite a long post for such a trivial issue, eh?! Thanks for reading to the end and I hope that my wasted time and effort here would save some of yours in future.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Back to basics: Test-driven Spring JDBC</title>
        <link>https://blog.test:8443/2018/11/test-driven-spring-jdbc/</link>
        <pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
        
        <guid>95bf21f9d340d57a94a33a009beedc65</guid>
        <description>&lt;p&gt;&lt;a href=&#34;https://spring.io&#34;&gt;Spring&lt;/a&gt; is a popular heavy-weight framework for developing Java/Groovy based applications. Its rich libraries and software stack can cover from front-end to back-end development. In 2009 I used Spring Framework 3 to develop &lt;a href=&#34;https://github.com/htr3n/loan-approval-portal&#34;&gt;web services and MVC + Hibernate portal&lt;/a&gt; for a fictious &lt;a href=&#34;https://github.com/htr3n/loan-approval&#34;&gt;loan approval process&lt;/a&gt;. Despite a tad steep learning-curve, I could manage to get the services and portal up and running and integrated with third-party libraries quite smoothly.&lt;/p&gt;
&lt;p&gt;In my prevous projects, I mostly used Spring with Hibernate and/or JPA for higher abstraction level of data access. Coming back working with Spring after few years, I want to delve into lower layer of data access to better understand what behind the scene of Hibernate/JPA abstraction layers. This post is sort of my note-to-self on Spring and JDBC (Java Database Connectivity), especially on &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html&#34;&gt;JdbcTemplate&lt;/a&gt;. Besides, it also reports a tricky case with retrieving data with &lt;code&gt;JdbcTemplate.queryForXXX()&lt;/code&gt; employed by several on-line tutorials which was efficiently exposed by appropriate tests.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;JDBC defines standard application programming interface (API) based on that a client can access a database. Each database vendor often provides low-level vendor-specific database drivers based on JDBC predefined interfaces. JDBC is considered the lowest recommended abstraction level to work with databases in Java.&lt;/p&gt;
&lt;p&gt;In short, a typical approach to database access using JDBC comprises these basic steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Obtain a &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/Connection.html&#34;&gt;Connection&lt;/a&gt;, e.g. via &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/DriverManager.html&#34;&gt;DriverManager&lt;/a&gt; or &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/javax/sql/DataSource.html&#34;&gt;DataSource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create an instance of type &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/Statement.html&#34;&gt;Statement&lt;/a&gt; or its sub-types such as &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/CallableStatement.html&#34;&gt;CallableStatement&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html&#34;&gt;PreparedStatement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the aforementioned statement to execute database queries&lt;/li&gt;
&lt;li&gt;Retrieve and process the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html&#34;&gt;ResultSet&lt;/a&gt; (if any)&lt;/li&gt;
&lt;li&gt;Close the statement and release all resources (connection is &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html&#34;&gt;AutoCloseable&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Along these steps, we should also handle any &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/jdbc/basics/sqlexception.html&#34;&gt;database exceptions&lt;/a&gt; as well. You can find more details on JDBC programming &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html&#34;&gt;here&lt;/a&gt;.  Here is a simple example of accessing databases using JDBC and &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&#34;&gt;&lt;em&gt;try-with-resources&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;DataSource ds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// obtain a DataSource object
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
  Connection conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  Statement stmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createStatement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ResultSet rs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; smmt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;executeQuery&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM customer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)){&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()){&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;// process the ResultSet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SQLException e2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    e2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SQLException e1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  e1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fortunately, Spring, via  &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html&#34;&gt;JdbcTemplate&lt;/a&gt;, ofters a higher level of abstraction on top of Java JDBC that would save us a lot of boiler plate code and enable smooth integration with the rest of Spring framework&amp;rsquo;s ecosystem. As such, we can leverage other parts of Spring farmework, for instance, the awesome &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt;, to automate lots of configuration effort.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-crud-project-with-spring-jdbc&#34;&gt;A simple CRUD project with Spring JDBC&lt;/h2&gt;
&lt;p&gt;Nothing is better than a hand-on development project that demonstrate how Spring JDBC works. We can start with &lt;a href=&#34;https://start.spring.io/&#34;&gt;Spring Initialzr&lt;/a&gt; and &lt;a href=&#34;https://spring.io/projects/spring-boot&#34;&gt;Spring Boot&lt;/a&gt; to jump start and better concentrate on the main code instead of numerous dependencies and configurations.&lt;/p&gt;
&lt;p&gt;There are a few ways to bootstrap a project with Spring Initialzr. Most of the popular Java IDE such as Eclipse or Intellij IDEA with Spring extensions can create a new project via Spring Initialzr. You can also achieve the same result from the web site &lt;a href=&#34;https://start.spring.io&#34;&gt;https://start.spring.io&lt;/a&gt; or even using &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html#getting-started-installing-the-cli&#34;&gt;Spring Boot CLI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here I will use Intellij IDEA for just showing the necessary steps and dependencies. You can use any of the aforementioned methods to obtain the same result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Create a new project and choose Spring Initialzr.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ide-step-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Fill in necessary project information, keep default values for project&amp;rsquo;s type (Maven), language (Java), packaging (Jar), Java version (8).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ide-step-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Choose the section SQL and make sure the checkboxes of H2 and JDBC are ticked.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ide-step-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Finish the project creation wizard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ide-step-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After Step 4, Intellij IDEA will create a new Maven Spring Boot project with some initial source and configuration files.&lt;/p&gt;
&lt;p&gt;By default, the main configuration file for Spring Boot is &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ide-main.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;defining-domain-entities&#34;&gt;Defining Domain Entities&lt;/h3&gt;
&lt;p&gt;We might not need a complex domain model but rather a simple entity mapped to a database table. For example, a &lt;code&gt;Customer&lt;/code&gt; entity as shown in Java code and a corresponding &lt;code&gt;customer&lt;/code&gt; table.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; io.github.htr3n.springjdbcsimple.entity&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Customer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Integer id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Integer &lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configuring-database-connection&#34;&gt;Configuring Database Connection&lt;/h3&gt;
&lt;p&gt;Normally, we have to provide sufficient information to establish database connections, for instance, JDBC url, authentication, and maybe some extra parameters. &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/howto-data-access.html#howto-configure-a-datasource&#34;&gt;Per convention&lt;/a&gt;, Spring Boot can scan for data sources configurations as &lt;code&gt;@Bean&lt;/code&gt; or in &lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For better concentraton on test-driven JDBC CRUD, we can leverage &lt;code&gt;@JdbcTest&lt;/code&gt; explained in the subsequent section to set up an in-memory embedded database and skip the details on data source configuration for now.&lt;/p&gt;
&lt;p&gt;However, we must still initialise the database (otherwise Spring will complain that the table &lt;code&gt;customer&lt;/code&gt; &lt;em&gt;does not exist&lt;/em&gt; when our application or a test starts). By convention documented &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-spring-jdbc&#34;&gt;here&lt;/a&gt;, we simply add a file &lt;code&gt;schema.sql&lt;/code&gt; in the folder &lt;code&gt;src/main/resources&lt;/code&gt; which contains a simple SQL DDL script for creating a table &lt;code&gt;customer&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; customer;
&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; customer(
  id integer &lt;span style=&#34;color:#66d9ef&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; auto_increment,
  name varchar(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
  email varchar (&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
  &lt;span style=&#34;color:#66d9ef&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;key&lt;/span&gt; (id)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;test-driven-crud&#34;&gt;Test-Driven CRUD&lt;/h3&gt;
&lt;p&gt;At the heart of our JDBC project is a &lt;code&gt;CustomerDao.java&lt;/code&gt; with basic &lt;a href=&#34;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&#34;&gt;CRUD methods&lt;/a&gt;. The class &lt;code&gt;CustomerDao&lt;/code&gt; is annotated with &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html&#34;&gt;@Repository&lt;/a&gt; to indicate this is a data access component that is autodetected through normal Spring&amp;rsquo;s classpath scanning.&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;JdbcTemplate&lt;/code&gt; will be used to work with H2 database, we just declared an &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html&#34;&gt;@Autowired&lt;/a&gt; field, the rest will be taken care by Spring.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; io.github.htr3n.springjdbcsimple.dao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.List&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.jdbc.core.JdbcTemplate&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Repository&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomerDao&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; JdbcTemplate jdbcTemplate&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;// Create
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Customer &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Customer customer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{...}&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// Update
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Customer customer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;// Delete
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;crud-tests&#34;&gt;CRUD Tests&lt;/h4&gt;
&lt;p&gt;Before starting implementing the CRUD methods, we create some unit tests in &lt;code&gt;CustomerDaoTest&lt;/code&gt;. Again, Spring Boot will help us a lot here with setting up and shutting down properly the testing environment via annotations such as &lt;code&gt;@RunWith&lt;/code&gt; and &lt;code&gt;@SpringBootTest&lt;/code&gt;. We only need to declare an &lt;em&gt;autowired&lt;/em&gt; object &lt;code&gt;CustomerDao&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Spring offers powerful means for database testing, for instance, &lt;code&gt;@Transational&lt;/code&gt; and &lt;code&gt;@Rollback&lt;/code&gt;. With these annotations, Spring will take care of database transactions as well as rollling back the testing databases to its initial state.&lt;/p&gt;
&lt;p&gt;Unfortunately, it would be too tedious to annotate each test method. Spring Boot comes to handy with  &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/autoconfigure/jdbc/JdbcTest.html&#34;&gt;&lt;code&gt;@JdbcTest&lt;/code&gt;&lt;/a&gt; that enables several useful features for JDBC tests including an in-memory embedded database as well as transactional and roll back at the end of each test.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;By default, &lt;code&gt;@JdbcTest&lt;/code&gt; &lt;a href=&#34;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-jdbc-test&#34;&gt;won&amp;rsquo;t load regular &lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;, and as a result, &lt;code&gt;CustomerDao&lt;/code&gt; won&amp;rsquo;t be loaded because it is a &lt;code&gt;@Repository&lt;/code&gt;, i.e. a sub-type of &lt;code&gt;@Component&lt;/code&gt;. Spring will inform us that it fails to find the required autowire &lt;code&gt;CustomerDao&lt;/code&gt; for &lt;code&gt;CustomerDaoTest&lt;/code&gt;.  To fix this, simply annotation  &lt;code&gt;CustomerDaoTest&lt;/code&gt; with &lt;code&gt;@ComponentScan&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the whole test case for our tentative CRUD methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; io.github.htr3n.springjdbcsimple.dao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.github.htr3n.springjdbcsimple.entity.Customer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.Before&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.Test&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.runner.RunWith&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.boot.test.autoconfigure.jdbc.JdbcTest&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.ComponentScan&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.test.context.junit4.SpringRunner&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.List&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Optional&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Random&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import static&lt;/span&gt; org.assertj.core.api.Assertions.assertThat&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SpringRunner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@JdbcTest&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@ComponentScan&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomerDaoTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String ALICE_NAME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String ALICE_EMAIL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alice@test.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String BOB_NAME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String BOB_EMAIL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bob@test.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ONE_CUSTOMER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; TWO_CUSTOMERS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; CustomerDao customerDao&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Customer alice&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Customer bob&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Before&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setUp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
    alice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Customer&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ALICE_NAME&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ALICE_EMAIL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    bob &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Customer&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BOB_NAME&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    bob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BOB_EMAIL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_shouldReturnValidCustomer_whenAddingNewCustomer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isNotNull&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPresent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasFieldOrPropertyWithValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ALICE_NAME&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasFieldOrPropertyWithValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ALICE_EMAIL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findById_shouldReturnInvalidCustomer_forEmptyDatabase&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; invalidCustomer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nextInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;invalidCustomer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPresent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isFalse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findById_shouldReturnValidCustomer_forExistingCustomer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; validCustomer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;validCustomer&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPresent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;validCustomer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;validCustomer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findAll_shouldYieldEmptyList_forEmptyDatabase&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; noCustomers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;noCustomers&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isNullOrEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findAll_shouldYieldListOfCustomers_forNonemptyDatabase&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; customers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customers&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isNotNull&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ONE_CUSTOMER&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    Customer result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasFieldOrPropertyWithValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ALICE_NAME&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasFieldOrPropertyWithValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ALICE_EMAIL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bob&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    customers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customers&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isNotNull&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TWO_CUSTOMERS&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_shouldYieldFalse_forEmptyDatabase&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Customer notFound &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Customer&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    notFound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nextInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;notFound&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isFalse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update_shouldYieldTrue_forExistingCustomer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isNotNull&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isTrue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BOB_NAME&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;BOB_EMAIL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isTrue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;found&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPresent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;found&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;found&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEqualTo&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete_shouldYieldFalse_forEmptyDatabaseOrNonexistingCustomer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nextInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isFalse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete_shouldYieldTrue_forExistingCustomer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hasSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ONE_CUSTOMER&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isTrue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;alice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isPresent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isFalse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    assertThat&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customerDao&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;crud-implementation&#34;&gt;CRUD Implementation&lt;/h4&gt;
&lt;p&gt;With the tests defined, we can start implementing the CRUD using Spring &lt;code&gt;JdbcTemplate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;reate&lt;/p&gt;
&lt;p&gt;To satisfy the test described in &lt;code&gt;create_shouldReturnValidCustomer_whenAddingNewCustomer()&lt;/code&gt;, our &lt;code&gt;Customer.create()&lt;/code&gt; must successfully save the input &lt;code&gt;Customer&lt;/code&gt; and return with an auto-generated primary key (e.g. customer ID). In order to obtain the key, we can use Spring&amp;rsquo;s helper class &lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/support/KeyHolder.html&#34;&gt;&lt;code&gt;KeyHolder&lt;/code&gt;&lt;/a&gt; along with the standard &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html&#34;&gt;&lt;code&gt;PreparedStatement&lt;/code&gt;&lt;/a&gt;. Note that the code was simplified with &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&#34;&gt;Java 8 Lambda notation&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Customer &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Customer customer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  String sql &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INSERT INTO customer (name, email) VALUES (?, ?)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  KeyHolder keyHolder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GeneratedKeyHolder&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;connection &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    PreparedStatement statement &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareStatement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Statement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RETURN_GENERATED_KEYS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    statement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    statement&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; statement&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt; keyHolder&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  
  Integer newCustomerId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; keyHolder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;intValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newCustomerId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that, Spring also provides another helper, namely, &lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/simple/SimpleJdbcInsert.html&#34;&gt;&lt;code&gt;SimpleJdbcInsert&lt;/code&gt;&lt;/a&gt; with methods &lt;code&gt;executeAndReturnKey()&lt;/code&gt;. Per the class&amp;rsquo;s documentation, &lt;code&gt;SimpleJdbcInsert&lt;/code&gt;  is indeed a higher level wrapper of &lt;code&gt;JdbcTemplate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;etrieve&lt;/p&gt;
&lt;p&gt;In this project, we develop two retrieval methods: &lt;code&gt;findAll()&lt;/code&gt; will return a list of all customers whilst &lt;code&gt;findById()&lt;/code&gt; will look for a certain customer using the input ID.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;findAll()&lt;/code&gt; is rather a piece of cake but &lt;code&gt;findById()&lt;/code&gt; is quite tricky. Most of the tutorials or guides on Spring &lt;code&gt;JdbcTemplate&lt;/code&gt; I have found on the Internet blindly use the method &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html#queryForObject-java.lang.String-java.lang.Class-&#34;&gt;JdbcTemplate.queryForObject()&lt;/a&gt; to look up a database row. Trust me, I made the same mistake, too, along the line of this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  String sql &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT id, name, email FROM customer WHERE id = ?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Optional&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;jdbcTemplate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;queryForObject&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CustomerMapper&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Neater and cleaner, eh!? Unfortunately, the aforementioned &lt;code&gt;findById()&lt;/code&gt; based on the problematic methods &lt;code&gt;JdbcTemplate.queryForXXX()&lt;/code&gt; which is recommended to use in case the query shall return a single row and fails miserably in other cases.&lt;/p&gt;
&lt;p&gt;This issue has been exposed by the test &lt;code&gt;findById_shouldReturnInvalidCustomer_forEmptyDatabase()&lt;/code&gt; and I was able to come up with a slightly better version that uses &lt;code&gt;JdbcTemplate.query()&lt;/code&gt; and checks for the returning &lt;code&gt;ResultSet&lt;/code&gt;, in case of non-exiting customer yielding correctly &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  String sql &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM customer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CustomerMapper&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findCustomerById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  String sql &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT id, name, email FROM customer WHERE id = ?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
    rs &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; rs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; Optional&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CustomerMapper&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapRow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)):&lt;/span&gt; Optional&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;empty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
    id&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When working with pure JDBC, we must map the database query result onto the domain entity on our own. This can be quickly done by implementing the interface &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/RowMapper.html&#34;&gt;&lt;code&gt;RowMapper&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomerMapper&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; RowMapper&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Customer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Customer &lt;span style=&#34;color:#a6e22e&#34;&gt;mapRow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ResultSet rs&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rowNum&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; SQLException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Customer customer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Customer&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;rs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;U&lt;/strong&gt;pdate / &lt;strong&gt;D&lt;/strong&gt;elete&lt;/p&gt;
&lt;p&gt;The implementation of updating and deletion is rather straightforward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Update
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Customer customer&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  String sql &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UPDATE customer SET name=?, email=? WHERE id=?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  Object&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;[]{&lt;/span&gt;customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; customer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()};&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; params&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Delete
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer id&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  String sql &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DELETE FROM customer WHERE id = ?&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  Object&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color:#f92672&#34;&gt;[]{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jdbcTemplate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sql&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; params&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we finish implementing all necessary CRUD methods and hopefully pass all the aforementioned tests.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;passed-tests.png&#34; alt=&#34;Passed tests&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can check out the &lt;a href=&#34;https://github.com/htr3n/spring-jdbc-simple&#34;&gt;project source code&lt;/a&gt; available on Github.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Handy macOS QuickLook configurations</title>
        <link>https://blog.test:8443/2018/07/handy-quicklook/</link>
        <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
        
        <guid>740f3a610e11a900f13e26facbeb81ec</guid>
        <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Quick_Look&#34;&gt;QuickLook&lt;/a&gt; is a simple but powerful feature of macOS that helps to preview the content of a file or folder in Finder without using any particular apps. This feature is very handy when we only want to have brief glance on a certain file or quickly examine its parts instead of opening a full-fledged app for that particular file.&lt;/p&gt;
&lt;p&gt;Even nicer, Apple provides &lt;a href=&#34;https://developer.apple.com/documentation/quicklook&#34;&gt;API&lt;/a&gt; for QuickLook programming and enables the use of &lt;a href=&#34;http://www.quicklookplugins.com/&#34;&gt;plugins&lt;/a&gt; that convert a certain document from its native format into QuickLook previewing format. Before, it was also possible to also &lt;a href=&#34;http://www.mactricksandtips.com/2013/01/22-finder-hacks-tricks-and-changes.html&#34;&gt;select and copy text from QuickLook previewing&lt;/a&gt; but then Apple removed that feature since macOS 10.11 El Capitan.&lt;/p&gt;
&lt;p&gt;QuickLook is well supported in Spotlight search. In Finder, it can be conveniently activated by selecting a file or folder and  then, for normal previewing, press &lt;!-- raw HTML omitted --&gt;Space&lt;!-- raw HTML omitted --&gt; or &lt;!-- raw HTML omitted --&gt;⌘&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Y&lt;!-- raw HTML omitted --&gt;. For full-screen previewing, you can press &lt;!-- raw HTML omitted --&gt;⌥&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Space&lt;!-- raw HTML omitted --&gt; (or using &lt;!-- raw HTML omitted --&gt;⌘&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;⌥&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Y&lt;!-- raw HTML omitted --&gt; in case you have &lt;!-- raw HTML omitted --&gt;⌥&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Space&lt;!-- raw HTML omitted --&gt; bound to some apps, for instance, &lt;a href=&#34;https://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; in my case).&lt;/p&gt;
&lt;p&gt;We might also use the command &lt;code&gt;qlmanage&lt;/code&gt; but it works properly with built-in support and has issues with some external plugins.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# show the preview of file&lt;/span&gt;
qlmanage -p &amp;lt;path_to_file&amp;gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# or only show the thumpnail&lt;/span&gt;
qlmanage -t &amp;lt;path_to_file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;quicklook-settings&#34;&gt;QuickLook Settings&lt;/h2&gt;
&lt;p&gt;QuickLook looks for and uses the plugins from both system-wide folders &amp;lsquo;&lt;em&gt;/System/Library/QuickLook&lt;/em&gt;&amp;rsquo; and  &amp;lsquo;&lt;em&gt;/Library/QuickLook&lt;/em&gt;&amp;rsquo; and also the home folder of each user in  &amp;lsquo;&lt;em&gt;~/Library/QuickLook&lt;/em&gt;&#39;.&lt;/p&gt;
&lt;p&gt;A QuickLook plugin is organised in a folder with an extension &lt;code&gt;.qlgenerator&lt;/code&gt;. The main task of a plugin, as mentioned above, is to generate previewing contents for the corresponding file types.  We can see an example of the built-in plugin &lt;code&gt;Image.qlgenerator&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ tree /System/Library/QuickLook/Image.qlgenerator
/System/Library/QuickLook/Image.qlgenerator
└── Contents
    ├── Info.plist
    ├── MacOS
    │   └── Image
    ├── _CodeSignature
    │   └── CodeResources
    └── version.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The command &lt;code&gt;qlmanage&lt;/code&gt; is provided in macOS since the announcement of QuickLook in 2007. It&amp;rsquo;s very helpful for manipulating QuickLook, for instance, reloading the generators, resetting cache, and many more.  We will walk through some handy usage of &lt;code&gt;qlmanage&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;forcing-reloading-the-list-of-generators&#34;&gt;Forcing reloading the list of generators&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;qlmanage -r
qlmanage: resetting quicklookd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;showing-the-list-of-generators&#34;&gt;Showing the list of generators&lt;/h5&gt;
&lt;p&gt;This command can be used to see the current QuickLook generators list and also check which generator handles what file types. You might then see a long list of generators in your macOS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;qlmanage -m plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;resetting-quicklook-caches&#34;&gt;Resetting QuickLook caches&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;qlmanage -r cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more usage of &lt;code&gt;qlmanage&lt;/code&gt;, we can look into its manual.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;man qlmanage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;quicklook-plugins&#34;&gt;QuickLook Plugins&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/search?q=quicklook+plugins&#34;&gt;Looking around&lt;/a&gt;, we can easily find a lot of plugins to enhance the built-in support of macOS. Moreover, when we install some applications, there might be included QuickLook plugins too.&lt;/p&gt;
&lt;p&gt;Here is a list of plugins that I find very handy and use quite often in my macOS development box.&lt;/p&gt;
&lt;h4 id=&#34;qlstephen&#34;&gt;QLStephen&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://whomwah.github.io/qlstephen&#34;&gt;QLStephen&lt;/a&gt; is sort of an awesome Swiss-army-knife that I ever used. It enables the preview of numerous plain text files not handled by the default support of macOS QuickLook, especially files having no extensions such as README, CHANGELOG, Makefile, Rakefile, etc.&lt;/p&gt;
&lt;p&gt;If you have already installed &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, it takes only a simple command to install QLStephen (in case you haven&amp;rsquo;t, please feel free to head to &lt;a href=&#34;https://blog.test:8443/2018/06/bootstrapping-macos-workspace/#homebrew&#34;&gt;another post&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install qlstephen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/handy-quicklook/qlstephen.png&#34;
      
        alt=&#34;QLStephen preview&#34;
        
        
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 1. Using QLStephen to preview a Makefile (which has no extension and is not supported by macOS)
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;h4 id=&#34;qlcolorcode&#34;&gt;QLColorCode&lt;/h4&gt;
&lt;p&gt;I often quickly review my code using &lt;a href=&#34;https://github.com/anthonygelibert/QLColorCode&#34;&gt;this amazing plugin&lt;/a&gt; forked/derived from the &lt;a href=&#34;https://github.com/n8gray/QLColorCode&#34;&gt;original one&lt;/a&gt; developed by Nathan Gray (&lt;a href=&#34;https://github.com/n8gray&#34;&gt;n8gray&lt;/a&gt;). The preview code will be nicely formatted and highlighted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install qlcolorcode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default setting of QLColorCode is totall fine. Nonetheless, you might want to customise some of its settings to your tastes too. Here are some of my favourites.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;defaults write org.n8gray.QLColorCode textEncoding UTF-16
defaults write org.n8gray.QLColorCode webkitTextEncoding UTF-16
defaults write org.n8gray.QLColorCode font &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Source Code Pro&amp;#34;&lt;/span&gt;
defaults write org.n8gray.QLColorCode fontSizePoints &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
defaults write org.n8gray.QLColorCode hlTheme zenburn
defaults write org.n8gray.QLColorCode extraHLFlags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-W -J 160&amp;#34;&lt;/span&gt;
defaults write org.n8gray.QLColorCode pathHL /usr/local/bin/highlight
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the result of previewing Java code.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/handy-quicklook/qlcolorcode.png&#34;
      
        alt=&#34;QLStephen preview&#34;
        
        
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 2. Code preview with syntax highlighting
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;h4 id=&#34;qlcommonmark&#34;&gt;QLCommonMark&lt;/h4&gt;
&lt;p&gt;I have been working with Markdown a lot, especially writing this blog all using Markdown and Hugo generator. It was quite a while I have searched around for a stable QuickLook plugin for Markdown. Before, I used &lt;a href=&#34;https://github.com/ttscoff/MMD-QuickLook&#34;&gt;MDD-QuickLook&lt;/a&gt;, an excellent fork of the well-known &lt;a href=&#34;https://github.com/fletcher&#34;&gt;Fletcher&lt;/a&gt;&amp;lsquo;s original &lt;a href=&#34;https://github.com/fletcher/MMD-QuickLook&#34;&gt;plugin&lt;/a&gt;. MDD-QuickLook allows me to customise the look of the Markdown preview using a Github based CSS file &lt;code&gt;~/.mdqlstyle.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When I found &lt;a href=&#34;https://github.com/digitalmoksha/QLCommonMark&#34;&gt;QLCommonMark&lt;/a&gt;, it replaces MDD-QuickLook with a broader coverage including &lt;a href=&#34;http://commonmark.org/&#34;&gt;CommonMark&lt;/a&gt; and Markdown and can be configured in the same way, just different filename &lt;code&gt;~/.cmqlstyle.css&lt;/code&gt;. You can find my Markdown preview style &lt;a href=&#34;https://gist.github.com/htr3n/ffdcb6238f868dd1605af2bbd1e53546&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install qlcommonmark
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/handy-quicklook/qlcommonmark.png&#34;
      
        alt=&#34;QLCommonMark preview&#34;
        
        
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 3. Markdown preview with a Github based style
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;h4 id=&#34;quicklook-json&#34;&gt;QuickLook JSON&lt;/h4&gt;
&lt;p&gt;Both front-end and back-end developers are somehow familiar with &lt;a href=&#34;https://www.json.org/&#34;&gt;JavaScript Object Notation&lt;/a&gt; (JSON) format. As JavaScript and its ecosystem are rapidly growing, JSON and its variations become extremely popular. Hence, a QuickLook plugin for JSON should be ready in your macOS dev box.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install quicklook-json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;quicklook-csv&#34;&gt;QuickLook CSV&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Comma-separated_values&#34;&gt;CSV&lt;/a&gt; is a very popular format due to its simplicity and commonly used in statistics and data analytics. It contains values separated by comma, tabs, semi-colons, or pipes. MacOS provides built-in support for CSV previewing but I prefer a nicer-looking preview with &lt;a href=&#34;https://github.com/p2/quicklook-csv&#34;&gt;QuickLook CSV&lt;/a&gt; developed by Pascal Pfiffner (&lt;a href=&#34;https://github.com/p2&#34;&gt;p2&lt;/a&gt;) with alternate row shading.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install quicklook-csv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/handy-quicklook/csv.png&#34;
      
        alt=&#34;CSV preview&#34;
        
        
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 4. A CSV file preview
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;h4 id=&#34;hetimazip&#34;&gt;HetimaZip&lt;/h4&gt;
&lt;p&gt;There are many formats and standards around for compressing and archiving files such as &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7z&lt;/a&gt;, &lt;a href=&#34;http://bzip.org&#34;&gt;bzip2&lt;/a&gt;,  &lt;a href=&#34;http://www.gzip.org&#34;&gt;gzip&lt;/a&gt;, &lt;a href=&#34;https://www.rarlab.com/rar_file.htm&#34;&gt;rar&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Zip_%28file_format%29&#34;&gt;zip&lt;/a&gt;, to name but a few. &lt;a href=&#34;http://hetima.com/hetimazipql&#34;&gt;HetimaZip&lt;/a&gt; can help to &lt;em&gt;look through&lt;/em&gt; a Zip archive without unzipping or opening it. Note that, this plugin also support well some file types based on Zip format such as &lt;a href=&#34;https://en.wikipedia.org/wiki/JAR_%28file_format%29&#34;&gt;Java ARchive&lt;/a&gt; (&lt;code&gt;.jar&lt;/code&gt;), iOS app (&lt;a href=&#34;https://en.wikipedia.org/wiki/.ipa&#34;&gt;&lt;code&gt;.ipa&lt;/code&gt;&lt;/a&gt;), and many more.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install hetimazipql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately, HetimaZip cannot handle &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_application_package&#34;&gt;Android application package&lt;/a&gt; (&lt;code&gt;.apk&lt;/code&gt;). Thus we can combine with another nice plugin, &lt;a href=&#34;https://github.com/hezi/QuickLookAPK&#34;&gt;QuickLook APK&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install quicklookapk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is an alternative to HetimaZip, namely, &lt;a href=&#34;https://macitbetter.com&#34;&gt;BetterZip&lt;/a&gt;. I have tried both but could not make BetterZip&amp;rsquo;s work in macOS High Sierra like HetimaZip&amp;rsquo;s to show the content of a normal Zip file.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/handy-quicklook/zip.png&#34;
      
        alt=&#34;Zip file preview&#34;
        
        
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 5. Looking through a Zip file content
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;h4 id=&#34;suspicious-package&#34;&gt;Suspicious Package&lt;/h4&gt;
&lt;p&gt;MacOs applications are sometimes distributed as &lt;a href=&#34;https://en.wikipedia.org/wiki/Installer_%28macOS%29&#34;&gt;installer packages&lt;/a&gt; (&lt;code&gt;.pkg&lt;/code&gt;). An installer package may run some scripts and install many files in your systems. A curious and careful user would need to find out what exactly the installation scripts doing and what files are going to be installed.&lt;/p&gt;
&lt;p&gt;Advanced macOS users can use &lt;span class=&#34;menu&#34;&gt;Show Package Contents&lt;/span&gt;
 to get inside the package, but it won&amp;rsquo;t show much details. We can use the app &lt;a href=&#34;https://www.mothersruin.com/software/SuspiciousPackage&#34;&gt;&lt;em&gt;Suspicious Package&lt;/em&gt;&lt;/a&gt; or its included QuickLook plugin to inspect any installer packages before approving for installation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install suspicious-package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that it is a tad inconvenient that you &lt;a href=&#34;https://www.mothersruin.com/software/SuspiciousPackage/faq.html#plugin-only&#34;&gt;have to install the app&lt;/a&gt; &lt;em&gt;Suspicious Package&lt;/em&gt; only for its plugin. Copying the plugin alone won&amp;rsquo;t work because it depends on the core libraries for previewing. I&amp;rsquo;m not quite sure whether this is the developers&amp;rsquo; intention or there are actual technical difficulties behind the scene to solely deliver the QuickLook plugin.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/handy-quicklook/package.png&#34;
      
        alt=&#34;Installer package preview&#34;
        
        
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 6. Looking through an installer package
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;h4 id=&#34;qlimagesize&#34;&gt;qlImageSize&lt;/h4&gt;
&lt;p&gt;Normally macOS provides sufficient plugins for quick-looking images. &lt;a href=&#34;https://github.com/Nyx0uf/qlImageSize&#34;&gt;qlImageSize&lt;/a&gt; can enhance further by displaying the dimensions and size of the previewed image. These information is only available either when opening the image with an application or selecting the image file and pressing &lt;!-- raw HTML omitted --&gt;⌘&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;I&lt;!-- raw HTML omitted --&gt; in Finder. I like &lt;em&gt;qlImageSize&lt;/em&gt; a lot as many times I just want to quickly see an image&amp;rsquo;s dimensions and size this way.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew cask install qlimagesize
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Faster and enjoyable ZSH (maybe)</title>
        <link>https://blog.test:8443/2018/07/faster-zsh/</link>
        <pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate>
        
        <guid>79b15cabba7f91b63bf8889173bf0a6f</guid>
        <description>&lt;p&gt;Z shell (Zsh) has been my shell of choice in both Linux and macOS. I used to install &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; or the claimed-to-be-faster &lt;a href=&#34;https://github.com/sorin-ionescu/prezto&#34;&gt;Prezto&lt;/a&gt; or &lt;a href=&#34;https://github.com/zimfw/zimfw&#34;&gt;Zim&lt;/a&gt; to leverage some of their cool libraries.&lt;/p&gt;
&lt;p&gt;Unfortunately, I realised that my favourite terminal app, &lt;a href=&#34;https://www.iterm2.com&#34;&gt;iTerm 2&lt;/a&gt;, became more and more sluggish when loading a new tab or window with more than one and a half second (without some virtual environment loaders like &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;nvm&lt;/a&gt;, &lt;a href=&#34;https://rvm.io/&#34;&gt;rvm&lt;/a&gt;, &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt;, &lt;a href=&#34;http://www.jenv.be&#34;&gt;jenv&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;A quick &lt;a href=&#34;https://www.google.com/search?q=faster+zsh&#34;&gt;&lt;em&gt;G-fu&lt;/em&gt;&lt;/a&gt; could yield numerous posts on how to debug, optimise, speed up Zsh. I spent some time to refactor my own lightweight scripts instead of using big frameworks and was able to reach nearly one third of a second.  In this post, I will share and discuss some aspects that might affect Zsh loading time and how to mitigate them. Most of the relevant code and configurations can be found &lt;a href=&#34;https://github.com/htr3n/zsh-config&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;__TL;DR:__&lt;!-- raw HTML omitted --&gt;There are many aspects in Zsh that can potentially slow down its startup time and can be mitigated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#organising-shell-startup-order&#34;&gt;Organising shell startup order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#avoiding-creating-subprocesses&#34;&gt;Avoiding creating subprocesses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lazy-loading&#34;&gt;Lazy-loading instead of eager-loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optimising-completion-system&#34;&gt;Optimising completion system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#optimising-shell-prompts&#34;&gt;Optimising shell prompts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#macos-optimisations&#34;&gt;MacOS-specific optimisations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;performance-analysis&#34;&gt;Performance Analysis&lt;/h2&gt;
&lt;h3 id=&#34;overall-execution-time&#34;&gt;Overall execution time&lt;/h3&gt;
&lt;p&gt;Crunching some numbers on Zsh loading time would be definitely useful for further in depth analysis of its performance. A simple timing of Zsh startup time can be measured approximately using the &lt;code&gt;time&lt;/code&gt; command that is available in most Unix/Linux/Mac systems.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ /usr/bin/time /bin/zsh -i -c exit
        0.67 real         0.41 user         0.26 sys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output of the command shows the execution time of Zsh breaking down to user-land and system. In order to get a better approximation, we can make a loop that invokes &lt;code&gt;time&lt;/code&gt; for 10 or greater, if possible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 10&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; /usr/bin/time /bin/zsh -i -c exit; &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This timing method is very fast and handy in case you want to quickly see how your Zsh performs, especially to test some changes you have just made.&lt;/p&gt;
&lt;h3 id=&#34;profiling&#34;&gt;Profiling&lt;/h3&gt;
&lt;p&gt;Zsh provides a built-in module &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fzprof-Module&#34;&gt;&lt;code&gt;zsh/zprof&lt;/code&gt;&lt;/a&gt; that can be used to profile Zsh functions. At the beginning of &lt;code&gt;~/.zshrc&lt;/code&gt;, we add &lt;code&gt;zmodload zsh/zprof&lt;/code&gt;. After restart the shell, we can use the command &lt;code&gt;zprof&lt;/code&gt; to show a very rich output on Zsh startup loading. An illustrative output of &lt;code&gt;zprof&lt;/code&gt; is shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ zprof
num  calls                time                       self            name
------------------------------------------------------------------------------
 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;          51.31    51.31   22.68%     49.68    49.68   21.96%  zle-line-init
 2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;          45.72    22.86   20.21%     45.72    22.86   20.21%  compaudit
 3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;195&lt;/span&gt;          34.71     0.18   15.34%     25.52     0.13   11.28%  _zsh_autosuggest_bind_widget
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Two aforementioned approaches can give us a rough analysis on what aspects are invoked during Zsh startup so that we might figure out the bottleneck. In case you need to dig deeper, Arnout wrote &lt;a href=&#34;http://blog.xebia.com/profiling-zsh-shell-scripts&#34;&gt;a nice article&lt;/a&gt; in which he suggested a in-depth analysis and visualisation of Zsh loading using &lt;code&gt;xtrace&lt;/code&gt; and &lt;code&gt;kcachegrind&lt;/code&gt;. Benjamin developed &lt;a href=&#34;https://esham.io/2018/02/zsh-profiling&#34;&gt;a similar approach&lt;/a&gt; to more thorough tracing and analysis Zsh execution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;problematic-aspects-and-mitigation&#34;&gt;Problematic Aspects and Mitigation&lt;/h2&gt;
&lt;p&gt;Using two simple methods mentioned above, I was able to roughly understand some issues of my Zsh settings and tried to mitigate them to reduce startup time. I could not report the exact steps what have been done as it was a lot of trial-and-errors. Here I will discuss some major aspects combining my actual experiment and G-fu research.&lt;/p&gt;
&lt;h3 id=&#34;organising-shell-startup-order&#34;&gt;Organising shell startup order&lt;/h3&gt;
&lt;p&gt;The order that Zsh loads its configuration files are documented &lt;a href=&#34;http://zsh.sourceforge.net/Intro/intro_3.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Files.html&#34;&gt;here&lt;/a&gt;. Peter Ward &lt;a href=&#34;https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html&#34;&gt;drew a nice diagram&lt;/a&gt; showing the loading process of Zsh alongside with Bash and Sh (note that he omitted the system-wide configurations in Zsh part).&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/faster-zsh/shell-startup-actual.png&#34;
      
        alt=&#34;Shell startup order&#34;
        
        
        
         style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 1. Bash, sh, and zsh shells startup order
        
          [&lt;a href=&#34;https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html&#34;&gt;source&lt;/a&gt;]
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;p&gt;It&amp;rsquo;s also useful to understand relevant shell concepts, such as &lt;em&gt;login&lt;/em&gt; vs. &lt;em&gt;non-login&lt;/em&gt;, &lt;em&gt;interactive&lt;/em&gt; vs. &lt;em&gt;non-interactive&lt;/em&gt; shown in the diagram. Please refer to, for example, &lt;a href=&#34;https://askubuntu.com/a/438170/115425&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://askubuntu.com/a/879400/115425&#34;&gt;here&lt;/a&gt; for further explanations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Some shell examples:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when opening a terminal emulator app (e.g. Terminal or iTerm 2), we are creating an &lt;em&gt;interactive, non-login shell&lt;/em&gt; (please see &lt;code&gt;login -pf&lt;/code&gt; later).&lt;/li&gt;
&lt;li&gt;when logging in into a machine using command line &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt; &lt;code&gt;ssh&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Su_%28Unix%29&#34;&gt;&lt;code&gt;su - username&lt;/code&gt;&lt;/a&gt;, we are working with an &lt;em&gt;interactive login&lt;/em&gt; shell.&lt;/li&gt;
&lt;li&gt;when executing a shell script, it is on a &lt;em&gt;non-interactive&lt;/em&gt;, &lt;em&gt;non-login&lt;/em&gt; shell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Grokking Zsh startup order will help us putting relevant configurations in right files as well as optimising the loading process. My local Zsh setting is orgranised as follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.zshenv&lt;/code&gt;: invoked by all invocations of Zsh, so we should keep it small and merely initialise necessary variables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.zlogin&lt;/code&gt;: will be loaded in login shells after &lt;em&gt;.zshrc_. My &lt;/em&gt;.zlogin_&lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zlogin&#34;&gt;&lt;/a&gt; will compile &lt;code&gt;zcompdump&lt;/code&gt; in background as this is time-consuming and done only once per log-in session.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.zprofile&lt;/code&gt; : similar to _.zlogin_ but will be sourced before _.zshrc_. Note that, both _.zprofile_ and _.zshrc_ are skipped in non-login non-interactive shells, as shown in Figure 1. So I learned a trick from &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/tree/master/runcoms&#34;&gt;Prezto&lt;/a&gt; that declares environment variables in _.zprofile_ and uses &lt;em&gt;.zshenv_ to source &lt;em&gt;.zprofile_ (e.g. &lt;/em&gt;.zprofile&lt;/em&gt;&lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zprofile&#34;&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zshenv&#34;&gt;&lt;em&gt;.zshenv&lt;/em&gt;&lt;/a&gt;). This way, non-login non-interactive shells will receive proper variable initialisations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.zshrc&lt;/code&gt;: will be sourced in interactive shells. This contains the main part of Zsh configuration (e.g. my &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zshrc&#34;&gt;&lt;em&gt;.zshrc&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;avoiding-creating-subprocesses&#34;&gt;Avoiding creating subprocesses&lt;/h3&gt;
&lt;p&gt;Some commands look totally innocent and standard in your shell scripts but might cost you dearly. Among them are commands that launch new &lt;a href=&#34;http://tldp.org/LDP/abs/html/othertypesv.html#CHILDREF2&#34;&gt;child processes&lt;/a&gt; such as &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Command-Substitution&#34;&gt;&lt;em&gt;command substitutions&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.unix.com/man-page/posix/1posix/eval&#34;&gt;&lt;em&gt;eval&lt;/em&gt; commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command Substitutions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Zsh, a command enclosed in  &lt;code&gt;$(command)&lt;/code&gt; or quoted with backticks &lt;code&gt;`command`&lt;/code&gt; will be replaced with its standard output. Thus, it is very popular in Unix/Linux world when one wants to execute a command and get the output to process further on. The bad thing is that &lt;em&gt;command substitution&lt;/em&gt; will launch a new process (i.e. a &lt;a href=&#34;http://tldp.org/LDP/abs/html/subshells.html#SUBSHELLSREF&#34;&gt;subshell&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;eval&lt;/code&gt; command&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;eval &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;arg...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The command &lt;code&gt;eval&lt;/code&gt; (sounds with &lt;em&gt;evil&lt;/em&gt;, ^_O) is part of POSIX standard and is available in most shells. It&amp;rsquo;s often used together with &lt;em&gt;command substitution&lt;/em&gt;. Essentially, &lt;code&gt;eval&lt;/code&gt; concats its arguments separated with spaces along with evaluating any variables or expressions to form a command with or without arguments. Then it executes the resulting command in the current shell. As such, &lt;code&gt;eval&lt;/code&gt; will cause side-effects as it must evaluate the inputs and perform expansions, if any.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ command&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print &amp;#39;Hello World&amp;#39;&amp;#34;&lt;/span&gt;
$ command			   &lt;span style=&#34;color:#75715e&#34;&gt;# nothing happen&lt;/span&gt;
$ eval $command
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This feature makes &lt;code&gt;eval&lt;/code&gt; powerful as it can dynamically evaluate and execute code. But dynamic evaluation also makes &lt;code&gt;eval&lt;/code&gt;  risky and time-consuming.&lt;/p&gt;
&lt;p&gt;In some cases, for instance, simple string manipulation, we can consider to replace command substitutions and &lt;code&gt;eval&lt;/code&gt; commands that invoke &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, etc., with Zsh built-in constructs or hard-coded constants. Zsh provides numerous powerful built-in mechanisms for substring matchings, string explosion/splitting, and &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Expansion.html&#34;&gt;expansions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instance, when using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, it is very convenient to get the path to an installed package using &lt;code&gt;$(brew --prefix &amp;lt;package&amp;gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;brew --prefix httpd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It turns out many calls to &lt;code&gt;$(brew --prefix ...)&lt;/code&gt; would launch many subprocesses and thus &lt;a href=&#34;https://kev.inburke.com/kevin/profiling-zsh-startup-time&#34;&gt;slow down Zsh notably&lt;/a&gt;. When replacing that &lt;code&gt;$()&lt;/code&gt; command with its actual output, I could gain certain improvement. The caveat is that some upgraded versions might break these hard-coded values.&lt;/p&gt;
&lt;h3 id=&#34;lazy-loading&#34;&gt;&lt;em&gt;Lazy-loading&lt;/em&gt; instead of &lt;em&gt;eager-loading&lt;/em&gt;&lt;/h3&gt;
&lt;h4 id=&#34;function-autoloading&#34;&gt;Function autoloading&lt;/h4&gt;
&lt;p&gt;We can define and source new functions in Zsh. In this way, a function is &lt;em&gt;eagerly loaded&lt;/em&gt; and always available for use. Note that most of these functions might be not really needed until being invoked.&lt;/p&gt;
&lt;p&gt;Zsh can help postponing their loading time and allow to &lt;em&gt;load-on-demand&lt;/em&gt; via &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Functions.html#Autoloading-Functions&#34;&gt;function autoloading&lt;/a&gt;. This technique is often called &lt;em&gt;lazy loading&lt;/em&gt;.  Performance-wise, &lt;em&gt;lazy loading&lt;/em&gt; will put less pressure to the underlying system and reduce memory footprint. The same techniques are also preferred in many other fields such as databases, dynamic runtime libraries, etc.&lt;/p&gt;
&lt;p&gt;In my codebase, I create a folder, namely, &lt;code&gt;autoloaded&lt;/code&gt;, to store functions that will be, er&amp;hellip;, autoloaded by Zsh. For each function, for instance, &lt;code&gt;function hello(){...}&lt;/code&gt;, I will create a corresponding file named &lt;code&gt;hello&lt;/code&gt; inside &lt;code&gt;autoloaded&lt;/code&gt;. The content of that file is the function body (i.e. without &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;(){}&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ mkdir autoloaded
$ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print &amp;#39;Hello World&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; autoloaded/hello
$ tree
.
└── autoloaded
    └── hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The folder &lt;code&gt;autoloaded&lt;/code&gt; must be added to ZSH variable &lt;code&gt;fpath&lt;/code&gt; where ZSH will look for function definitions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# add &amp;#39;autoload&amp;#39; to fpath&lt;/span&gt;
$ fpath&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;$fpath autoloaded&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# try to invoke &amp;#39;hello&amp;#39;&lt;/span&gt;
$ hello
zsh: command not found: hello
&lt;span style=&#34;color:#75715e&#34;&gt;# now mark `hello` for autoloading.&lt;/span&gt;
$ autoload hello
&lt;span style=&#34;color:#75715e&#34;&gt;# quickly check how `hello` will be loaded.&lt;/span&gt;
$ which hello
hello &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;# undefined&lt;/span&gt;
	builtin autoload -X
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# now it works fine&lt;/span&gt;
$ hello
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The body of &lt;code&gt;hello&lt;/code&gt; was marked with &lt;code&gt;#undefined&lt;/code&gt; along with  &lt;code&gt;builtin autoload -X&lt;/code&gt; meaning it will be loaded on-demand. The first time &lt;code&gt;hello&lt;/code&gt; is called, Zsh will automatically load and execute it.&lt;/p&gt;
&lt;p&gt;In the same way, I configured Zsh to load all of my functions on-demand to reduce memory and loading time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;!-- raw HTML omitted --&gt;In &lt;a href=&#34;https://github.com/htr3n/zsh-config&#34;&gt;my scripts&lt;/a&gt;,  &lt;code&gt;autoload -Uz function_name&lt;/code&gt; was used. The option &lt;code&gt;-U&lt;/code&gt; prevents alias from being expanded. That is, whenever you define an alias and a function having the same name, the alias will be considered first instead, so &lt;code&gt;-U&lt;/code&gt; just skips alias expansion.  And the option &lt;code&gt;-z&lt;/code&gt; indicates that the function will be auto-loaded using &lt;code&gt;zsh&lt;/code&gt; or &lt;code&gt;ksh&lt;/code&gt; style.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;loading-virtual-environments&#34;&gt;Selective- or lazy-loading virtual environments&lt;/h4&gt;
&lt;p&gt;Many virtual environment loaders like &lt;a href=&#34;https://rvm.io/&#34;&gt;rvm&lt;/a&gt;, &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt;,  &lt;a href=&#34;http://www.jenv.be&#34;&gt;jenv&lt;/a&gt;, &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;nvm&lt;/a&gt; have been developed to manage different run-time versions and libraries.   While being very handy for software development, most of these tools need to be &lt;em&gt;eagerly loaded&lt;/em&gt; (e.g. directly &lt;code&gt;source&lt;/code&gt; in &lt;code&gt;.zshrc&lt;/code&gt;) to work properly.&lt;/p&gt;
&lt;p&gt;Instead, we can consider to transform these loaders as much as possible into &lt;em&gt;on-demand&lt;/em&gt; wrapper functions. You can find a good example &lt;a href=&#34;https://peterlyons.com/problog/2018/01/zsh-lazy-loading&#34;&gt;here&lt;/a&gt;. In summary, Peter&amp;rsquo;s trick is to override &lt;code&gt;nvm&lt;/code&gt; with his own autoloaded &lt;code&gt;nvm()&lt;/code&gt; (that eventually invokes the original &lt;code&gt;nvm&lt;/code&gt; loader).  Carlos also went to same way for &lt;code&gt;rbenv&lt;/code&gt;, his own &lt;code&gt;antibody&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt; and achieved &lt;a href=&#34;https://carlosbecker.com/posts/speeding-up-zsh&#34;&gt;some good results&lt;/a&gt;. Benny C. Wong &lt;a href=&#34;http://bennycwong.github.io/post/speeding-up-oh-my-zsh/&#34;&gt;did similarly&lt;/a&gt; for both &lt;code&gt;nvm&lt;/code&gt; and &lt;code&gt;rvm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also find &lt;a href=&#34;https://frederic-hemberger.de/articles/speed-up-initial-zsh-startup-with-lazy-loading&#34;&gt;another interesting post&lt;/a&gt; by Frederic about optimising Zsh loading time by converting Kubernetes&amp;rsquo;s initialisation code into a lazy-loading function. When not using lazy-loading, you might find Adam&amp;rsquo;s &lt;a href=&#34;https://coderwall.com/p/j6cjnq/make-your-zsh-startup-faster-oh-my-zsh-and-rbenv-fixes&#34;&gt;trick&lt;/a&gt; useful for reducing  &lt;code&gt;rbenv&lt;/code&gt; time.&lt;/p&gt;
&lt;h3 id=&#34;optimising-completion-system&#34;&gt;Optimising completion system&lt;/h3&gt;
&lt;p&gt;One of the beloved Zsh&amp;rsquo;s features is its new &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html&#34;&gt;&lt;em&gt;completion system&lt;/em&gt;&lt;/a&gt;, so-called &lt;a href=&#34;https://linux.die.net/man/1/zshcompsys&#34;&gt;&lt;em&gt;zshcompsys&lt;/em&gt;&lt;/a&gt;. That is, when you type half of a certain command and press &lt;!-- raw HTML omitted --&gt;Tab&lt;!-- raw HTML omitted --&gt;, Zsh is able to show some suggestions for completing that command.&lt;/p&gt;
&lt;p&gt;Zsh does ship with some built-in support for popular commands but not for all kinds of commands. Instead, Zsh offers powerful means for defining custom completion via &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Autoloaded-files&#34;&gt;underscored-autoloaded files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Zsh completion system must be activated by calling function &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Use-of-compinit&#34;&gt;&lt;code&gt;compinit&lt;/code&gt;&lt;/a&gt;. Most of the framework like oh-my-zsh or Prezto will take care of initialising completion system. In my case, after getting rid of big frameworks, I have to manually activate it with &lt;code&gt;autoload -Uz compinit &amp;amp;&amp;amp; compinit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Every time &lt;code&gt;compinit&lt;/code&gt; is invoked, it often checks its configurations and re-generates in case of changes. Some have investigated this matter and suggested improvements such as &lt;a href=&#34;https://gist.github.com/ctechols/ca1035271ad134841284&#34;&gt;checking &lt;em&gt;compinit&lt;/em&gt;&amp;lsquo;s cache  only once a day&lt;/a&gt;. A similar approach has also been implemented in &lt;a href=&#34;https://github.com/sorin-ionescu/prezto/blob/e149367445d2bcb9faa6ada365dfd56efec39de8/modules/completion/init.zsh#L34&#34;&gt;Prezto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a simple excerpt based on &lt;a href=&#34;https://carlosbecker.com/posts/speeding-up-zsh&#34;&gt;Carlos&amp;rsquo;s solution&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;autoload -Uz compinit
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%j&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/usr/bin/stat -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%Sm&amp;#39;&lt;/span&gt; -t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%j&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ZDOTDIR&lt;span style=&#34;color:#66d9ef&#34;&gt;:-&lt;/span&gt;$HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/.zcompdump&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
  compinit
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  compinit -C
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;lessening-compinit-invocations&#34;&gt;Lessening &lt;code&gt;compinit&lt;/code&gt; invocations&lt;/h4&gt;
&lt;p&gt;When running &lt;code&gt;zprof&lt;/code&gt; to profile Zsh execution, as many others also found out, I noticed a lot of invocations to &lt;code&gt;compinit&lt;/code&gt;. It was because I used some smart plugins like &lt;a href=&#34;https://github.com/zsh-users/zsh-completions&#34;&gt;zsh-users/zsh-completions&lt;/a&gt; and &lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions&#34;&gt;zsh-users/zsh-autosuggestions&lt;/a&gt; and scattered &lt;code&gt;compinit&lt;/code&gt; in many places. Using &lt;a href=&#34;https://beyondgrep.com&#34;&gt;&lt;em&gt;ack&lt;/em&gt;&lt;/a&gt;, I could quickly spot and remove all &lt;code&gt;compinit&lt;/code&gt;, then only call once at the end of my &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zshrc&#34;&gt;.zshrc&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;compiling-completion-dumped-files&#34;&gt;Compiling completion dumped files&lt;/h4&gt;
&lt;p&gt;Note that by default &lt;code&gt;compinit&lt;/code&gt; will produce a dumped configuration for accelerating future access. The default dumped file is &lt;code&gt;.zcompdump&lt;/code&gt; (which can be changed with &lt;code&gt;compinit -d new_dump_file&lt;/code&gt; or totally disabled with &lt;code&gt;compinit -D&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We can go further by compiling the dumped file with the built-in command &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/Shell-Builtin-Commands.html#index-compilation&#34;&gt;&lt;code&gt;zcompile&lt;/code&gt; &lt;/a&gt; for faster autoloading of completion functions. As completion is only needed for interactive shell sessions, I put the &lt;code&gt;zcompile&lt;/code&gt; code inside &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/zlogin&#34;&gt;.zlogin&lt;/a&gt; and force it to run in background mode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Execute code in the background to not affect the current session&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# Compile zcompdump, if modified, to increase startup speed.&lt;/span&gt;
  zcompdump&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ZDOTDIR&lt;span style=&#34;color:#66d9ef&#34;&gt;:-&lt;/span&gt;$HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/.zcompdump&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$zcompdump&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;! -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;zcompdump&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.zwc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$zcompdump&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -nt &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;zcompdump&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.zwc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    zcompile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$zcompdump&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &amp;amp;!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;optimising-shell-prompts&#34;&gt;Optimising shell prompts&lt;/h3&gt;
&lt;p&gt;You can find a lot of frameworks or plugins offer super duper cool command line prompts like &lt;a href=&#34;http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt&#34;&gt;this&lt;/a&gt;, &lt;a href=&#34;https://denysdovhan.com/spaceship-prompt/&#34;&gt;this&lt;/a&gt;, or &lt;a href=&#34;https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config&#34;&gt;these&lt;/a&gt; that show rich information regarding your current working folder such as versioning status, virtual environments, and many more.&lt;/p&gt;
&lt;p&gt;Obviously getting these information will induce extra execution time, especially for checking large versioned repositories or virtual runtime libraries. That leads to many &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/pull/1570&#34;&gt;workarounds&lt;/a&gt;, &lt;a href=&#34;http://marc-abramowitz.com/archives/2012/04/10/fix-for-oh-my-zsh-git-svn-prompt-slowness&#34;&gt;tweaks&lt;/a&gt;, &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/pull/1570&#34;&gt;hacks&lt;/a&gt;, &lt;a href=&#34;https://github.com/creationix/nvm/issues/539&#34;&gt;other hacks&lt;/a&gt;, and more &lt;a href=&#34;https://github.com/denysdovhan/spaceship-prompt/issues/161&#34;&gt;hacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You might want to consider some recent approaches on speeding up shell prompts such as Anish&amp;rsquo;s &lt;a href=&#34;https://www.anishathalye.com/2015/02/07/an-asynchronous-shell-prompt&#34;&gt;non-blocking prompt&lt;/a&gt; or Sindre Sorhus&amp;rsquo;s &lt;a href=&#34;https://github.com/sindresorhus/pure&#34;&gt;&lt;em&gt;pure&lt;/em&gt;&lt;/a&gt; based on Mathias Fredriksson&amp;rsquo;s &lt;a href=&#34;https://github.com/mafredri/zsh-async&#34;&gt;zsh-async&lt;/a&gt;. I have tried &lt;em&gt;pure&lt;/em&gt; and found out its timing is very close to &lt;a href=&#34;https://github.com/htr3n/zsh-config/blob/master/lib/prompts-htr3n.sh&#34;&gt;my own prompts&lt;/a&gt; based on vanilla Zsh scripts and built-in function &lt;a href=&#34;http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information&#34;&gt;&lt;code&gt;vcs_info&lt;/code&gt;&lt;/a&gt;. Therefore, I mostly switch back and forth between these prompts in my dev box and totally satisfy with their performance thus far.&lt;/p&gt;
&lt;h3 id=&#34;macos-optimisations&#34;&gt;MacOS-specific optimisations&lt;/h3&gt;
&lt;h4 id=&#34;path-helper&#34;&gt;Optimising &lt;code&gt;path_helper&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;In the chain of Zsh startup order, &lt;code&gt;/etc/zprofile&lt;/code&gt; will be sourced before &lt;code&gt;~/.zprofile&lt;/code&gt;. So, macOS uses &lt;code&gt;/etc/profile&lt;/code&gt; to establish paths to executable files via &lt;a href=&#34;https://opensource.apple.com/source/shell_cmds/shell_cmds-162/path_helper/path_helper.c.auto.html&#34;&gt;&lt;em&gt;path_helper&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ cat /etc/zprofile
&lt;span style=&#34;color:#75715e&#34;&gt;# system-wide environment settings for zsh(1)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -x /usr/libexec/path_helper &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
	eval &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/usr/libexec/path_helper -s&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To do that, &lt;em&gt;path_helper&lt;/em&gt; will read &lt;code&gt;/etc/paths&lt;/code&gt; and &lt;code&gt;/etc/manpaths&lt;/code&gt;, then read all files inside &lt;code&gt;/etc/paths.d&lt;/code&gt; and &lt;code&gt;/etc/manpaths.d&lt;/code&gt; and append their contents to &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;$MANPATH&lt;/code&gt;, respectively. New paths can be conveniently added by adding a plaintext file in &lt;code&gt;/etc/paths.d&lt;/code&gt; instead of messing common shared configuration files.&lt;/p&gt;
&lt;p&gt;Previously in some cases, &lt;em&gt;path_helper&lt;/em&gt; might be very slow as mentioned by Michael Tsai &lt;a href=&#34;https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows&#34;&gt;here&lt;/a&gt; and even deserved a &lt;a href=&#34;https://gist.github.com/mkhl/123525&#34;&gt;patch&lt;/a&gt; and a &lt;a href=&#34;https://github.com/mgprot/path_helper&#34;&gt;Perl based alternative&lt;/a&gt;. I reckoned that &lt;em&gt;path_helper&lt;/em&gt; is getting notably slow when the number of paths are growing but its recent version is no longer a script but 64-bit binary executable and seems to work faster.&lt;/p&gt;
&lt;p&gt;If you notice that &lt;em&gt;path_helper&lt;/em&gt; makes Zsh slow, you can just put the contents of &lt;code&gt;/etc/paths&lt;/code&gt; and of all files in &lt;code&gt;/etc/paths.d&lt;/code&gt; directly in &lt;code&gt;.zprofile&lt;/code&gt; . After that, just comment out the corresponding code in &lt;code&gt;/etc/profile&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;optimising-login-process&#34;&gt;Optimising the login process&lt;/h4&gt;
&lt;p&gt;The default &lt;a href=&#34;https://opensource.apple.com/source/system_cmds/system_cmds-541/login.tproj&#34;&gt;&lt;em&gt;login process&lt;/em&gt;&lt;/a&gt; of macOS could be the culprit too. Opening a terminal window or tab will trigger &lt;code&gt;login -pf username&lt;/code&gt;  which, in turn, reads from and writes into the logs file in &lt;code&gt;/var/log/asl&lt;/code&gt; (note &lt;code&gt;syslog()&lt;/code&gt; invocations in &lt;a href=&#34;https://opensource.apple.com/source/system_cmds/system_cmds-541/login.tproj/login.c.auto.html&#34;&gt;&lt;code&gt;login.c&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We can check this out in any terminal app. The command &lt;code&gt;ps -ef | grep login&lt;/code&gt; will show details about the &lt;code&gt;login&lt;/code&gt; process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ps -ef | grep login
...
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25142&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25141&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  6:40AM ttys000    0:00.13 login -fp htr3n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you want to dig deeper, execute the following command in a terminal tab/window,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ sudo opensnoop | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/log/asl&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then open another tab or window to see a lot of accessing to ASLs (standing for &lt;strong&gt;A&lt;/strong&gt;pple &lt;strong&gt;S&lt;/strong&gt;ystem &lt;strong&gt;L&lt;/strong&gt;og, deprecated since macOS 10.12 but still in use somewhere).&lt;/p&gt;
&lt;p&gt;Thus, some have reported a &lt;em&gt;magic&lt;/em&gt; that somehow speeds up shell startup by &lt;a href=&#34;http://osxdaily.com/2010/05/06/speed-up-a-slow-terminal-by-clearing-log-files&#34;&gt;deleting macOS ASLs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# remove all Apple system logs -- more destructive way&lt;/span&gt;
$ sudo rm -rf /private/var/log/asl/*.asl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nevertheless, these logs will continuously grow day after day.  We might configure &lt;code&gt;/etc/asl.conf&lt;/code&gt; to permanently reduce the amount of ASLs. Using &lt;a href=&#34;https://en.wikipedia.org/wiki/sudo&#34;&gt;&lt;code&gt;sudo&lt;/code&gt;&lt;/a&gt; to open that file in Text Editor (or your editor of choice),&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ sudo open -e /etc/asl.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;then looking for the following lines and changing them accordingly and leaving the rest intact.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
# save everything from emergency to notice
# ? [&amp;lt;= Level notice] store
? [&amp;lt;= Level critical] store
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The idea is to change the log level from &lt;code&gt;notice&lt;/code&gt; to a higher level such as &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, or &lt;code&gt;critical&lt;/code&gt; (see more on &lt;em&gt;Syslog Message Severities&lt;/em&gt; in &lt;a href=&#34;https://tools.ietf.org/html/rfc5424#page-11&#34;&gt;RFC 5424&lt;/a&gt;. You might also look further in the folder &lt;code&gt;/etc/asl/&lt;/code&gt; to tinker log configurations of certain applications but that is beyond the scope of this article.&lt;/p&gt;
&lt;p&gt;Another way is to skip the process of accessing ASLs altogether. For instance, with iTerm 2, press &lt;!-- raw HTML omitted --&gt;⌘&lt;!-- raw HTML omitted --&gt; + &lt;!-- raw HTML omitted --&gt;,&lt;!-- raw HTML omitted --&gt; to open menu &lt;span class=&#34;menu&#34;&gt;Preferences&lt;/span&gt;
, then go to &lt;span class=&#34;menu&#34;&gt;Profiles ▸ General&lt;/span&gt;
.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/faster-zsh/iterm2-login.png&#34;
      
        alt=&#34;iTerm 2 login setting&#34;
        
        
        
         style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 2. iTerm 2 login setting
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;p&gt;The same way can be applied for Apple&amp;rsquo;s built-in Terminal app.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/faster-zsh/terminal-login.png&#34;
      
        alt=&#34;Built-in Terminal login setting&#34;
        
        
        
         style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 3. Built-in Terminal login setting
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have walked through some major aspects that might affect Zsh in particular, and other shells, loading time. I hope these discussions can help you to pinpoint and address your shell startup issues and have better experience working with shells and command line. This is what I got after all these effort.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;❯ &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 5&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; /usr/bin/time /bin/zsh -i -c exit; &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
        0.31 real         0.16 user         0.13 sys
        0.28 real         0.15 user         0.12 sys
        0.28 real         0.15 user         0.12 sys
        0.28 real         0.15 user         0.12 sys
        0.28 real         0.15 user         0.12 sys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have any suggestions for improvement or successful tweaks, please drop a comment below.&lt;/p&gt;
&lt;h2 id=&#34;reading-list&#34;&gt;Reading List&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://kev.inburke.com/kevin/profiling-zsh-startup-time&#34;&gt;https://kev.inburke.com/kevin/profiling-zsh-startup-time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://esham.io/2018/02/zsh-profiling&#34;&gt;https://esham.io/2018/02/zsh-profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://carlosbecker.com/posts/speeding-up-zsh&#34;&gt;https://carlosbecker.com/posts/speeding-up-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/issues/5327&#34;&gt;https://github.com/robbyrussell/oh-my-zsh/issues/5327&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coderwall.com/p/sladaq/faster-zsh-in-large-git-repository&#34;&gt;https://coderwall.com/p/sladaq/faster-zsh-in-large-git-repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ahmadnazir.github.io/posts/2016-11-03-load-shell-faster/post.html&#34;&gt;https://ahmadnazir.github.io/posts/2016-11-03-load-shell-faster/post.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/a/47856/82870&#34;&gt;https://superuser.com/a/47856/82870&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;https://github.com/robbyrussell/oh-my-zsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sorin-ionescu/prezto&#34;&gt;https://github.com/sorin-ionescu/prezto&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>A mininal Hugo blogging workflow</title>
        <link>https://blog.test:8443/2018/07/minimal-hugo-workflow/</link>
        <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
        
        <guid>4c4e42a67e093dee36cdd6bfb01ab387</guid>
        <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; is a blazingly fast static site generator based on &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;. My &lt;a href=&#34;https://blog.test:8443/2018/01/first-experience-with-hugo/&#34;&gt;first experience with Hugo&lt;/a&gt; was truly pleasant. I appreciate the separation of contents, presentations, and site generation logics in Hugo  that leads to less effort for maintenance or switching themes.&lt;/p&gt;
&lt;p&gt;On the run-time side, it&amp;rsquo;s also nice that Hugo is often delivered as a reasonably fat executable binary (about 30~50 MB). We almost do not have to install anything else to make it work (although this is not entirely true since Hugo 0.43+).&lt;/p&gt;
&lt;p&gt;Using Hugo to &lt;a href=&#34;https://github.com/htr3n/htr3n-blog&#34;&gt;build&lt;/a&gt; this blog, I have learned a lot of things and tried to set up a simple blogging workflow to automate as much as possible the process from writing articles and altering themes to generating sites and watching for changes. My Hugo based blogging workflow comprises three aspects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Content&lt;/em&gt; (mainly Markdown)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Presentation&lt;/em&gt; (theming)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Site generation&lt;/em&gt; (Hugo)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will take &lt;a href=&#34;https://github.com/htr3n/htr3n-blog&#34;&gt;my own Hugo blogging project&lt;/a&gt; as an illustrative example. An overview of the project structure is shown in the picture below.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/minimal-hugo-workflow/project-structure.png&#34;
      
        alt=&#34;A simple Hugo project structure&#34;
        
        
        
         style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 1. A simple Hugo project structure
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;Some relevant project resources:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assets&lt;/code&gt;: my pre-processing resources (e.g. SASS, LESS, images, JavaScript).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt;: Markdown contents&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;: the Web sites generated by Hugo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;: resources (e.g. CSS, images, JavaScript) to be copied directly to &lt;code&gt;public&lt;/code&gt; by Hugo.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes&lt;/code&gt;: Hugo themes (here I use my own theme &lt;a href=&#34;https://github.com/htr3n/hyde-hyde&#34;&gt;&lt;em&gt;hyde-hyde&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;: Node.js / NPM main configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulpfile.js&lt;/code&gt;: Gulp configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;content&#34;&gt;Content&lt;/h2&gt;
&lt;p&gt;Among many nice features, Hugo supports Markdown contents out-of-the-box. Thus I can keep writing blog posts with my favourite Markdown editors. I have tried a number of editors in macOS, ranging from simple plain text with preview add-ons like &lt;a href=&#34;https://www.sublimetext.com&#34;&gt;Sublime Text&lt;/a&gt;, &lt;a href=&#34;https://macromates.com&#34;&gt;TextMate&lt;/a&gt;, &lt;a href=&#34;https://atom.io&#34;&gt;Atom&lt;/a&gt;, &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&#34;https://www.vim.org&#34;&gt;Vim&lt;/a&gt; to some built-in ones like &lt;a href=&#34;http://www.bear-writer.com&#34;&gt;Bear&lt;/a&gt;, &lt;a href=&#34;https://bywordapp.com&#34;&gt;Byword&lt;/a&gt;, &lt;a href=&#34;http://macdown.uranusjr.com&#34;&gt;MacDown&lt;/a&gt;, &lt;a href=&#34;http://mouapp.com&#34;&gt;Mou&lt;/a&gt;, &lt;a href=&#34;http://www.texts.io&#34;&gt;Texts&lt;/a&gt;, &lt;a href=&#34;https://ia.net/writer&#34;&gt;IA Writer&lt;/a&gt;, &lt;a href=&#34;http://marked2app.com&#34;&gt;Marked&lt;/a&gt; (only preview), &lt;a href=&#34;https://typora.io&#34;&gt;Typora&lt;/a&gt;, to name but by no means completed. You can see &lt;a href=&#34;https://github.com/mundimark/awesome-markdown-editors&#34;&gt;here&lt;/a&gt; a list including most of Markdown editors available and &lt;a href=&#34;https://www.sitepoint.com/the-best-markdown-editors-for-mac&#34;&gt;here&lt;/a&gt; are some for macOS.&lt;/p&gt;
&lt;p&gt;My first editor was Mou, due to its simplicity and highly customisable themes and rendering styles. Later on Mou&amp;rsquo;s developer decided to sell its ownership, then resumed working on its beta making the software status a bit unclear and frustrated. &lt;a href=&#34;https://uranusjr.com&#34;&gt;Tzu-ping Chung&lt;/a&gt; (@&lt;a href=&#34;https://github.com/uranusjr&#34;&gt;uranusjr&lt;/a&gt;) has created a similar editor, namely, &lt;a href=&#34;http://macdown.uranusjr.com&#34;&gt;MacDown&lt;/a&gt;, and &lt;a href=&#34;https://github.com/MacDownApp/macdown&#34;&gt;open-sourced it&lt;/a&gt;. Then I started using MacDown with the existing Mou&amp;rsquo;s themes and styles.&lt;/p&gt;
&lt;p&gt;I could not remember exactly when and how I found &lt;a href=&#34;https://typora.io&#34;&gt;Typora&lt;/a&gt; but it never ceases to amaze me. With Typora, I can enjoy seamless editing and rendering in the same window, i.e., I can write Markdown normally and directly see the content rendered. Typora is still free in its beta phase and will become paid software when released. It has become my Markdown editor of choice and will be in future should its price tag is reasonable. For quick fixes, I use any editors at hand, for instance Visual Studio Code when working on a Hugo project.&lt;/p&gt;
&lt;h2 id=&#34;presentation&#34;&gt;Presentation&lt;/h2&gt;
&lt;p&gt;The nice thing is that a Hugo theme is a standalone component for decorating Hugo generated sites. Nevertheless, I can override a theme&amp;rsquo;s settings (e.g. layouts, styles) with my own versions with respect to &lt;a href=&#34;https://gohugo.io/templates/lookup-order&#34;&gt;Hugo lookup order&lt;/a&gt;. A theme contains resources for templating, layouting, and styling. Hugo&amp;rsquo;s templating and layouting have been discussed a lot around. Styling resources in a typical Hugo project can be found inside its theme&amp;rsquo;s &lt;code&gt;static&lt;/code&gt; or the project root&amp;rsquo;s &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I used to work with CSS styles. After learning more about CSS preprocessors and attracted by the abstraction levels and tooling they provide, I decide to give a try and refactored my existing codebase to SCSS. Hence, my workflow should include support for SCSS  (you might opt for LESS or Stylus but still can leverage a similar workflow with just right processing components).&lt;/p&gt;
&lt;h2 id=&#34;site-generation&#34;&gt;Site Generation&lt;/h2&gt;
&lt;p&gt;Hugo will be main element that generates the final Web site taking input resources from content and presentation components. Until version 0.43, Hugo has not provided support for SASS. Hence, many have to develop their own  &lt;a href=&#34;https://blog.carlmjohnson.net/post/2017/hugo-asset-pipeline&#34;&gt;&#39;&lt;em&gt;asset pipeline&lt;/em&gt;&#39;&lt;/a&gt;, i.e., incorporating preprocessors and post-processors with Hugo generation process.&lt;/p&gt;
&lt;h3 id=&#34;endogenous-pipeline&#34;&gt;Endogenous Pipeline&lt;/h3&gt;
&lt;p&gt;This approach, also called &lt;em&gt;in-line pipeline&lt;/em&gt;, only works since Hugo &lt;a href=&#34;https://gohugo.io/news/0.43-relnotes&#34;&gt;v0.43/extended&lt;/a&gt; and later that supports processing SASS/CSS with consideration for &lt;a href=&#34;https://en.wikipedia.org/wiki/Minification_%28programming%29&#34;&gt;minification&lt;/a&gt;, post-processing, and &lt;a href=&#34;https://www.keycdn.com/support/what-is-cache-busting&#34;&gt;cache busting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Hugo templates, I can refer to SCSS files via &lt;a href=&#34;https://gohugo.io/content-management/page-resources&#34;&gt;&lt;em&gt;page resources&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ $styles := resources.Get &amp;#34;scss/hyde-hyde.scss&amp;#34; | toCSS | postCSS (dict &amp;#34;use&amp;#34; &amp;#34;autoprefixer&amp;#34;) | minify | fingerprint }}
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ $styles.Permalink }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ $styles.Data.Integrity }}&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that Hugo will look for &lt;code&gt;scss/hyde-hyde.scss&lt;/code&gt; in the project&amp;rsquo;s root and then the theme&amp;rsquo;s root, in that order.&lt;/p&gt;
&lt;p&gt;Hugo retrieves the resource &lt;code&gt;hyde-hyde.scss&lt;/code&gt;  using &lt;code&gt;Resources.Get&lt;/code&gt;, then &lt;a href=&#34;https://gohugo.io/hugo-pipes/scss-sass&#34;&gt;transforms it&lt;/a&gt; into &lt;code&gt;hyde-hyde.css&lt;/code&gt; and passes it to &lt;a href=&#34;https://gohugo.io/hugo-pipes/postcss&#34;&gt;PostCSS&lt;/a&gt; for &lt;a href=&#34;https://github.com/postcss/autoprefixer&#34;&gt;autoprefixing&lt;/a&gt;. After that, it &lt;a href=&#34;https://gohugo.io/hugo-pipes/minification/&#34;&gt;minifies&lt;/a&gt; the CSS and generates a &lt;em&gt;fingerprinted version&lt;/em&gt;.  The second line simply links the resulting &lt;code&gt;hyde-hyde.css&lt;/code&gt; with HTML via the variable &lt;code&gt;$style&lt;/code&gt;. The result in the generated HTML will be like this (note that the code can be different to yours).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:1313/scss/hyde-hyde.4ff234ab46aa5302c7e0d2f35b9c76a8bba9fe42a9e8a6c7c47df7f85b8de122.css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha256-T/I0q0aqUwLH4NLzW5x2qLup/kKp6KbHxH33&amp;amp;#43;FuN4SI=&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The fingerprint code is for &lt;em&gt;cache busting&lt;/em&gt; and only changed when the source file is altered.&lt;/p&gt;
&lt;p&gt;The biggest advantage of &lt;em&gt;in-line pipeline&lt;/em&gt; is that Hugo already provides a certain level of built-in support. Hugo&amp;rsquo;s &lt;em&gt;live reload&lt;/em&gt;, i.e. serving the resulting sites live and automatically refreshing whenever there are changes of contents or themes, also works superbly for this case.&lt;/p&gt;
&lt;p&gt;For many scenarios, we can use this approach instead of configuring complex tools like Gulp, Grunt, or Webpack. To be precise, I do need to install extra tools, which are &lt;code&gt;postcss-cli&lt;/code&gt; and &lt;code&gt;autoprefixer&lt;/code&gt;, for the aforementioned example to work and Hugo 0.43 extended version &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/issues/29898&#34;&gt;partially depends on Cgo/libc++&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ npm i -g postcss-cli autoprefixer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another downside to consider is that, in this way, external tools like &lt;code&gt;postcss&lt;/code&gt; will slow down Hugo.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As I checked out &lt;a href=&#34;https://discourse.gohugo.io/t/how-to-use-source-maps-with-hugo-0-43/12826&#34;&gt;this thread&lt;/a&gt; and &lt;a href=&#34;https://discourse.gohugo.io/t/how-to-use-source-maps-with-hugo-0-43/12826/9&#34;&gt;tried on my project&lt;/a&gt;, Hugo&amp;rsquo;s extensions like &lt;code&gt;postCSS&lt;/code&gt;, &lt;code&gt;minify&lt;/code&gt;, and &lt;code&gt;fingerprint&lt;/code&gt; could mess up CSS sourcemaps. If you need sourcemaps for developing and debugging, please ignore them and consider the &lt;em&gt;exogenous pipeline&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;exogenous-pipeline&#34;&gt;Exogenous Pipeline&lt;/h3&gt;
&lt;p&gt;When working on more complex asset pipelining, we have to involve external tools to build an &lt;em&gt;exogenous asset pipeline&lt;/em&gt;. This is also my blogging workflow before Hugo v0.43. Now, I can mostly get rid of this &lt;em&gt;exogenous pipeline&lt;/em&gt;. Here we will walk through this approach merely for the sake of completeness.&lt;/p&gt;
&lt;p&gt;There are several ways to handle Web resources. For instance, Netlify provides  a boilerplate project, namely, &lt;a href=&#34;https://github.com/netlify/victor-hugo&#34;&gt;&lt;em&gt;victor-hugo&lt;/em&gt;&lt;/a&gt; for starting a new Hugo project and preparing to deploy to its hosting. This boilerplate employs &lt;a href=&#34;https://gulpjs.com&#34;&gt;Gulp&lt;/a&gt;, &lt;a href=&#34;https://webpack.js.org&#34;&gt;Webpack&lt;/a&gt;, &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;PostCSS&lt;/a&gt;, and &lt;a href=&#34;https://browsersync.io&#34;&gt;Browsersync&lt;/a&gt; around Hugo. There are many developers rooting for Gulp &lt;a href=&#34;(#references)&#34;&gt;[1, 2, 3, 4, 5]&lt;/a&gt; whilst some others go for Grunt &lt;a href=&#34;(#references)&#34;&gt;[6]&lt;/a&gt; or Webpack &lt;a href=&#34;#references&#34;&gt;[7, 8]&lt;/a&gt;. And even few brave ones use &lt;a href=&#34;http://thecodestead.com/post/how-to-use-npm-as-a-build-tool-with-hugo&#34;&gt;pure NPM&lt;/a&gt; &lt;a href=&#34;#references&#34;&gt;[9, 10]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For starter projects with Hugo, you might want to consider some useful projects such as &lt;a href=&#34;https://github.com/jbrodriguez/hugulp&#34;&gt;hugulp&lt;/a&gt;, &lt;a href=&#34;http://ktmud.github.io/huggle/en/intro&#34;&gt;Huggle&lt;/a&gt;, &lt;a href=&#34;https://github.com/vseventer/hugo-webpack-boilerplate&#34;&gt;hugo-webpack-boilerplate&lt;/a&gt;. In my project, I combine Gulp with NPM and leverage some Gulp&amp;rsquo;s components for the asset pipeline.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;SASS/SCSS to CSS&lt;/em&gt;: a sensible choice is &lt;a href=&#34;https://www.npmjs.com/package/gulp-sass&#34;&gt;&lt;em&gt;gulp-sass&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sourcemaps&lt;/em&gt; (optional): this is not mandatory but very handy for developing and debugging phase. I pick &lt;a href=&#34;https://www.npmjs.com/package/gulp-sourcemaps&#34;&gt;&lt;em&gt;gulp-sourcemaps&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Autoprefixing&lt;/em&gt;: it helps adding vendor-specific prefixes to CSS rules. We can use &lt;a href=&#34;https://www.npmjs.com/package/gulp-autoprefixer&#34;&gt;&lt;em&gt;gulp-autoprefixer&lt;/em&gt;&lt;/a&gt; but be careful to combine with &lt;em&gt;gulp-sourcemaps&lt;/em&gt; as it is &lt;a href=&#34;https://github.com/gulp-sourcemaps/gulp-sourcemaps/wiki/Plugins-with-gulp-sourcemaps-support#css&#34;&gt;currently broken&lt;/a&gt;. I decide to use &lt;a href=&#34;https://www.npmjs.org/package/gulp-postcss&#34;&gt;&lt;em&gt;gulp-postcss&lt;/em&gt;&lt;/a&gt; along with &lt;a href=&#34;https://www.npmjs.com/package/autoprefixer&#34;&gt;&lt;em&gt;postcss-autoprefixer&lt;/em&gt;&lt;/a&gt; instead.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Minification&lt;/em&gt;: &lt;a href=&#34;https://github.com/postcss/postcss&#34;&gt;PostCSS&lt;/a&gt; provides many plugins for CSS post-processing alongside &lt;em&gt;autoprefixer&lt;/em&gt;.  I choose &lt;a href=&#34;http://cssnano.co&#34;&gt;&lt;em&gt;cssnano&lt;/em&gt;&lt;/a&gt; to minify the CSSs.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ npm i -D gulp@next gulp-sass gulp-postcss autoprefixer gulp-sourcemaps cssnano
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the same way, you can add more components to the list. Here I rather keep it short and simple for illustrative purpose. Now I start configuring Gulp to use them in my project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sass&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp-sass&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postcss&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp-postcss&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;autoprefixer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;autoprefixer&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cssnano&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cssnano&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sourcemaps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gulp-sourcemaps&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fancy-log&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sassSourceFile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;assets/scss/hyde-hyde.scss&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outputFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;static/css&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;watchedResources&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;assets/scss/**/*&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scss&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sassSourceFile&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sourcemaps&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;())
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sass&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;){
      &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;);
    }))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;postcss&lt;/span&gt;([&lt;span style=&#34;color:#a6e22e&#34;&gt;autoprefixer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cssnano&lt;/span&gt;]))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sourcemaps&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;outputFolder&lt;/span&gt;))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;);
});

&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;series&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scss&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;watch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;watchedResources&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;parallel&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scss&amp;#39;&lt;/span&gt;));
  &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;();
}));

&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;series&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; () {}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the syntax is Gulp v4.0.&lt;/p&gt;
&lt;p&gt;Now I just simply invoke Gulp to trigger its chaining pipeline.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ gulp
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10:23:40&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Using gulpfile ~/working/dev/htr3n-blog/gulpfile.js
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10:23:40&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10:23:40&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10:23:40&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scss&amp;#39;&lt;/span&gt;...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10:23:40&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Finished &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scss&amp;#39;&lt;/span&gt; after &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; ms
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10:23:40&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Starting &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;anonymous&amp;gt;&amp;#39;&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Gulp will transform &lt;code&gt;hyde-hyde.scss&lt;/code&gt; into &lt;code&gt;hyde-hyde.css&lt;/code&gt;  which is autoprefixed and saved in &lt;code&gt;static/css&lt;/code&gt; along with its sourcemaps. In the Hugo templates, I refer to &lt;code&gt;hyde-hyde.css&lt;/code&gt; normally.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Site.BaseURL }}/css/hyde-hyde.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can combine &lt;a href=&#34;https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglobs-opts-fn&#34;&gt;Gulp.watch()&lt;/a&gt; with Hugo&amp;rsquo;s &lt;em&gt;live reload&lt;/em&gt; feature so that both will continuously monitors for changes and serve them instantly. This way, whenever I made any changes in a post in Typora, a SCSS/CSS file, or Go+HTML layout, I will instantly see the generated HTMLs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ hugo server -w --cleanDestinationDir
                   | EN
+------------------+-----+
  Pages            | &lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;
  Paginator pages  |   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  Non-page files   |  &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
  Static files     |  &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
  Processed images |   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  Aliases          |   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  Sitemaps         |   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  Cleaned          |   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

Total in &lt;span style=&#34;color:#ae81ff&#34;&gt;193&lt;/span&gt; ms
Watching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; changes in /Users/htr3n/working/dev/htr3n-blog/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;assets,content,data,layouts,static,themes&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
Watching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; config changes in /Users/htr3n/working/dev/htr3n-blog/config.toml
Serving pages from memory
Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
Web Server is available at http://localhost:1313/ &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bind address 127.0.0.1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that, by default, Hugo will only keep watching the following folders  &lt;code&gt;{assets, content, data, layouts, static, themes}&lt;/code&gt;. Hence, our SCSS files might not be in one of these folders but we must ensure the resources generated from Gulp are. As I illustrated &lt;em&gt;endogenous pipeline&lt;/em&gt; above, my SCSSs are kept in &lt;code&gt;assets&lt;/code&gt; such that Hugo &lt;code&gt;Resources.Get&lt;/code&gt; can find them. If you opt for &lt;em&gt;exogenous pipeline&lt;/em&gt;, you should put the preprocessing resources elsewhere.&lt;/p&gt;
&lt;p&gt;After all, we can open the browser to &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; and enjoy the experience of live editing side-by-side.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/07/minimal-hugo-workflow/side-by-side.png&#34;
      
        alt=&#34;Typora (left) and the generated HTML pages (right)&#34;
        
        
        
        width=&#34;99%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 2. Typora (left) and the generated HTML pages (right)
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;p&gt;At this point, we seem to miss &lt;em&gt;cache busting&lt;/em&gt; which is provided in the &lt;em&gt;endogenous pipeline&lt;/em&gt; with Hugo. That is also the biggest advantage of using external tools as we need to establish the connections between Hugo generated resources and Gulp&amp;rsquo;s manipulated resources on our own.&lt;/p&gt;
&lt;p&gt;It is a tad complicated as you can find &lt;a href=&#34;https://byteplumbing.net/2017/08/static-asset-cache-busting-for-hugo&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://blog.carlmjohnson.net/post/2017/hugo-asset-pipeline/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://danbahrami.io/articles/building-a-production-website-with-hugo-and-gulp-js&#34;&gt;here&lt;/a&gt;. In summary, the idea is to generate &lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_function&#34;&gt;&lt;em&gt;hash signatures&lt;/em&gt;&lt;/a&gt; for your CSSs, for instance, using &lt;a href=&#34;https://en.wikipedia.org/wiki/MD5&#34;&gt;MD5&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Hash_Algorithms&#34;&gt;SHA&lt;/a&gt;, store the relevant data as dictionary &lt;a href=&#34;https://en.wikipedia.org/wiki/Key-value_database&#34;&gt;key-value&lt;/a&gt; pairs, e.g. &lt;code&gt;&#39;hyde-hyde.css&#39; =&amp;gt; &#39;hyde-hyde.the-latest-hash-number.css&#39;&lt;/code&gt;,
then use Hugo’s &lt;a href=&#34;https://gohugo.io/templates/data-templates/&#34;&gt;data templates&lt;/a&gt; feature to refer to those pairs. This approach has actually been implemented in the aforementioned Hugo&amp;rsquo;s extensions.&lt;/p&gt;
&lt;p&gt;In case you really need &lt;em&gt;cache busting&lt;/em&gt;, we can utilise Hugo v0.43 extensions to complement Gulp on this matter (🐵). We just modify the Gulp configuration a bit so that the output folder is no longer &lt;code&gt;static&lt;/code&gt; but &lt;code&gt;assets/css&lt;/code&gt; as Hugo&amp;rsquo;s &lt;code&gt;Resources.Get&lt;/code&gt; rather strictly looks for resources in &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outputFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;assets/css&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in the HTML, we use similar templates without &lt;code&gt;toCSS&lt;/code&gt; and &lt;code&gt;postCSS&lt;/code&gt; that are done with Gulp.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ $styles := resources.Get &amp;#34;css/hyde-hyde.css&amp;#34; | minify | fingerprint }}
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ $styles.Permalink }}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ $styles.Data.Integrity }}&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It seems Gulp becomes redundant here as Hugo can perform &lt;code&gt;toCSS&lt;/code&gt;, &lt;code&gt;postCSS&lt;/code&gt;, and &lt;code&gt;minify&lt;/code&gt; just fine. Nonetheless, in case you need other functionalities that are not yet provided by Hugo, Gulp will be what you should ask for. Besides, as per &lt;strong&gt;Note&lt;/strong&gt; above, there are still some issues with Hugo&amp;rsquo;s extension regarding sourcemaps whilst Gulp&amp;rsquo;s asset pipeline above works flawlessly.&lt;/p&gt;
&lt;h4 id=&#34;more-automation-please&#34;&gt;More automation, please!!!&lt;/h4&gt;
&lt;p&gt;There are still two manual tasks for the &lt;em&gt;exogenous pipeline&lt;/em&gt;, one for invoking Gulp and another one to start Hugo. Aiming to automate the workflow as much as possible, we can merge two tasks using one execution script, via NPM.&lt;/p&gt;
&lt;p&gt;There are a number of options for running tasks concurrently in NPM including &lt;a href=&#34;https://www.npmjs.com/package/npm-run-all&#34;&gt;npm-run-all&lt;/a&gt;, &lt;a href=&#34;https://www.npmjs.com/package/npm-run-parallel&#34;&gt;npm-run-parallel&lt;/a&gt;, &lt;a href=&#34;https://www.npmjs.com/package/concurrently&#34;&gt;concurrently&lt;/a&gt;, or using &lt;a href=&#34;https://en.wikipedia.org/wiki/Background_process&#34;&gt;background process&lt;/a&gt; if you are using Linux/macOS alike. Even Gulp also has some helper plugins like &lt;a href=&#34;https://www.npmjs.com/package/gulp-exec&#34;&gt;gulp-exec&lt;/a&gt; to execute child processes, &lt;a href=&#34;https://www.npmjs.com/package/gulp-nodemon&#34;&gt;gulp-nodemon&lt;/a&gt; to run in &lt;a href=&#34;https://en.wikipedia.org/wiki/Daemon_%28computing%29&#34;&gt;daemon mode&lt;/a&gt;,  and Gulp 4.0+ has &lt;a href=&#34;https://github.com/gulpjs/gulp/blob/4.0/docs/API.md#gulpparalleltasks&#34;&gt;Gulp.parallel()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider a simple example with &lt;a href=&#34;https://www.npmjs.com/package/npm-run-all&#34;&gt;npm-run-all&lt;/a&gt;. Other tools can be used similarly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ npm i -D npm-run-all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then define some simple scripts in &lt;code&gt;package.json&lt;/code&gt; for executing Gulp and Hugo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scss-build&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gulp scss&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scss-watch&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gulp watch&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;hugo-watch&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hugo server -w --buildDrafts --cleanDestinationDir&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dev&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;npm-run-all --parallel scss-watch hugo-watch&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;autoprefixer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^9.0.0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cssnano&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^4.0.3&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gulp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^4.0.0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gulp-postcss&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^7.0.1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gulp-sass&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^4.0.1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;gulp-sourcemaps&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^2.6.4&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;npm-run-all&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^4.1.3&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given no issues, we should execute &lt;code&gt;npm run dev&lt;/code&gt; and see both Hugo and Gulp running in parallel.&lt;/p&gt;
&lt;h2 id=&#34;further-optimisations&#34;&gt;Further Optimisations&lt;/h2&gt;
&lt;p&gt;As you might have noticed, the Web resources (e.g. HTML, CSS) generated by Hugo may contain a lot of whitespace and/or line-breaks. You can easily see this when viewing the source code of the generated Web pages.&lt;/p&gt;
&lt;p&gt;During the developing phase in my local machines, I always keep the generated resources untouched so that I can read the code for debugging or analysing. When deploying to hosting servers, we don&amp;rsquo;t often preserve the readability of the source code as the end-users mainly see and interact with the beautiful pages rendered by Web browsers.&lt;/p&gt;
&lt;p&gt;Therefore, I configure a simple Gulp task to optimise the generated Web resources before pushing them to the servers. What I need is &lt;a href=&#34;https://www.npmjs.com/package/gulp-htmlmin&#34;&gt;&lt;code&gt;gulp-htmlmin&lt;/code&gt;&lt;/a&gt;&amp;mdash;a Gulp front-end of &lt;a href=&#34;https://github.com/kangax/html-minifier&#34;&gt;&lt;em&gt;html-minifier&lt;/em&gt;&lt;/a&gt;. Please refer to &lt;em&gt;html-minifier&lt;/em&gt;&amp;lsquo;s &lt;a href=&#34;https://github.com/kangax/html-minifier&#34;&gt;documentations&lt;/a&gt; should you need to learn further about its options.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ npm i -D gulp-htmlmin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And I create a simple Gulp task for minifying Web resources that can be invoked at command line as &lt;code&gt;gulp minify-html&lt;/code&gt;. This task should be performed after calling Hugo to generate the Web pages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htmlmin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gulp-htmlmin&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;task&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;minify-html&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;publicFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./public&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;publicFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/**/*.html&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;publicFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/**/*.css&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;publicFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/**/*.js&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./dist&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Minifying HTML/CSS/JS in &amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;publicFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39; to &amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;publicFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/**&amp;#34;&lt;/span&gt;)
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;));
  &lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;([&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;js&lt;/span&gt;])
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;htmlmin&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;collapseWhitespace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; }))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gulp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;))
    .&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main idea is to use &lt;code&gt;gulp-htmlmin&lt;/code&gt; to minify HTMLs, JavaScripts, and CSSs whilst leaving others intact. Note that the place of the optimised resources is the folder &lt;code&gt;dist&lt;/code&gt; inside Hugo project.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://markus.oberlehner.net/blog/using-gulp-and-uncss-in-combination-with-sass-based-hugo-themes&#34;&gt;https://markus.oberlehner.net/blog/using-gulp-and-uncss-in-combination-with-sass-based-hugo-themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://danbahrami.io/articles/building-a-production-website-with-hugo-and-gulp-js&#34;&gt;http://danbahrami.io/articles/building-a-production-website-with-hugo-and-gulp-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devotter.com/blog/using-gulp-with-hugo&#34;&gt;https://devotter.com/blog/using-gulp-with-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adamwills.io/blog/discovering-hugo-2-workflow&#34;&gt;https://adamwills.io/blog/discovering-hugo-2-workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sagarganatra.com/2016/12/building-your-static-site-with-hugo.html&#34;&gt;http://www.sagarganatra.com/2016/12/building-your-static-site-with-hugo.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tjm.io/grunt-hugo&#34;&gt;http://tjm.io/grunt-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://byteplumbing.net/2017/08/static-asset-cache-busting-for-hugo&#34;&gt;https://byteplumbing.net/2017/08/static-asset-cache-busting-for-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tomodwyer.com/post/2017-10-22-hugo---webpack--%EF%B8%8F/&#34;&gt;https://tomodwyer.com/post/2017-10-22-hugo---webpack--%EF%B8%8F/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thecodestead.com/post/how-to-use-npm-as-a-build-tool-with-hugo&#34;&gt;http://thecodestead.com/post/how-to-use-npm-as-a-build-tool-with-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog&#34;&gt;https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>Bootstrapping macOS workspace</title>
        <link>https://blog.test:8443/2018/06/bootstrapping-macos-workspace/</link>
        <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
        
        <guid>fa741ad6c34ecbf5d587e1e64c202dd6</guid>
        <description>&lt;p&gt;I have experienced a number of different Mac systems, ranging from the old white MacBook 2006 to iMac and MacMini 2010 and lately MacBook Pro 13&amp;rdquo; and 15&amp;rdquo;. From time to time, Time Machine has become extremely handy for transferring my data from the old to the new machine.&lt;/p&gt;
&lt;p&gt;Nevertheless, a lot of changes, mostly for software development, have often been ignored or reset to the default values. As a result, I often find myself searching around over and over for some desirable settings. Thus, this post is kind of a note-to-self on few useful tweaks for my development box so that I can easily reach out later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: As it turned out that the tweaks and configurations were getting longer and became tedious to follow, I split them into two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#system-tweak-and-configs&#34;&gt;Part 1: System tweaks and configurations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dev-tools-and-configs&#34;&gt;Part 2: Development tools and configurations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;system-tweak-and-configs&#34;&gt;Part 1: System tweaks and configurations&lt;/h2&gt;
&lt;h3 id=&#34;disable-sip&#34;&gt;Disable System Integrity Protection (SIP)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://support.apple.com/en-us/ht204899&#34;&gt;System Integration Protection&lt;/a&gt; (SIP) is a security technology since OS X El Capitan 10.11 aiming at protecting certain system files and folders against malicious software. SIP even limits the access and actions of the root user account on protected parts of OS X. Unfortunately, the folder  &lt;code&gt;/usr/local&lt;/code&gt; needed for installing many development tools and utilities is under protection as well. That makes a lot of tools like &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; fail to install. We can easily check SIP&amp;rsquo;s current status.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ csrutil status
System Integrity Protection status: enabled.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The tweak I always do right after installing or recovering a Mac is to disable SIP. Just (re)start macOS in &lt;em&gt;Recovery Mode&lt;/em&gt; (restarting or turning on your Mac and immediately pressing &lt;!-- raw HTML omitted --&gt;⌘&lt;!-- raw HTML omitted --&gt; + &lt;!-- raw HTML omitted --&gt;R&lt;!-- raw HTML omitted --&gt;&amp;mdash;shortcut to remember &lt;!-- raw HTML omitted --&gt;R&lt;!-- raw HTML omitted --&gt; for &amp;lsquo;__R__ecovery&amp;rsquo;&amp;mdash;and wait until macOS boots into its recovery mode. Then open menu &lt;span class=&#34;menu&#34;&gt;Utility ▸ Terminal&lt;/span&gt;
 and execute the following commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ csrutil disable
$ reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Your Mac will reboot and get back to the normal working mode. You can verify SIP status again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ csrutil status
System Integrity Protection status: disabled.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;disable-gatekeeper&#34;&gt;Disable Gatekeeper&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Gatekeeper&lt;/em&gt; was first introduced in OS X Mountain Lion. It is a security feature that prevents the users from launching potentially harmful apps.&lt;/p&gt;
&lt;p&gt;From macOS Sierra and later, however, Apple made Gatekeeper even more restricted. Normal users would see only two choices in &lt;em&gt;System Preferences&lt;/em&gt; &amp;ndash;&amp;gt; &lt;em&gt;Security &amp;amp; Privacy&lt;/em&gt; that &amp;ldquo;&lt;em&gt;Allow apps downloaded from&lt;/em&gt;&amp;rdquo; either &amp;ldquo;&lt;em&gt;App Store&lt;/em&gt;&amp;rdquo; or &amp;ldquo;&lt;em&gt;App Store and identified developers&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;That means only signed apps are allowed to launch, i.e. breaking a lot of useful unsigned apps whose developers cannot afford to pay US$99 yearly membership for &lt;em&gt;Apple Developer Program&lt;/em&gt;.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/06/bootstrapping-macos-workspace/enabled-gatekeeper.png&#34;
      
        alt=&#34;Enabled Gatekeeper&#34;
        
        align=&#34;center&#34;
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 1. Enabled Gatekeeper
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;p&gt;We can circumvent that by disabling Gatekeeper. You do not have to restart macOS but only executing the following command &lt;code&gt;sudo spctl --master-disable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, you will be able to see Gatekeeper being disabled.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/06/bootstrapping-macos-workspace/disabled-gatekeeper.png&#34;
      
        alt=&#34;Disabled Gatekeeper&#34;
        
        align=&#34;center&#34;
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 2. Disabled Gatekeeper
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;p&gt;Naturally Gatekeeper can be re-enabled at any time with &lt;code&gt;sudo spctl --master-enable&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;reveal-library&#34;&gt;Revealing &amp;lsquo;~/Library&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;In macOS, the folder &amp;lsquo;&lt;em&gt;~/Library&lt;/em&gt;&amp;rsquo; within users home folder is hidden (since 10.7!?) seemingly to prevent any unintentional changes. It&amp;rsquo;s not so difficult to navigate to this folder (and any other folders) using command line. In case you want to use Finder to navigate and explore &amp;lsquo;&lt;em&gt;~/Library&lt;/em&gt;&#39;, we can simply use the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ chflags nohidden ~/Library
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;enabling-key-repeating&#34;&gt;Enabling Key Repeating&lt;/h3&gt;
&lt;p&gt;The behaviour for keyboard long pressing in macOS is also of polarised personal taste. A typical behaviour that we often see is that the letter keeps popping out since one holds down a key until the key is released. Some years back this has been changed into &amp;lsquo;&lt;em&gt;Character Picker&lt;/em&gt;&#39;. It means when a key is pressed and held, the non-standard characters corresponding characters will pop up as the picture below.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/06/bootstrapping-macos-workspace/enabled-character-picker.png&#34;
      
        alt=&#34;Character Picker in action&#34;
        
        align=&#34;center&#34;
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 3. Character Picker in action
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;p&gt;Not a big fan of Character Picker, I rather like characters keep repeating when a key is held. In many cases, this behavior becomes very handy, for instance, when selecting large texts with &lt;!-- raw HTML omitted --&gt;⇧&lt;!-- raw HTML omitted --&gt; + &lt;!-- raw HTML omitted --&gt;↓ ↑ ← →&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;For that reason, I always disable that feature in any macOS that I am working on. Unfortunately, this cannot be done with &lt;span class=&#34;menu&#34;&gt;System Preferences&lt;/span&gt;
 but command line. After each command, you must re-start the editors to see the effect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# disable &amp;#39;Character Picker&amp;#39;&lt;/span&gt;
$ defaults write -g ApplePressAndHoldEnabled -bool false
&lt;span style=&#34;color:#75715e&#34;&gt;# it can be enabled&lt;/span&gt;
$ defaults write -g ApplePressAndHoldEnabled -bool true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another option relating to key repeating is tuning its speed/rate and delay. Luckily, we can do this via &lt;span class=&#34;menu&#34;&gt;System Preferences ▸ Keyboard&lt;/span&gt;
. My favourite is &amp;lsquo;&lt;em&gt;fastest&lt;/em&gt;&amp;rsquo; repeating and &amp;lsquo;&lt;em&gt;shortest&lt;/em&gt;&amp;rsquo; delay as possible.&lt;/p&gt;

  





&lt;figure &gt;
  
  &lt;img
      
        src=&#34;https://blog.test:8443/2018/06/bootstrapping-macos-workspace/speed-delay.png&#34;
      
        alt=&#34;Setting for key repeating and delay&#34;
        
        align=&#34;center&#34;
        
        width=&#34;80%&#34; style=&#34;max-width: 100%;&#34;
         /&gt;
  
  
  
    &lt;figcaption&gt;
      &lt;span class=&#34;img--caption&#34;&gt;
        Figure 4. Setting for key repeating and delay
        
      &lt;/span&gt;
    &lt;/figcaption&gt;
  
&lt;/figure&gt;



&lt;p&gt;Like many other options, we can change it via command line or fine tuning tool such as &lt;a href=&#34;https://pqrs.org/osx/karabiner&#34;&gt;Karabiner&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# InitialKeyRepeat: 120, 94, 68, 35, 25, 15 (lower is faster, default is 25)&lt;/span&gt;
$ defaults write -g InitialKeyRepeat -int &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# KeyRepeat: 120, 90, 60, 30, 12, 6, 2 (lower is faster, default is 6)&lt;/span&gt;
$ defaults write -g KeyRepeat -int 2	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;changing-hostnames&#34;&gt;Changing Hostnames&lt;/h3&gt;
&lt;p&gt;Most of the time, the default host name is not satisfied and you might want to have a cool name for your dev box. Then you are surely not alone. Here and there, you might find some cool combo like &lt;code&gt;harry@hogwart&lt;/code&gt; , &lt;code&gt;alice@wonderland&lt;/code&gt;,  &lt;code&gt;yoda@dagobah&lt;/code&gt;,  &lt;code&gt;joker@gotham&lt;/code&gt;, &lt;code&gt;neo@matrix&lt;/code&gt;, &lt;code&gt;frodo@mordor&lt;/code&gt; you name it. You can quickly do this via command line.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# change the primary host name&lt;/span&gt;
$ sudo scutil --set HostName gotham
&lt;span style=&#34;color:#75715e&#34;&gt;# ... do the same for local (Bonjour) host name&lt;/span&gt; 
$ sudo scutil --set LocalHostName gotham
&lt;span style=&#34;color:#75715e&#34;&gt;# and finally, keep the user-friendly computer&amp;#39;s name in Finder in sync&lt;/span&gt;
$ sudo scutil --set ComputerName gotham
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;dev-tools-and-configs&#34;&gt;Part 2: Development tools and configurations&lt;/h2&gt;
&lt;p&gt;In this part, I will focus more on some handy tools and configurations often used for my software development tasks.&lt;/p&gt;
&lt;h3 id=&#34;homebrew&#34;&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Homebrew provides a rich collection of tools I need, mostly open sources, that Apple does not. Installing Homebrew is super easy with a one-liner command. Before that, we only have to install the Xcode command line tools that Homebrew needs to build its tools.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install Xcode command line developer tools&lt;/span&gt;
$ xcode-select --install

&lt;span style=&#34;color:#75715e&#34;&gt;# now install Homebrew&lt;/span&gt;
$ /usr/bin/ruby -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we need to add &lt;code&gt;/usr/local/bin&lt;/code&gt; and &lt;code&gt;/usr/local/sbin &lt;/code&gt; (where Homebrew links the executable files) to the environment variable &lt;code&gt;PATH&lt;/code&gt;. This can be done by altering the shell startup scripts. For instance, for Bash shell it is &lt;code&gt;~/.bash_profile&lt;/code&gt;, for Zshell it is &lt;code&gt;~/.zsh_profile&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:/usr/local/bin:/usr/local/sbin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want the Homebrew tools have higher priority than the others, just switch &lt;code&gt;$PATH&lt;/code&gt; to the end instead. Moreover, there are many Finder-launched apps, agents and daemons in macOS might also need &lt;code&gt;PATH&lt;/code&gt; to find necessary executables (e.g. Intellij IDEA and Eclipse if I&amp;rsquo;m not mistaken). Fortunately, the launching of these tools would go through macOS &lt;a href=&#34;https://en.wikipedia.org/wiki/Launchd&#34;&gt;&lt;em&gt;launchd&lt;/em&gt;&lt;/a&gt; and therefore, can be configure with &lt;code&gt;launchctl&lt;/code&gt;. So I have to add this line to the end of my &lt;code&gt;.zshrc&lt;/code&gt; too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this line should be added at the end of .zshrc&lt;/span&gt;
/bin/launchctl setenv PATH $PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now I can install necessary tools using  &lt;code&gt;brew&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew install ack curl dnsmasq docker gcc git go gradle maven mysql node openssl openssh python3 php72 composer ruby rbenv sassc yarn zsh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Homebrew can also help handling macOS start-up services which are useful for managing servers like Apache httpd, nginx, php-fpm, MySQL, PostgreSQL, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew services start httpd
$ brew services stop httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For quick re-installing or recovering Homebrew, I use &lt;a href=&#34;https://github.com/Homebrew/homebrew-bundle&#34;&gt;homebrew-bundle&lt;/a&gt; for backing up the current Homebrew&amp;rsquo;s installation and restoring later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# tap the bundle&lt;/span&gt;
$ brew tap Homebrew/bundle
&lt;span style=&#34;color:#75715e&#34;&gt;# dump all existing Homebrew packages to Brewfile&lt;/span&gt;
$ brew bundle dump --force
&lt;span style=&#34;color:#75715e&#34;&gt;# check the list of entries&lt;/span&gt;
$ brew bundle list
&lt;span style=&#34;color:#75715e&#34;&gt;# restore/install all packages from the Brewfile&lt;/span&gt; 
$ brew bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Homebrew also incorporates &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask&#34;&gt;Homebrew-Cask&lt;/a&gt; (formerly an independent plugin for Homebrew) that can help to install many macOS apps as you might see in the later sections.&lt;/p&gt;
&lt;h3 id=&#34;terminals-and-shells&#34;&gt;Terminals and Shells&lt;/h3&gt;
&lt;p&gt;Since working with Linux a lot and then macOS, I&amp;rsquo;m rather familiar with the command line. There are many cases using terminals would be more convenient than graphical editors. Thus, I need a good terminal app. The built-in Terminal app in macOS is not bad but I usually opt for &lt;a href=&#34;https://www.iterm2.com&#34;&gt;iTerm2&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install iterm2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some of my favorite settings for iTerms are including dark themes such as &lt;a href=&#34;https://draculatheme.com/iterm&#34;&gt;Dracula&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/meqif/1238378&#34;&gt;IR_Black&lt;/a&gt;, &lt;a href=&#34;https://github.com/junegunn/seoul256-iTerm2&#34;&gt;seoul_256&lt;/a&gt;, &lt;a href=&#34;https://github.com/nathanbuchar/atom-one-dark-terminal&#34;&gt;Atom One Dark&lt;/a&gt; along with a fixed-width font like &lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Cousine&#34;&gt;Cousine&lt;/a&gt;, &lt;a href=&#34;https://fonts.google.com/specimen/Roboto+Mono&#34;&gt;Roboto Mono&lt;/a&gt;, &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; or &lt;a href=&#34;https://www.typography.com/fonts/operator/overview/&#34;&gt;Operator Mono&lt;/a&gt; (very nice ligatures and italic mode), &lt;a href=&#34;https://fonts.google.com/specimen/Inconsolata&#34;&gt;Inconsolata&lt;/a&gt; or its variants (Inconsolata-dz, Inconsolata-g), or &lt;a href=&#34;https://github.com/source-foundry/Hack&#34;&gt;Hack&lt;/a&gt;. Some of these fonts can be installed via Homebrew Cask.&lt;/p&gt;
&lt;p&gt;Along with iTerms 2, I also love &lt;a href=&#34;http://www.zsh.org&#34;&gt;Z shell&lt;/a&gt; (zsh) which is an extended version of Bash shell a lot with many nice features like directory alias, command completion, path expansion, etc. You might also find some Zsh configuration frameworks like &lt;a href=&#34;https://ohmyz.sh&#34;&gt;oh-my-zsh&lt;/a&gt; or &lt;a href=&#34;https://github.com/sorin-ionescu/prezto&#34;&gt;Prezto&lt;/a&gt; amazing to start with. I&amp;rsquo;ve tried both of them and found oh-my-zsh a bit sluggish and Prezto a bit difficult to add more extensions or customize. I have actually used a small piece from either of them and found myself quickly forgetting the customised parts taken from the others. Hence, I decided to develop a set of my own &lt;a href=&#34;https://github.com/htr3n/zsh-config&#34;&gt;Zsh configurations&lt;/a&gt;. Moreover, I often keep a habit of writting Shell scripts in standard sh/bash as much as possible and keep Zsh-specific separately for better portability and compatibility.&lt;/p&gt;
&lt;h3 id=&#34;textcode-editors&#34;&gt;Text/Code Editors&lt;/h3&gt;
&lt;p&gt;There are quite a number of editors in macOS for developers ranging from, er, the built-in Text Editor, &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt;, &lt;a href=&#34;https://macromates.com&#34;&gt;TextMate&lt;/a&gt;, &lt;a href=&#34;https://www.barebones.com/products/textwrangler&#34;&gt;TextWrangler&lt;/a&gt;, the nerdy &lt;a href=&#34;https://www.vim.org&#34;&gt;Vim&lt;/a&gt;, &lt;a href=&#34;https://www.gnu.org/software/emacs&#34;&gt;Emacs&lt;/a&gt;, and recently &lt;a href=&#34;https://atom.io&#34;&gt;Atom&lt;/a&gt;, &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&#34;http://brackets.io&#34;&gt;Brackets&lt;/a&gt;, to name but a few. You might install these editos using Cask.&lt;/p&gt;
&lt;p&gt;In macOS, Sublime Text is often a powerful editor for many of us but it is quite costly. I used to love and work with Atom developed by Github as an effort to build a modern editor for developers. Atom has a plethora of extensions to become a very promising choice. Nevertheless, I was growing skeptical with its sluggishness in early days and therefore leaned to &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;, my current Swiss-army-knife editor-of-choice instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install visual-studio-code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Frequently using terminal/console, I just grasp vim for quick editing tasks and &lt;a href=&#34;https://github.com/htr3n/vim-config&#34;&gt;customised it&lt;/a&gt; a little bit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew install vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As working with larger and complex projects, I would need some full-fledged, heavy-weight IDEs such as Eclipse or Jetbrains Intellij IDEA and its brothers like PhpStorm, PyCharm. Other IDE including Netbeans, Visual Studio, Komodo can also be installed with &lt;em&gt;Cask&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install eclipse-java intellij-idea
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Markdown editors, e.g. Github infamous &lt;em&gt;README.md&lt;/em&gt; or my blog posts, I used &lt;a href=&#34;http://macdown.uranusjr.com&#34;&gt;MacDown&lt;/a&gt;. After discovering &lt;a href=&#34;https://typora.io&#34;&gt;Typora&lt;/a&gt;, MacDown becomes second in the pecking order for now (at least until Typora&amp;rsquo;s developers announce their paid plans).&lt;/p&gt;
&lt;p&gt;With Typora, I can directly write Markdown articles just like Microsoft Word.  I can do &lt;!-- raw HTML omitted --&gt;⌘&lt;!-- raw HTML omitted --&gt; + &lt;!-- raw HTML omitted --&gt;/&lt;!-- raw HTML omitted --&gt; to instantly switch back and forth between &lt;em&gt;Visual Editing&lt;/em&gt; and &lt;em&gt;Source&lt;/em&gt; modes. Even better, I can adapt the Markdown render in Typora to be nearly indentical to my blog and therefore, experience a kind of semi-&lt;em&gt;WYSIWYG&lt;/em&gt; Markdown editing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install typora
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;other-tools&#34;&gt;Other nice-to-have tools&lt;/h3&gt;
&lt;h4 id=&#34;gnu-tools&#34;&gt;GNU Tools&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew install coreutils autoconf automake findutils gawk gcc gnu-sed grep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ackhttpsbeyondgrepcom&#34;&gt;&lt;a href=&#34;https://beyondgrep.com&#34;&gt;Ack&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ack is faster and easier to use than grep&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew install ack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;dropboxhttpswwwdropboxcom&#34;&gt;&lt;a href=&#34;https://www.dropbox.com&#34;&gt;Dropbox&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Many of our customers and friends are sharing files using Dropbox, so are we ;). Note that Dropbox app must be installed in &lt;code&gt;/Applications&lt;/code&gt; to work properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install --appdir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Applications&amp;#34;&lt;/span&gt; dropbox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;docker-cehttpswwwdockercomcommunity-edition-and-command-line&#34;&gt;&lt;a href=&#34;https://www.docker.com/community-edition&#34;&gt;Docker CE&lt;/a&gt; and command line&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Every serious developer is talking about and working with it ;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install docker
$ brew install docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;spectaclehttpswwwspectacleappcom&#34;&gt;&lt;a href=&#34;https://www.spectacleapp.com&#34;&gt;Spectacle&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This is an amazing free app for resizing windows using shortcuts. I use it a lot to quickly arrange the working windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install spectacle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;alfredhttpswwwalfredappcom--powerpack-&#34;&gt;&lt;a href=&#34;https://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; + Powerpack ($)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Alfred is a must-have for me and, maybe, many other macOS users. The free version is useful enough but the paid (for Powerpack) can blow anyone away. Alfred helps me much more when I prefer to use the keyboard as much as possible instead of reaching for the mice.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install alfred
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;fluxhttpsjustgetfluxcom&#34;&gt;&lt;a href=&#34;https://justgetflux.com&#34;&gt;F.lux&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Saving my eyes staring daily at computer&amp;rsquo;s monitors (macOS also has Night Shift mode but my eyes still find F.lux more pleasant at night)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install flux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;web-browsers&#34;&gt;Web Browsers&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Installing Firefox and Google Chrome mainly for Web development, testing and debugging as I find Safari is, not perfect though, sufficient for daily use and conveniently sharing bookmarks and history links between macOS and my iPad and iPhone.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install google-chrome firefox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;remote-access&#34;&gt;Remote Access&lt;/h4&gt;
&lt;p&gt;Nothing is more convenient than &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_Shell&#34;&gt;SSH&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol&#34;&gt;SFTP&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# I prefer OpenSSH to the stock BSD SSH&lt;/span&gt;
$ brew install openssh
&lt;span style=&#34;color:#75715e&#34;&gt;# ...  love to quickly copy my public key to the servers&lt;/span&gt;
$ brew install ssh-copy-id
&lt;span style=&#34;color:#75715e&#34;&gt;# generate key pair&lt;/span&gt;
$ ssh-keygen -t rsa -b &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MacBookPro email@example.com&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# copy the public key to the host for passwordless authentication&lt;/span&gt;
$ ssh-copy-id user@host
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;networking-tools&#34;&gt;Networking Tools&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew install netcat curl wget nmap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;communication&#34;&gt;Communication&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.skype.com&#34;&gt;Skype&lt;/a&gt;, &lt;a href=&#34;https://www.slack.com&#34;&gt;Slack&lt;/a&gt;, &lt;a href=&#34;https://keybase.io&#34;&gt;Keybase&lt;/a&gt; (open source end-to-end encryption)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install skype slack keybase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;1passwordhttps1passwordcom-&#34;&gt;&lt;a href=&#34;https://1password.com&#34;&gt;1Password&lt;/a&gt; ($)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Help storing all of my private information and authentication in iCloud or Dropbox and using them in macOS or iOS.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ brew cask install 1password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;heading&#34;&gt;&lt;/h4&gt;
</description>
      </item>
    
      <item>
        <title>A journey from Apache CXF 2.2 to 3.2</title>
        <link>https://blog.test:8443/2018/06/apache-cxf-2-to-3/</link>
        <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
        
        <guid>f5c0e393e30a4ae55fe5000d5f950d7d</guid>
        <description>&lt;p&gt;I have used &lt;a href=&#34;https://cxf.apache.org&#34;&gt;Apache CXF&lt;/a&gt; 2.2 to develop Web services for some R&amp;amp;D projects that I took part in. At that time, it was a choice between &lt;a href=&#34;http://axis.apache.org/axis2/java/core&#34;&gt;Apache Axis/Axis2&lt;/a&gt; and CXF (formerly Codehaus XFire project).&lt;/p&gt;
&lt;p&gt;I eventually decided to get along with CXF due to its simplicity, quite clear documentation, good support for document-style Web services (+) and many standards, especially JAX-WS and JAX-RS.&lt;/p&gt;
&lt;p&gt;Moreover, Apache CXF also embraces smooth integration with Spring Framework (big plus for me as I was using Spring Web MVC 3 to develop the Web front-end). Everything went well for me on modelling and developing Web services based on JAX-WS for both directions: WSDL-first and Java-first.&lt;/p&gt;
&lt;p&gt;In my projects, I designed the WSDLs and used &lt;a href=&#34;http://cxf.apache.org/docs/wsdl-to-java.html&#34;&gt;WSDL2Java&lt;/a&gt; Maven plugin or command line to generate skeleton Java code of the Web services. The Java service implementations were kept separately in a package/folder to avoid any code overwriting. CXF services are so easy to configure with Spring Framework 3.0. The implementations of the services were loaded as Spring managed beans. The expose of a service is done via a CXF directive &lt;code&gt;&amp;lt;jaxws:endpoint&amp;gt;&lt;/code&gt; of which the &lt;code&gt;implementor &lt;/code&gt; attribute refers to the corresponding bean.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;beans&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span&gt;
       &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:jaxws=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://cxf.apache.org/jaxws&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;classpath:META-INF/cxf/cxf.xml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;classpath:META-INF/cxf/cxf-extension-soap.xml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;classpath:META-INF/cxf/cxf-extension-jaxws.xml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;classpath:META-INF/cxf/cxf-servlet.xml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;    
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CreditWorthinessImpl&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;westbank.ws.impl.CreditWorthinessImpl&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;p:dataAccessObject-ref=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dataAccessObject&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;jaxws:endpoint&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CreditWorthiness&amp;#34;&lt;/span&gt;
                  &lt;span style=&#34;color:#a6e22e&#34;&gt;implementor=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#CreditWorthinessImpl&amp;#34;&lt;/span&gt; 
                  &lt;span style=&#34;color:#a6e22e&#34;&gt;address=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/CreditWorthiness&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/jaxws:endpoint&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the Web app configuration &lt;code&gt;web.xml&lt;/code&gt;, CXF Servlet must be loaded by the container.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;cxf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;cxf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/services/*&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;upgrading-apache-cxf&#34;&gt;Upgrading Apache CXF&lt;/h2&gt;
&lt;p&gt;For a while I haven&amp;rsquo;t taken part in further WS development, i.e. not using Apache CXF a lot. One day I thought I could use the WS project to showcase and review my relevant knowledge. The codebase still works well after some mysterious library missing that I have not seen before. It is possible due to the built-in libraries for XML parsing that were implicitly used but now changed in the newer JRE. Apart from that, most of the libraries are also outdated. So I dedice to spend some time to exercise upgrading the project and refactor a bit its source code. Here I jot down some major points on upgrading Apache CXF.&lt;/p&gt;
&lt;p&gt;The upgrading was not as easy and smooth as just changing the dependencies&amp;rsquo; versions. A lot of conflicts or major refactoring happened. I had to read thoroughly the &lt;a href=&#34;http://cxf.apache.org/docs/migration-guides.html&#34;&gt;documentation on CXF site for migration&lt;/a&gt; and decided to go gradually over each major version of Apache CXF.&lt;/p&gt;
&lt;h2 id=&#34;-from-version-22-to-27-&#34;&gt;&amp;hellip; from version 2.2 to 2.7 &amp;hellip;&lt;/h2&gt;
&lt;p&gt;From Apache CXF 2.2 to 2.6, not so many changes are relevant for the project as I mainly used &lt;code&gt;cxf-rt-frontend-jaxws&lt;/code&gt;.  Another &lt;a href=&#34;http://cxf.apache.org/docs/embedding-cxf-inside-spring.html&#34;&gt;significant change since 2.4&lt;/a&gt; causes errors for Spring / Jetty server regarding importing CXF&amp;rsquo;s XML resources. Recall the aforementioned Spring bean configuration where CXF service implementations were loaded and published? There are a number of &lt;code&gt;&amp;lt;import&amp;gt;&lt;/code&gt; directives. These directives advise Spring to load the corresponding CXF resources. Now we only need &amp;ldquo;&lt;em&gt;one to rule them all&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resource=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;classpath:META-INF/cxf/cxf.xml&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To upgrade to version 2.6, I have to revise the project with respect to the merging of &lt;code&gt;cxf-common-utilites&lt;/code&gt; into &lt;code&gt;cxf-api&lt;/code&gt;, the removal of &lt;code&gt;cxf-rt-binding-http&lt;/code&gt;, and the refactoring that impact &lt;code&gt;cxf-rt-core&lt;/code&gt;.  Most of the other changes from 2.2 to 2.7 are for JAX-RS, which were used very little or none in my project.&lt;/p&gt;
&lt;h2 id=&#34;-and-to-version-30&#34;&gt;&amp;hellip; and to version 3.0+&lt;/h2&gt;
&lt;p&gt;Apache CXF 3.0 requires a rather disruptive change, from Spring Framework 3.0 to 3.2+. Again, I used standard Spring bean configurations which are still valid for Spring 3.2. Hence, the project works well with Spring 3.2.18-RELEASE. I only need to remove all version numbers in the Spring XML schemas. The major change I must deal with is to remove the dependency of &lt;code&gt;cxf-api&lt;/code&gt; as it was merged with &lt;code&gt;cxf-core&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then there comes the most dramatic issue with CXF 3.0.16 (sic!). &lt;code&gt;cxf-codegen-plugin&lt;/code&gt; used to generate Java code from WSDLs refused to work (which was no problem in earlier verions) and spit out errors like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ERROR] Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.0.16:wsdl2java (generate-sources) on project loan-approval-portal: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.0.16:wsdl2java failed: org.apache.cxf.wsdl11.WSDLRuntimeException: Fail to create wsdl definition file:%3c?xml%20version=%221.0%22%20encoding=%22UTF-8%22?%3e: WSDLException: faultCode=PARSER_ERROR: Problem parsing &#39;file:%3c?xml%20version=%221.0%22%20encoding=%22UTF-8%22?%3e&#39;.: java.io.FileNotFoundException: &amp;lt; (No such file or directory) -&amp;gt; [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.0.16:wsdl2java (generate-sources) on project loan-approval-portal: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.0.16:wsdl2java failed: org.apache.cxf.wsdl11.WSDLRuntimeException: Fail to create wsdl definition file:%3c?xml%20version=%221.0%22%20encoding=%22UTF-8%22?%3e: WSDLException: faultCode=PARSER_ERROR: Problem parsing &#39;file:%3c?xml%20version=%221.0%22%20encoding=%22UTF-8%22?%3e&#39;.: java.io.FileNotFoundException: &amp;lt; (No such file or directory)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What puzzles me is that I have tried the command tool &lt;code&gt;wsdl2java&lt;/code&gt; of Apache CXF 3.0.16 with each WSDL and, strangely, found no errors at all. After some extra trial-and-error effort, I eventually figured out that an extra option for &lt;code&gt;cxf-codegen-plugin&lt;/code&gt; causes the error. The old/original plugin configuration in &lt;code&gt;pom.xml&lt;/code&gt; is as following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;cxf-codegen-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${cxf.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;generate-sources&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-sources&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;sourceRoot&amp;gt;&lt;/span&gt;${basedir}/src/main/java&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/sourceRoot&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;wsdlRoot&amp;gt;&lt;/span&gt;${basedir}/src/main/webapp/WEB-INF/wsdl/&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/wsdlRoot&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;defaultOptions&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;validateWsdl&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/validateWsdl&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;wsdlList&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/wsdlList&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;defaultExcludesNamespace&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/defaultExcludesNamespace&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extraargs&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extraarg&amp;gt;&lt;/span&gt;-defaultValues&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extraarg&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extraarg&amp;gt;&lt;/span&gt;-quiet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extraarg&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extraarg&amp;gt;&lt;/span&gt;-wsdlLocation&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extraarg&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;extraarg&amp;gt;&amp;lt;/extraarg&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/extraargs&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/defaultOptions&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;wsdl2java&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The option &lt;code&gt;&amp;lt;wsdlList&amp;gt;&lt;/code&gt; is the culprit. It was declared &lt;code&gt;boolean&lt;/code&gt; since CXF 2.2 to 2.7.0 as I found &lt;a href=&#34;https://cxf.apache.org/javadoc/latest-2.7.x/org/apache/cxf/maven_plugin/wsdl2java/Option.html&#34;&gt;here&lt;/a&gt;. However, in &lt;a href=&#34;http://cxf.apache.org/docs/wsdl-to-java.html&#34;&gt;the most recent documentation&lt;/a&gt; of CXF 3, &lt;code&gt;wsdlList&lt;/code&gt; is still listed as an option for &lt;code&gt;wsdl2java&lt;/code&gt; but no longer of type &lt;code&gt;boolean&lt;/code&gt;  (&lt;code&gt;-wsdlList &amp;lt;wsdlurl&amp;gt;&lt;/code&gt;). To make it worse, the option is totally hidden/undocumented. So all I have to do is to disable the line &lt;code&gt;&amp;lt;wsdlList&amp;gt;true&amp;lt;/wsdlList&amp;gt;&lt;/code&gt; and  &lt;code&gt;cxf-codegen-plugin&lt;/code&gt; works again in CXF 3.0+.&lt;/p&gt;
&lt;p&gt;The problems with &lt;code&gt;cxf-codegen-plugin&lt;/code&gt; keep raising when upgrading CXF to 3.2.4. This time, it threw another exception though.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ERROR] Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java (generate-sources) on project loan-approval-portal: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java failed: org.xml.sax.SAXNotRecognizedException: Property &#39;http://javax.xml.XMLConstants/property/accessExternalSchema&#39; is not recognized. -&amp;gt; [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java (generate-sources) on project loan-approval-portal: Execution generate-sources of goal org.apache.cxf:cxf-codegen-plugin:3.2.4:wsdl2java failed: org.xml.sax.SAXNotRecognizedException: Property &#39;http://javax.xml.XMLConstants/property/accessExternalSchema&#39; is not recognized.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can see that the error is due to schema validation. Before, I wanted to make sure that the WSDLs were valid before generating Java code. Thus, I chose to enable validation by &lt;code&gt;&amp;lt;validateWsdl&amp;gt;true&amp;lt;/validateWsdl&amp;gt;&lt;/code&gt;. This option is actually the root cause of the aforementioned exception during validation. The problem seems to stem from &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/jaxp/properties/properties.html&#34;&gt;new XML security properties in JAXB 1.5&lt;/a&gt; introduced in Java 8. When I disable that option, the plugin works fine again (voila!). But that means I must live in a maybe-not-error-free world (D&amp;rsquo;oh!). But we are all, aren&amp;rsquo;t we?&lt;/p&gt;
&lt;p&gt;After all of the above, I can get my project to work with Apache CXF 3.2.4 while keeping the business logic of services intact.&lt;/p&gt;
&lt;h2 id=&#34;update-2018-06-25-xml-less-spring-configuration&#34;&gt;Update 2018-06-25: XML-less Spring Configuration&lt;/h2&gt;
&lt;p&gt;As deciding to switch to XML-less Spring configuration to learn more about Spring Java annotations, I also tried to migrate CXF settings, too. Here are some last updates.&lt;/p&gt;
&lt;h3 id=&#34;loading-cxfservlet&#34;&gt;Loading CXFServlet&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyWebApplicationInitializer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; org&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;springframework&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WebApplicationInitializer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onStartup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServletContext container&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; ServletException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    AnnotationConfigWebApplicationContext root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AnnotationConfigWebApplicationContext&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ServiceConfiguration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;refresh&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Register and map the CXF servlet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    CXFServlet cxfServlet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CXFServlet&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    ServletRegistration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Dynamic&lt;/span&gt; reg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addServlet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cxf&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; cxfServlet&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setLoadOnStartup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/services/*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;publishing-services&#34;&gt;Publishing Services&lt;/h3&gt;
&lt;p&gt;I configured the CXF bus used for publishing web services and defining JAX-WS service endpoints. Instead of importing existing CXF&amp;rsquo;s XML resources as many developers have chosen, I opted for a pure Java approach. What we have to do is to create a bean named &amp;lsquo;&lt;em&gt;cxf&lt;/em&gt;&amp;rsquo; (defined as &lt;code&gt;org.apache.cxf.Bus.DEFAULT_BUS_ID&lt;/code&gt;) and use that bean for defining service endpoints.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.example.HelloWorldImpl&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.apache.cxf.Bus&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.apache.cxf.bus.spring.SpringBus&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.apache.cxf.jaxws.EndpointImpl&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.xml.ws.Endpoint&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ServiceConfiguration&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Bus&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DEFAULT_BUS_ID&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SpringBus &lt;span style=&#34;color:#a6e22e&#34;&gt;cxf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SpringBus&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Endpoint &lt;span style=&#34;color:#a6e22e&#34;&gt;helloWorld&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    HelloWorldImpl implementor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HelloWorldImpl&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    EndpointImpl endpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EndpointImpl&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cxf&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; implementor&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    endpoint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/HelloWorld&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; endpoint&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt; &lt;code&gt;Endpoint.publish()&lt;/code&gt; must be called to expose the service endpoint instead of &lt;code&gt;Endpoint.setAddress()&lt;/code&gt; as above.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      </item>
    
  </channel>
</rss>
